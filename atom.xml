<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LJGABC</title>
  <subtitle>嵌入式全栈工程师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ljgabc.com/"/>
  <updated>2016-11-23T13:30:54.370Z</updated>
  <id>http://ljgabc.com/</id>
  
  <author>
    <name>John Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Django和Blueimp Gallery制作照片墙</title>
    <link href="http://ljgabc.com/2016/11/23/2016-11-23-%E4%BD%BF%E7%94%A8Django%E5%92%8CBlueimp-Gallery%E5%88%B6%E4%BD%9C%E7%85%A7%E7%89%87%E5%A2%99/"/>
    <id>http://ljgabc.com/2016/11/23/2016-11-23-使用Django和Blueimp-Gallery制作照片墙/</id>
    <published>2016-11-23T13:19:14.000Z</published>
    <updated>2016-11-23T13:30:54.370Z</updated>
    
    <content type="html"><![CDATA[<p>本文记述了怎么使用<code>Django</code>和<code>Blueimp Gallery</code>一步一步搭建一个照片墙。</p>
<p>使用到的资源：</p>
<ul>
<li>前端: Blueimp Gallery</li>
<li>后端: Django</li>
<li>缩略图: easy_thumbnails</li>
<li>部署: nginx + gunicorn + supervisor </li>
</ul>
<p>开发环境是Centos 7.2 + Python 2.7.5</p>
<p>运行效果：<br><img src="/images/2016-11-23/1.png" alt="1"><br><img src="/images/2016-11-23/2.png" alt="2"></p>
<h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1 创建项目"></a>1 创建项目</h2><p>假设当前用户是<code>ljgabc</code>，当前目录是<code>/home/ljgabc</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">virtualenv django</div><div class="line">source django/bin/activate</div><div class="line">pip install django pillow easy_thumbnails gunicorn</div><div class="line">django-admin startproject websites</div><div class="line">cd websites</div><div class="line">python manage.py startapp gallery</div></pre></td></tr></table></figure></p>
<h2 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2 修改配置"></a>2 修改配置</h2><p>首先修改<code>websites/settings.py</code>中的<code>INSTALLED_APPS</code>，添加应用，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    ...,</div><div class="line">    &apos;gallery.apps.GalleryConfig&apos;,</div><div class="line">    &apos;easy_thumbnails&apos;,</div><div class="line">]</div></pre></td></tr></table></figure></p>
<p>其它配置如下：</p>
<ul>
<li>图片文件上传位置: <code>gallery/uploads</code></li>
<li>图片访问地址: <code>&lt;siteurl&gt;/uploads/xxxx.jpg</code></li>
<li>缩略图大小为<code>75x75</code></li>
<li>最终静态文件存放地址为<code>static/</code><br>因此修改<code>websites/settings.py</code>，添加以下内容，<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">STATIC_ROOT = os.path.join(BASE_DIR, &apos;static&apos;)</div><div class="line"></div><div class="line">MEDIA_ROOT = os.path.join(BASE_DIR, &apos;gallery&apos;)</div><div class="line">MEDIA_URL = &apos;/&apos;</div><div class="line">IMAGE_PREFIX = &apos;uploads&apos;</div><div class="line"></div><div class="line">THUMBNAIL_ALIASES = &#123;</div><div class="line">  &apos;&apos;: &#123;</div><div class="line">    &apos;75x75&apos; : &#123;&apos;size&apos;: (75,75), &apos;crop&apos;:True&#125;,</div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-配置URL"><a href="#3-配置URL" class="headerlink" title="3 配置URL"></a>3 配置URL</h2><p>由于我们的网站只有一页，所以需要配置的URL只有<code>/</code>、<code>/admin</code>和<code>/uploads</code>，修改<code>websites/urls.py</code>，配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">import os</div><div class="line">from django.conf.urls import url, include</div><div class="line">from django.contrib import admin</div><div class="line">from django.conf import settings</div><div class="line">from django.conf.urls.static import static</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^admin/&apos;, admin.site.urls),</div><div class="line">    url(r&apos;^$&apos;, include(&apos;gallery.urls&apos;)),</div><div class="line">]</div><div class="line"></div><div class="line">urlpatterns += static(settings.IMAGE_PREFIX, document_root=os.path.join(settings.MEDIA_ROOT, settings.IMAGE_PREFIX))</div></pre></td></tr></table></figure></p>
<p>添加<code>gallery/urls.py</code>,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from . import views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^$&apos;, views.gallery, name=&apos;gallery&apos;),</div><div class="line">]</div></pre></td></tr></table></figure></p>
<h2 id="4-添加模型"><a href="#4-添加模型" class="headerlink" title="4 添加模型"></a>4 添加模型</h2><p>编辑<code>gallery/models.py</code>，添加<code>Image</code>模型，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">from django.db import models</div><div class="line">from django.conf import settings</div><div class="line">from django.utils.encoding import python_2_unicode_compatible</div><div class="line"></div><div class="line"># Create your models here.</div><div class="line"></div><div class="line">@python_2_unicode_compatible</div><div class="line">class Image(models.Model):</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    模型包含Title、文件、创建时间等</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    title = models.CharField(max_length=250, blank=True)</div><div class="line">    original = models.ImageField(upload_to=settings.IMAGE_PREFIX, default=&apos;/tmp/none.jpg&apos;)</div><div class="line">    created = models.DateTimeField(auto_now_add=True)</div><div class="line"></div><div class="line">    def __str__(self):</div><div class="line">        return self.title</div></pre></td></tr></table></figure></p>
<h2 id="5-添加视图"><a href="#5-添加视图" class="headerlink" title="5 添加视图"></a>5 添加视图</h2><p>编辑<code>gallery/views.py</code>，配置视图，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">from django.shortcuts import render</div><div class="line">from .models import Image</div><div class="line"># Create your views here.</div><div class="line"></div><div class="line">def gallery(request):</div><div class="line">    image_list = Image.objects.all()</div><div class="line">    return render(request, &apos;gallery/index.html&apos;, &#123;</div><div class="line">        &apos;image_list&apos;: image_list</div><div class="line">        &#125;)</div></pre></td></tr></table></figure></p>
<h2 id="6-添加静态文件"><a href="#6-添加静态文件" class="headerlink" title="6 添加静态文件"></a>6 添加静态文件</h2><p>从网上下载<code>Blueimp Gallery</code>文件，将其中的<code>css</code>、<code>img</code>和<code>js</code>文件夹放入<code>gallery/static/gallery/</code>文件夹下。</p>
<h2 id="7-添加首页模板"><a href="#7-添加首页模板" class="headerlink" title="7 添加首页模板"></a>7 添加首页模板</h2><p>创建<code>gallery/templates/gallery/index.html</code>，内容如下：<br>
undefined

</p>
<h2 id="8-初始化"><a href="#8-初始化" class="headerlink" title="8 初始化"></a>8 初始化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python manage.py makemigrations gallery</div><div class="line">python manage.py migrate</div><div class="line">python manage.py createsuperuser</div></pre></td></tr></table></figure>
<h2 id="9-预览"><a href="#9-预览" class="headerlink" title="9 预览"></a>9 预览</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py runserver 0.0.0.0:8000</div></pre></td></tr></table></figure>
<h2 id="10-配置supervisor"><a href="#10-配置supervisor" class="headerlink" title="10 配置supervisor"></a>10 配置<code>supervisor</code></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install supervisor</div></pre></td></tr></table></figure>
<p>创建<code>/etc/supervisor.d/gallery.ini</code>, 添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[program:gallery]</div><div class="line">command=/home/ljgabc/django/bin/gunicorn websites.wsgi:application</div><div class="line">directory=/home/ljgabc/websites</div><div class="line">user=ljgabc</div><div class="line">autostart=true</div><div class="line">autorestart=true</div></pre></td></tr></table></figure></p>
<p>启动supervisor，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl start supervisor</div><div class="line"># supervisorctl start gallery</div></pre></td></tr></table></figure></p>
<p>此时访问<code>127.0.0.1:8000</code>应该可以看到应用已经启动。</p>
<h2 id="11-配置nginx"><a href="#11-配置nginx" class="headerlink" title="11 配置nginx"></a>11 配置<code>nginx</code></h2><p>首先将所有用到的静态文件收集到<code>STATIC_ROOT</code>目录下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py collectstatic</div></pre></td></tr></table></figure></p>
<p>创建<code>/etc/nginx/conf.d/gallery.conf</code>,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line">    server_name www.your-domain-name.com;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_set_header X-Real-IP $remote_addr;</div><div class="line">        proxy_set_header Host $http_host;</div><div class="line">        proxy_pass http://127.0.0.1:8000;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    location /static/ &#123;</div><div class="line">        root /home/ljgabc/websites;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动<code>nginx</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start nginx</div></pre></td></tr></table></figure></p>
<p>全文丸。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记述了怎么使用&lt;code&gt;Django&lt;/code&gt;和&lt;code&gt;Blueimp Gallery&lt;/code&gt;一步一步搭建一个照片墙。&lt;/p&gt;
&lt;p&gt;使用到的资源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端: Blueimp Gallery&lt;/li&gt;
&lt;li&gt;后端: Django
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
      <category term="Django" scheme="http://ljgabc.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django学习笔记</title>
    <link href="http://ljgabc.com/2016/11/22/2016-11-22-Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://ljgabc.com/2016/11/22/2016-11-22-Django学习笔记/</id>
    <published>2016-11-22T14:22:32.000Z</published>
    <updated>2016-11-22T14:33:24.312Z</updated>
    
    <content type="html"><![CDATA[<p>使用3天时间学习了Django并搭建了一个网站，感觉非常不错，记录一下学习过程。</p>
<h2 id="0-快速入门"><a href="#0-快速入门" class="headerlink" title="0 快速入门"></a>0 快速入门</h2><p>只需要简单几个命令，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">virtuelenv test</div><div class="line">source test/bin/activate</div><div class="line">pip install django Pillow</div><div class="line">django-admin startproject testprj</div><div class="line">cd testprj</div><div class="line">django-admin startapp website</div><div class="line">python manager.py runserver 0.0.0.0:8000</div></pre></td></tr></table></figure></p>
<h2 id="1-模型设计-Model"><a href="#1-模型设计-Model" class="headerlink" title="1 模型设计(Model)"></a>1 模型设计(Model)</h2><p>Django提供了一套ORM，用来将用Python类描述的数据结构映射到数据库中，使用起来非常简单。</p>
<p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line"># 引入models，orm所有用到的模型都在这个里面</div><div class="line">from django.db import models</div><div class="line"></div><div class="line"># 在Django中，模型用类来表示，必须继承自models.Model</div><div class="line">class User(models.Model):</div><div class="line">    # 自动包含一个id，Integer类型(IntegerField)，自动增长</div><div class="line"></div><div class="line">    # 定义一条数据，代表数据库中的一列</div><div class="line">    # 该列的类型是字符串(CharField)，最大长度为70</div><div class="line">    name = models.CharField(max_length=70)</div><div class="line"></div><div class="line">    # email列的类型是Email，保存到数据库时会检查该email的合法性</div><div class="line">    # 也可以用CharField，但就不能自动检查email的合法性了</div><div class="line">    email = models.EmailField(max_length=254)</div><div class="line"></div><div class="line">    # DateTimeField类型可以保存时间</div><div class="line">    # auto_now_add=True代表add记录时自动填入当前的时间</div><div class="line">    created_at = models.DateTimeField(auto_now_add=True)</div><div class="line"></div><div class="line">    # auto_now=Ture代表，每次更新（add或update）时，都会填入当前时间</div><div class="line">    updated_at = models.DateTimeField(auto_now=True)</div><div class="line"></div><div class="line">    def __str__(self): # __unicode__ on Python 2</div><div class="line">        # print该类型的对象时，打印的字符串</div><div class="line">        # 在Python2中使用 __unicode__</div><div class="line">        return self.name</div><div class="line"></div><div class="line">class Article(models.Model):</div><div class="line">    title = models.CharField(max_length=254)</div><div class="line"></div><div class="line">    # TextField用来存储大段的文字</div><div class="line">    content = models.TextField()</div><div class="line"></div><div class="line">    # 定义一个外键，引用User表中的数据</div><div class="line">    # 正向引用：a = Article(...), print a.user.name</div><div class="line">    # 反向引用：u = User..., print u.article_set</div><div class="line">    # on_delete的意思时，当指向的user被删除时，该Article应该怎么办</div><div class="line">    #  CASCADE: 关联操作，User被删除时，对应的Article也被删除</div><div class="line">    #  PROTECT：抛出ProtectedError异常，留给用户处理</div><div class="line">    #  SET_NULL: User被删除时，将user设置为null</div><div class="line">    #  SET_DEFAULT: 设置成默认值，此时user字段必须设置default=xxx</div><div class="line">    #  SET(xxx): 设置成xxx</div><div class="line">    user = models.ForeignKey(</div><div class="line">        &apos;User&apos;, on_delete=models.CASCADE,</div><div class="line">        )</div><div class="line"></div><div class="line">    created_at = models.DateTimeField(auto_now_add=True)</div><div class="line">    </div><div class="line">    updated_at = models.DateTimeField(auto_now=True)</div></pre></td></tr></table></figure></p>
<p>第一次使用时，通过以下命令创建数据库及表格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py migrate</div></pre></td></tr></table></figure></p>
<h2 id="2-URL设计"><a href="#2-URL设计" class="headerlink" title="2 URL设计"></a>2 URL设计</h2><p><code>Django</code>使用一张urlpatterns表格来匹配访问的url。先看个例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from . import views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^articles/([0-9]&#123;4&#125;)/$&apos;, views.year_archive),</div><div class="line">    url(r&apos;^articles/([0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)/$&apos;, views.month_archive),</div><div class="line">    url(r&apos;^articles/([0-9]&#123;4&#125;)/([0-9]&#123;2&#125;)/([0-9]+)/$&apos;, views.article_detail),</div><div class="line">]</div></pre></td></tr></table></figure>
<p>代码中，每一行url代表一类url。url的第一个参数时一个正则表达式，用来匹配url。第二个参数是访问该url时的回调函数。</p>
<p>第一行会匹配类似<code>/articles/2016/</code>这样的url，当用户访问时，会调用<code>views.year_archive(request, &#39;2016&#39;)</code>。</p>
<p>第二行会匹配’/articles/2016/11/‘这样的url，当用户访问时，会调用<code>views.month_archive(request, &#39;2016&#39;, &#39;11&#39;)</code>。</p>
<p>第三行类似。</p>
<h2 id="3-View设计"><a href="#3-View设计" class="headerlink" title="3 View设计"></a>3 View设计</h2><p>View是用户访问url时实际执行的动作代码，看个例子。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">from django.shortcuts import render</div><div class="line">from .models import Article</div><div class="line"></div><div class="line">def year_archive(request, year):</div><div class="line">    a_list = Article.objects.filter(created_at__year=year)</div><div class="line">    context = &#123;&apos;year&apos;: year, &apos;article_list&apos;: a_list&#125;</div><div class="line">    return render(request, &apos;news/year_archive.html&apos;, context)</div></pre></td></tr></table></figure></p>
<p>当访问’/articles/2016/‘时，会从数据库中检索到所有创建时间为2016年的所有文章，并将检索到的文章返回。</p>
<h2 id="4-模板设计"><a href="#4-模板设计" class="headerlink" title="4 模板设计"></a>4 模板设计</h2><p>还是用例子说明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">&#123;% extends &quot;base.html&quot; %&#125;</div><div class="line">&#123;% block title %&#125;Articles for &#123;&#123; year &#125;&#125;&#123;% endblock %&#125;</div><div class="line"></div><div class="line">&#123;% block content %&#125;</div><div class="line">&lt;h1&gt;Articles for &#123;&#123; year &#125;&#125;&lt;/h1&gt;</div><div class="line">&#123;% for article in article_list %&#125;</div><div class="line">    &lt;p&gt;&#123;&#123; article.title &#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;p&gt;By &#123;&#123; article.user.name &#125;&#125;&lt;/p&gt;</div><div class="line">    &lt;p&gt;Published &#123;&#123; article.pub_date|date:&quot;F j, Y&quot; &#125;&#125;&lt;/p&gt;</div><div class="line">&#123;% endfor %&#125;</div><div class="line">&#123;% endblock %&#125;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>
<p>第一行表明该模板继承<code>base.html</code>。后续通过<code>block</code>重载其中的一些部分。<br>
第二行表明，用`Articles for {{ year }}`重载`base.html`中`{% block title %}{% endblock %}`之间的部分。

第9行，`{{ article.pub_date|date:"F j, Y" }}`，用来给前面的数据格式化，叫做`template filters`。
<br><code>base.html</code>的内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">&#123;% load static %&#125;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;&#123;% block title %&#125;&#123;% endblock %&#125;&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;img src=&quot;&#123;% static &quot;images/sitelogo.png&quot; %&#125;&quot; alt=&quot;Logo&quot; /&gt;</div><div class="line">    &#123;% block content %&#125;&#123;% endblock %&#125;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure></p>
<h2 id="5-一个完成的例子"><a href="#5-一个完成的例子" class="headerlink" title="5 一个完成的例子"></a>5 一个完成的例子</h2><h3 id="5-1-创建工程和APP"><a href="#5-1-创建工程和APP" class="headerlink" title="5.1 创建工程和APP"></a>5.1 创建工程和APP</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">django-admin startproject mysite</div><div class="line">python manage.py startapp todo</div></pre></td></tr></table></figure>
<h3 id="5-2-编辑-todo-models-py"><a href="#5-2-编辑-todo-models-py" class="headerlink" title="5.2 编辑 todo/models.py"></a>5.2 编辑 todo/models.py</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">from django.db import models</div><div class="line">from django.utils.encoding import python_2_unicode_compatible</div><div class="line"></div><div class="line">@python_2_unicode_compatible</div><div class="line">class ToDo(models.Model):</div><div class="line">    title = models.CharField(max_length=200)</div><div class="line">    done = models.BooleanField(default=False)</div><div class="line">    created_at = models.DateTimeField(auto_now_add=True)</div><div class="line">    updated_at = models.DateTimeField(auto_now=True)</div><div class="line"></div><div class="line">    def __str__(self):</div><div class="line">        return self.title</div></pre></td></tr></table></figure>
<h3 id="5-3-编辑-mysite-settings-py"><a href="#5-3-编辑-mysite-settings-py" class="headerlink" title="5.3 编辑 mysite/settings.py"></a>5.3 编辑 mysite/settings.py</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">INSTALLED_APPS = [</div><div class="line">    &apos;todo.apps.TodoConfig&apos;,</div><div class="line">    &apos;django.contrib.admin&apos;,</div><div class="line">    &apos;django.contrib.auth&apos;,</div><div class="line">    &apos;django.contrib.contenttypes&apos;,</div><div class="line">    &apos;django.contrib.sessions&apos;,</div><div class="line">    &apos;django.contrib.messages&apos;,</div><div class="line">    &apos;django.contrib.staticfiles&apos;,</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="5-4-生成数据库表"><a href="#5-4-生成数据库表" class="headerlink" title="5.4 生成数据库表"></a>5.4 生成数据库表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">python manager.py makemigrations todo</div><div class="line">python manager.py sqlmigrate todo 0001</div><div class="line">python manager.py migrate</div></pre></td></tr></table></figure>
<h3 id="5-5-编辑-todo-views-py"><a href="#5-5-编辑-todo-views-py" class="headerlink" title="5.5 编辑 todo/views.py"></a>5.5 编辑 todo/views.py</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">from django.shortcuts import render</div><div class="line">from django.http import HttpResponseRedirect</div><div class="line">from django.urls import reverse</div><div class="line">from .models import ToDo</div><div class="line"></div><div class="line">def index(request):</div><div class="line">    if request.method == &apos;POST&apos;:</div><div class="line">        todo = ToDo(title=request.POST[&apos;todo&apos;])</div><div class="line">        todo.save()</div><div class="line">        return HttpResponseRedirect(reverse(&apos;todo:index&apos;))</div><div class="line">    else:</div><div class="line">        todo_list = Todo.objects.order_by(&apos;created_at&apos;)</div><div class="line">        return render(request, &apos;todo/index.html&apos;, &#123;</div><div class="line">            &apos;todo_list&apos;: todo_list</div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
<h3 id="5-6-创建-todo-urls-py"><a href="#5-6-创建-todo-urls-py" class="headerlink" title="5.6 创建 todo/urls.py"></a>5.6 创建 todo/urls.py</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import url</div><div class="line">from . import views</div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^$&apos;, views.index, name=&apos;index&apos;),</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="5-7-编辑-mysite-urls-py"><a href="#5-7-编辑-mysite-urls-py" class="headerlink" title="5.7 编辑 mysite/urls.py"></a>5.7 编辑 mysite/urls.py</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">from django.conf.urls import include, url</div><div class="line">from django.contrib import admin</div><div class="line"></div><div class="line">app_name = &apos;todo&apos;</div><div class="line">urlpatterns = [</div><div class="line">    url(r&apos;^todo/&apos;, include(&apos;todo.urls&apos;)),</div><div class="line">    url(r&apos;^admin/&apos;, admin.site.urls),</div><div class="line">]</div></pre></td></tr></table></figure>
<h3 id="5-8-编辑todo-templates-todo-index-html"><a href="#5-8-编辑todo-templates-todo-index-html" class="headerlink" title="5.8 编辑todo/templates/todo/index.html"></a>5.8 编辑todo/templates/todo/index.html</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;% raw %&#125;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;ToDo List&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;h1&gt;ToDo List&lt;/h1&gt;</div><div class="line">    &#123;% if error_message %&#125;&lt;p&gt;&lt;strong&gt;&#123;&#123; error_message &#125;&#125;&lt;/strong&gt;&lt;/p&gt;&#123;% endif %&#125;</div><div class="line">    &lt;ul&gt;</div><div class="line">    &#123;% for todo in todo_list %&#125;</div><div class="line">        &lt;li&gt;&#123;&#123; todo.title &#125;&#125;&lt;/li&gt;</div><div class="line">    &#123;% endfor %&#125;</div><div class="line">    &lt;/ul&gt;</div><div class="line">    &lt;hr /&gt;</div><div class="line">    &lt;form action=&quot;&#123;% url &apos;todo:index&apos; %&#125;&quot; method=&quot;post&quot;&gt;</div><div class="line">        &#123;% csrf_token %&#125;</div><div class="line">        &lt;input type=&quot;text&quot; name=&quot;todo&quot; /&gt;</div><div class="line">        &lt;input type=&quot;submit&quot; value=&quot;Add&quot; /&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">&#123;% endraw %&#125;</div></pre></td></tr></table></figure>
<h3 id="5-9-创建超级用户"><a href="#5-9-创建超级用户" class="headerlink" title="5.9 创建超级用户"></a>5.9 创建超级用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python manage.py createsuperuser</div></pre></td></tr></table></figure>
<h3 id="5-10-使用Admin管理数据库"><a href="#5-10-使用Admin管理数据库" class="headerlink" title="5.10 使用Admin管理数据库"></a>5.10 使用Admin管理数据库</h3><p>编辑 todo/admin.py<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">from django.contrib import admin</div><div class="line">from .models import ToDo</div><div class="line"></div><div class="line">admin.site.register(ToDo)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用3天时间学习了Django并搭建了一个网站，感觉非常不错，记录一下学习过程。&lt;/p&gt;
&lt;h2 id=&quot;0-快速入门&quot;&gt;&lt;a href=&quot;#0-快速入门&quot; class=&quot;headerlink&quot; title=&quot;0 快速入门&quot;&gt;&lt;/a&gt;0 快速入门&lt;/h2&gt;&lt;p&gt;只需要简单几
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
      <category term="Django" scheme="http://ljgabc.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>日出</title>
    <link href="http://ljgabc.com/2016/11/21/2016-11-21-%E6%97%A5%E5%87%BA/"/>
    <id>http://ljgabc.com/2016/11/21/2016-11-21-日出/</id>
    <published>2016-11-21T13:20:32.000Z</published>
    <updated>2016-11-21T13:22:39.344Z</updated>
    
    <content type="html"><![CDATA[<p>今天的日出真美。</p>
<p><img src="/images/2016-11-21/1.jpg" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天的日出真美。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-11-21/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>莲花山公园</title>
    <link href="http://ljgabc.com/2016/11/20/2016-11-20-%E8%8E%B2%E8%8A%B1%E5%B1%B1%E5%85%AC%E5%9B%AD/"/>
    <id>http://ljgabc.com/2016/11/20/2016-11-20-莲花山公园/</id>
    <published>2016-11-20T11:42:11.000Z</published>
    <updated>2016-11-20T14:29:41.210Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-11-20/1.jpg" alt="1"></p>
<p><img src="/images/2016-11-20/2.jpg" alt="2"></p>
<p><img src="/images/2016-11-20/3.jpg" alt="3"></p>
<p><img src="/images/2016-11-20/4.jpg" alt="4"></p>
<p><img src="/images/2016-11-20/5.jpg" alt="5"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-11-20/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-11-20/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-11-20/3.jp
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>彩鹿</title>
    <link href="http://ljgabc.com/2016/11/15/2016-11-15-%E5%BD%A9%E9%B9%BF/"/>
    <id>http://ljgabc.com/2016/11/15/2016-11-15-彩鹿/</id>
    <published>2016-11-15T14:27:59.000Z</published>
    <updated>2016-11-20T14:29:41.210Z</updated>
    
    <content type="html"><![CDATA[<p>第一副油画，画了3天，有空装起来。</p>
<p><img src="/images/2016-11-15/1.jpg" alt="1"></p>
<p><img src="/images/2016-11-15/2.jpg" alt="2"></p>
<p><img src="/images/2016-11-15/3.jpg" alt="3"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一副油画，画了3天，有空装起来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-11-15/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-11-15/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>今晚的月亮</title>
    <link href="http://ljgabc.com/2016/11/14/2016-11-14-%E4%BB%8A%E6%99%9A%E7%9A%84%E6%9C%88%E4%BA%AE/"/>
    <id>http://ljgabc.com/2016/11/14/2016-11-14-今晚的月亮/</id>
    <published>2016-11-14T14:22:26.000Z</published>
    <updated>2016-11-20T14:29:41.210Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-11-14/1.jpg" alt="1"></p>
<p><img src="/images/2016-11-14/2.jpg" alt="2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-11-14/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-11-14/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>深圳湾夜骑</title>
    <link href="http://ljgabc.com/2016/11/06/2016-11-06-%E6%B7%B1%E5%9C%B3%E6%B9%BE%E5%A4%9C%E9%AA%91/"/>
    <id>http://ljgabc.com/2016/11/06/2016-11-06-深圳湾夜骑/</id>
    <published>2016-11-06T12:53:58.000Z</published>
    <updated>2016-11-20T14:29:41.210Z</updated>
    
    <content type="html"><![CDATA[<p>寻二三好友，或打球，或登山，或骑行。</p>
<p><img src="/images/2016-11-06/1.jpg" alt="1"></p>
<p><img src="/images/2016-11-06/2.jpg" alt="2"></p>
<p><img src="/images/2016-11-06/3.jpg" alt="3"></p>
<p><img src="/images/2016-11-06/4.jpg" alt="4"></p>
<p><img src="/images/2016-11-06/5.jpg" alt="5"></p>
<p><img src="/images/2016-11-06/6.jpg" alt="6"></p>
<p><img src="/images/2016-11-06/7.jpg" alt="7"></p>
<p><img src="/images/2016-11-06/8.jpg" alt="8"></p>
<p><img src="/images/2016-11-06/9.jpg" alt="9"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;寻二三好友，或打球，或登山，或骑行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-11-06/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-11-06/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img sr
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>西丽百合酒店</title>
    <link href="http://ljgabc.com/2016/10/28/2016-10-28-%E8%A5%BF%E4%B8%BD%E7%99%BE%E5%90%88%E9%85%92%E5%BA%97/"/>
    <id>http://ljgabc.com/2016/10/28/2016-10-28-西丽百合酒店/</id>
    <published>2016-10-28T11:55:07.000Z</published>
    <updated>2016-11-20T14:29:41.210Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-10-28/1.jpg" alt="1"></p>
<p><img src="/images/2016-10-28/2.jpg" alt="2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-10-28/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-10-28/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>方亦与他的朋友们</title>
    <link href="http://ljgabc.com/2016/10/26/2016-10-26-%E6%96%B9%E4%BA%A6%E4%B8%8E%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC/"/>
    <id>http://ljgabc.com/2016/10/26/2016-10-26-方亦与他的朋友们/</id>
    <published>2016-10-26T15:20:18.000Z</published>
    <updated>2016-11-20T14:29:41.210Z</updated>
    
    <content type="html"><![CDATA[<p>深圳职业技术学院音乐会</p>
<p><img src="/images/2016-10-26/1.jpg" alt="1"></p>
<p><img src="/images/2016-10-26/2.jpg" alt="2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深圳职业技术学院音乐会&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-10-26/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-10-26/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>深大中字楼楼顶</title>
    <link href="http://ljgabc.com/2016/10/25/2016-10-24-%E6%B7%B1%E5%A4%A7%E4%B8%AD%E5%AD%97%E6%A5%BC/"/>
    <id>http://ljgabc.com/2016/10/25/2016-10-24-深大中字楼/</id>
    <published>2016-10-24T16:24:06.000Z</published>
    <updated>2016-11-20T14:29:41.210Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-10-24/1.jpg" alt="1"></p>
<p><img src="/images/2016-10-24/2.jpg" alt="2"></p>
<p><img src="/images/2016-10-24/3.jpg" alt="3"></p>
<p><img src="/images/2016-10-24/4.jpg" alt="4"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-10-24/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-10-24/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-10-24/3.jp
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>夜游</title>
    <link href="http://ljgabc.com/2016/10/22/2016-10-22-%E5%A4%9C%E6%B8%B8/"/>
    <id>http://ljgabc.com/2016/10/22/2016-10-22-夜游/</id>
    <published>2016-10-22T15:14:01.000Z</published>
    <updated>2016-11-20T14:29:41.210Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-10-22/1.jpg" alt="1"></p>
<p><img src="/images/2016-10-22/2.jpg" alt="2"></p>
<p><img src="/images/2016-10-22/3.jpg" alt="3"></p>
<p><img src="/images/2016-10-22/4.jpg" alt="4"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-10-22/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-10-22/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-10-22/3.jp
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="街拍" scheme="http://ljgabc.com/tags/%E8%A1%97%E6%8B%8D/"/>
    
  </entry>
  
  <entry>
    <title>窗外</title>
    <link href="http://ljgabc.com/2016/10/19/2016-10-19-%E7%AA%97%E5%A4%96/"/>
    <id>http://ljgabc.com/2016/10/19/2016-10-19-窗外/</id>
    <published>2016-10-19T15:00:10.000Z</published>
    <updated>2016-11-20T14:29:41.209Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-10-19/1.jpg" alt="1"></p>
<p><img src="/images/2016-10-19/2.jpg" alt="2"></p>
<p><img src="/images/2016-10-19/3.jpg" alt="3"></p>
<p><img src="/images/2016-10-19/4.jpg" alt="4"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-10-19/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-10-19/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-10-19/3.jp
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="街拍" scheme="http://ljgabc.com/tags/%E8%A1%97%E6%8B%8D/"/>
    
  </entry>
  
  <entry>
    <title>哈尔滨之秋</title>
    <link href="http://ljgabc.com/2016/10/15/2016-10-15-%E5%93%88%E5%B0%94%E6%BB%A8%E4%B9%8B%E7%A7%8B/"/>
    <id>http://ljgabc.com/2016/10/15/2016-10-15-哈尔滨之秋/</id>
    <published>2016-10-15T14:01:23.000Z</published>
    <updated>2016-11-20T14:29:41.209Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-10-15/1.jpg" alt="1"></p>
<p><img src="/images/2016-10-15/2.jpg" alt="2"></p>
<p><img src="/images/2016-10-15/3.jpg" alt="3"></p>
<p><img src="/images/2016-10-15/4.jpg" alt="4"></p>
<p><img src="/images/2016-10-15/5.jpg" alt="5"></p>
<p><img src="/images/2016-10-15/6.jpg" alt="6"></p>
<p><img src="/images/2016-10-15/7.jpg" alt="7"></p>
<p><img src="/images/2016-10-15/8.jpg" alt="8"></p>
<p><img src="/images/2016-10-15/9.jpg" alt="9"></p>
<p><img src="/images/2016-10-15/10.jpg" alt="10"></p>
<p><img src="/images/2016-10-15/11.jpg" alt="11"></p>
<p><img src="/images/2016-10-15/12.jpg" alt="12"></p>
<p><img src="/images/2016-10-15/13.jpg" alt="13"></p>
<p><img src="/images/2016-10-15/14.jpg" alt="14"></p>
<p><img src="/images/2016-10-15/15.jpg" alt="15"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-10-15/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-10-15/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-10-15/3.jp
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>阿拉斯加</title>
    <link href="http://ljgabc.com/2016/10/02/2016-10-02-%E9%98%BF%E6%8B%89%E6%96%AF%E5%8A%A0/"/>
    <id>http://ljgabc.com/2016/10/02/2016-10-02-阿拉斯加/</id>
    <published>2016-10-02T14:40:51.000Z</published>
    <updated>2016-11-20T14:29:41.209Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-10-02/1.jpg" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-10-02/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>途径开封</title>
    <link href="http://ljgabc.com/2016/10/01/2016-10-01-%E9%80%94%E5%BE%84%E5%BC%80%E5%B0%81/"/>
    <id>http://ljgabc.com/2016/10/01/2016-10-01-途径开封/</id>
    <published>2016-10-01T14:39:06.000Z</published>
    <updated>2016-11-20T14:29:41.209Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-10-01/1.jpg" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-10-01/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>游广州</title>
    <link href="http://ljgabc.com/2016/09/23/2016-09-23-%E6%B8%B8%E5%B9%BF%E5%B7%9E/"/>
    <id>http://ljgabc.com/2016/09/23/2016-09-23-游广州/</id>
    <published>2016-09-23T14:41:45.000Z</published>
    <updated>2016-11-20T14:29:41.209Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-09-23/1.jpg" alt="1"></p>
<p><img src="/images/2016-09-23/2.jpg" alt="2"></p>
<p><img src="/images/2016-09-23/3.jpg" alt="3"></p>
<p><img src="/images/2016-09-23/4.jpg" alt="4"></p>
<p><img src="/images/2016-09-23/5.jpg" alt="5"></p>
<p><img src="/images/2016-09-23/6.jpg" alt="6"></p>
<p><img src="/images/2016-09-23/7.jpg" alt="7"></p>
<p><img src="/images/2016-09-23/8.jpg" alt="8"></p>
<p><img src="/images/2016-09-23/9.jpg" alt="9"></p>
<p><img src="/images/2016-09-23/10.jpg" alt="10"></p>
<p><img src="/images/2016-09-23/11.jpg" alt="11"></p>
<p><img src="/images/2016-09-23/12.jpg" alt="12"></p>
<p><img src="/images/2016-09-23/13.jpg" alt="13"></p>
<p><img src="/images/2016-09-23/14.jpg" alt="14"></p>
<p><img src="/images/2016-09-23/15.jpg" alt="15"></p>
<p><img src="/images/2016-09-23/16.jpg" alt="16"></p>
<p><img src="/images/2016-09-23/17.jpg" alt="17"></p>
<p><img src="/images/2016-09-23/18.jpg" alt="18"></p>
<p><img src="/images/2016-09-23/19.jpg" alt="19"></p>
<p><img src="/images/2016-09-23/20.jpg" alt="20"></p>
<p><img src="/images/2016-09-23/21.jpg" alt="21"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-09-23/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-09-23/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-09-23/3.jp
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>深圳11号线</title>
    <link href="http://ljgabc.com/2016/09/17/2016-09-17-%E6%B7%B1%E5%9C%B311%E5%8F%B7%E7%BA%BF/"/>
    <id>http://ljgabc.com/2016/09/17/2016-09-17-深圳11号线/</id>
    <published>2016-09-17T14:47:09.000Z</published>
    <updated>2016-11-20T14:29:41.209Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-09-17/1.jpg" alt="1"></p>
<p><img src="/images/2016-09-17/11.jpg" alt="11"></p>
<p><img src="/images/2016-09-17/2.jpg" alt="2"></p>
<p><img src="/images/2016-09-17/3.jpg" alt="3"></p>
<p><img src="/images/2016-09-17/4.jpg" alt="4"></p>
<p><img src="/images/2016-09-17/5.jpg" alt="5"></p>
<p><img src="/images/2016-09-17/6.jpg" alt="6"></p>
<p><img src="/images/2016-09-17/7.jpg" alt="7"></p>
<p><img src="/images/2016-09-17/8.jpg" alt="8"></p>
<p><img src="/images/2016-09-17/9.jpg" alt="9"></p>
<p><img src="/images/2016-09-17/10.jpg" alt="10"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-09-17/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-09-17/11.jpg&quot; alt=&quot;11&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-09-17/2.
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
      <category term="街拍" scheme="http://ljgabc.com/tags/%E8%A1%97%E6%8B%8D/"/>
    
  </entry>
  
  <entry>
    <title>小辣甲岛</title>
    <link href="http://ljgabc.com/2016/09/03/2016-09-03-%E5%B0%8F%E8%BE%A3%E7%94%B2%E5%B2%9B/"/>
    <id>http://ljgabc.com/2016/09/03/2016-09-03-小辣甲岛/</id>
    <published>2016-09-03T14:50:20.000Z</published>
    <updated>2016-11-20T14:29:41.209Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-09-03/1.jpg" alt="1"></p>
<p><img src="/images/2016-09-03/2.jpg" alt="2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-09-03/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-09-03/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>在Centos7上安装PPTP服务器</title>
    <link href="http://ljgabc.com/2016/07/06/2016-07-06-%E5%9C%A8Centos7%E4%B8%8A%E5%AE%89%E8%A3%85PPTP%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://ljgabc.com/2016/07/06/2016-07-06-在Centos7上安装PPTP服务器/</id>
    <published>2016-07-06T08:25:50.000Z</published>
    <updated>2016-11-20T14:29:41.209Z</updated>
    
    <content type="html"><![CDATA[<p>PPTP是做什么用的就不介绍了，不懂的可以百毒一下，下面介绍在VPS上安装PPTP服务器的步骤，系统环境是Centos 7。</p>
<h1 id="1-检查VPS是否支持"><a href="#1-检查VPS是否支持" class="headerlink" title="1 检查VPS是否支持"></a>1 检查VPS是否支持</h1><p>不是所有的VPS都支持PPTP服务，所以需要检查一下，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat /dev/ppp</div></pre></td></tr></table></figure></p>
<p>如果返回<code>cat: /dev/ppp: No such file or directory</code> 或者 <code>cat: /dev/ppp: No such device or address</code>，说明系统支持。</p>
<h1 id="2-安装组件"><a href="#2-安装组件" class="headerlink" title="2 安装组件"></a>2 安装组件</h1><p>只需要安装一个<code>pptpd</code>，命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y pptpd</div></pre></td></tr></table></figure></p>
<h1 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3 配置文件"></a>3 配置文件</h1><h2 id="3-1-pptpd-conf"><a href="#3-1-pptpd-conf" class="headerlink" title="3.1　pptpd.conf"></a>3.1　pptpd.conf</h2><p>编辑<code>/etc/pptpd.conf</code>，在文件的最后，去掉下面字段前面的#，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">localip 192.168.0.1</div><div class="line">remoteip 192.168.0.234-238,192.168.0.245</div></pre></td></tr></table></figure></p>
<p>保存退出。</p>
<h2 id="3-2-options-pptpd"><a href="#3-2-options-pptpd" class="headerlink" title="3.2 options.pptpd"></a>3.2 options.pptpd</h2><p>编辑<code>/etc/ppp/options.pptpd</code>，搜索<code>ms-dns</code>，改为下面的字段：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ms-dns 8.8.8.8</div><div class="line">ms-dns 8.8.4.4</div></pre></td></tr></table></figure></p>
<h2 id="3-3-chap-secrets"><a href="#3-3-chap-secrets" class="headerlink" title="3.3 chap-secrets"></a>3.3 chap-secrets</h2><p>编辑<code>/etc/ppp/chap-secrets</code>，添加一行，格式是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">用户名   pptpd    密码    *</div></pre></td></tr></table></figure></p>
<p>如，添加用户<code>ljgabc</code>，密码<code>123456</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ljgabc   pptpd    123456    *</div></pre></td></tr></table></figure></p>
<h1 id="4-内核参数"><a href="#4-内核参数" class="headerlink" title="4 内核参数"></a>4 内核参数</h1><p>编辑<code>/etc/sysctl.conf</code>，在末尾添加一行，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.ipv4.ip_forward = 1</div></pre></td></tr></table></figure></p>
<p>打开IP转发功能。</p>
<p>之后运行以下命令使之立即生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sysctl -p</div></pre></td></tr></table></figure></p>
<h1 id="5-设置防火墙规则"><a href="#5-设置防火墙规则" class="headerlink" title="5 设置防火墙规则"></a>5 设置防火墙规则</h1><p>打开命令行，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --permanent --new-service=pptp</div><div class="line">cat &gt;/etc/firewalld/services/pptp.xml&lt;&lt;EOF</div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;service&gt;</div><div class="line">  &lt;port protocol=&quot;tcp&quot; port=&quot;1723&quot;/&gt;</div><div class="line">&lt;/service&gt;</div><div class="line">EOF</div><div class="line">firewall-cmd --permanent --zone=public --add-service=pptp</div><div class="line">firewall-cmd --permanent --zone=public --add-masquerade</div><div class="line">firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -p gre -j ACCEPT</div><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure></p>
<h1 id="6-启动服务"><a href="#6-启动服务" class="headerlink" title="6 启动服务"></a>6 启动服务</h1><p>现在可以启动PPTP服务，应该可以连上了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl start pptpd</div><div class="line">systemctl enable pptpd.service</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PPTP是做什么用的就不介绍了，不懂的可以百毒一下，下面介绍在VPS上安装PPTP服务器的步骤，系统环境是Centos 7。&lt;/p&gt;
&lt;h1 id=&quot;1-检查VPS是否支持&quot;&gt;&lt;a href=&quot;#1-检查VPS是否支持&quot; class=&quot;headerlink&quot; title=&quot;
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="http://ljgabc.com/tags/Centos/"/>
    
      <category term="PPTP" scheme="http://ljgabc.com/tags/PPTP/"/>
    
  </entry>
  
  <entry>
    <title>虎门大桥</title>
    <link href="http://ljgabc.com/2016/07/02/2016-07-02-%E8%99%8E%E9%97%A8%E5%A4%A7%E6%A1%A5/"/>
    <id>http://ljgabc.com/2016/07/02/2016-07-02-虎门大桥/</id>
    <published>2016-07-02T15:56:15.000Z</published>
    <updated>2016-11-20T14:29:41.209Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-07-02/1.jpg" alt="1"></p>
<p><img src="/images/2016-07-02/2.jpg" alt="2"></p>
<p><img src="/images/2016-07-02/3.jpg" alt="3"></p>
<p><img src="/images/2016-07-02/4.jpg" alt="4"></p>
<p><img src="/images/2016-07-02/5.jpg" alt="5"></p>
<p><img src="/images/2016-07-02/6.jpg" alt="6"></p>
<p><img src="/images/2016-07-02/7.jpg" alt="7"></p>
<p><img src="/images/2016-07-02/8.jpg" alt="8"></p>
<p><img src="/images/2016-07-02/9.jpg" alt="9"></p>
<p><img src="/images/2016-07-02/10.jpg" alt="10"></p>
<p><img src="/images/2016-07-02/11.jpg" alt="11"></p>
<p><img src="/images/2016-07-02/12.jpg" alt="12"></p>
<p><img src="/images/2016-07-02/13.jpg" alt="13"></p>
<p><img src="/images/2016-07-02/14.jpg" alt="14"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-07-02/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-07-02/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-07-02/3.jp
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>PWM控制桥臂死区计算公式</title>
    <link href="http://ljgabc.com/2016/06/18/2016-06-18-PWM%E6%8E%A7%E5%88%B6%E6%A1%A5%E8%87%82%E6%AD%BB%E5%8C%BA%E8%AE%A1%E7%AE%97%E5%85%AC%E5%BC%8F/"/>
    <id>http://ljgabc.com/2016/06/18/2016-06-18-PWM控制桥臂死区计算公式/</id>
    <published>2016-06-18T03:22:07.000Z</published>
    <updated>2016-11-20T14:29:41.209Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-06-18/三相桥.PNG" alt="逆变桥"></p>
<p>如图所示3相逆变桥其中的一个桥臂，由于从控制器发出的信号经过驱动调理最终输出到IGBT控制端的传输时间不确定，同时IGBT的打开和关短时间不确定，所以需要在关闭一个IGBT和打开另一个IGBT之间添加一个延时，这个延时时间即为死区。</p>
<p>死区时间的计算公式如下图所示，其中：</p>
<ul>
<li>Td_off_max  – IGBT最大的关短时间</li>
<li>Td_on_min – IGBT最小的打开时间</li>
<li>Tpdd_max – 驱动信号最大的传输延时时间</li>
<li>Tpdd_min – 驱动信号最小的传输延时时间</li>
<li>1.2 – 安全系数，这个参数不一定精确，需要进行测量确定</li>
</ul>
<p><img src="/images/2016-06-18/死区计算公式.PNG" alt="死区计算公式"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-06-18/三相桥.PNG&quot; alt=&quot;逆变桥&quot;&gt;&lt;/p&gt;
&lt;p&gt;如图所示3相逆变桥其中的一个桥臂，由于从控制器发出的信号经过驱动调理最终输出到IGBT控制端的传输时间不确定，同时IGBT的打开和关短时间不确定，所以需要在关闭一
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>在Centos7上安装ShaodowSocks服务</title>
    <link href="http://ljgabc.com/2016/05/13/2016-05-13-%E5%9C%A8Centos7%E4%B8%8A%E5%AE%89%E8%A3%85ShaodowSocks%E6%9C%8D%E5%8A%A1/"/>
    <id>http://ljgabc.com/2016/05/13/2016-05-13-在Centos7上安装ShaodowSocks服务/</id>
    <published>2016-05-13T12:48:01.000Z</published>
    <updated>2016-11-20T14:29:41.208Z</updated>
    
    <content type="html"><![CDATA[<p>工作中经常用到Google，用时ShadowSocks加ProxySwitch就再方便不过了，以下记录在VPS上安装ShadowSocks服务的过程。</p>
<h1 id="1-安装ShadowSocks"><a href="#1-安装ShadowSocks" class="headerlink" title="1 安装ShadowSocks"></a>1 安装ShadowSocks</h1><p>软件只需要安装ShadowSocks，这是一个Python软件，可以用easy_install或pip进行安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">easy_install shadowsocks</div><div class="line">或者</div><div class="line">pip install shadowsocks</div></pre></td></tr></table></figure></p>
<p>此时会在<code>/usr/bin</code>下安装<code>ssserver</code>，这就就是ShadowSocks的服务器端软件。</p>
<h1 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h1><p>ShadowSocks配置使用Json文件，以下是我的电性配置文件<code>/etc/shadowsocks.json</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">        &quot;server&quot;:&quot;0.0.0.0&quot;,     # 本机IP</div><div class="line">        &quot;server_port&quot;:5689,     # 大于2048小于65536</div><div class="line">        &quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">        &quot;local_port&quot;:1080,</div><div class="line">        &quot;password&quot;:&quot;密码&quot;,      # 设置一个密码</div><div class="line">        &quot;timeout&quot;:300,</div><div class="line">        &quot;method&quot;:&quot;rc4-md5&quot;,     # 加密方法</div><div class="line">        &quot;fast_open&quot;:true,</div><div class="line">        &quot;workers&quot;:1</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="3-自动启动"><a href="#3-自动启动" class="headerlink" title="3 自动启动"></a>3 自动启动</h1><p>创建<code>/etc/systemd/system/shadowsocks-server.service</code>，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Shadowsocks Server</div><div class="line">After=network.target</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=forking</div><div class="line">PIDFile=/run/shadowsocks/server.pid</div><div class="line">PermissionsStartOnly=true</div><div class="line">ExecStartPre=/bin/mkdir -p /run/shadowsocks</div><div class="line">ExecStartPre=/bin/chown root:root /run/shadowsocks</div><div class="line">ExecStart=/usr/bin/ssserver --pid-file /var/run/shadowsocks/server.pid -c /etc/shadowsocks.json -d start</div><div class="line">Restart=on-abort</div><div class="line">User=root</div><div class="line">Group=root</div><div class="line">UMask=0027</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure>
<p>启动服务并添加到自动启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl start shadowsocks-server.service</div><div class="line">systemctl enable shadowsocks-server.service</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中经常用到Google，用时ShadowSocks加ProxySwitch就再方便不过了，以下记录在VPS上安装ShadowSocks服务的过程。&lt;/p&gt;
&lt;h1 id=&quot;1-安装ShadowSocks&quot;&gt;&lt;a href=&quot;#1-安装ShadowSocks&quot; class
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Centos" scheme="http://ljgabc.com/tags/Centos/"/>
    
      <category term="ShadowSocks" scheme="http://ljgabc.com/tags/ShadowSocks/"/>
    
  </entry>
  
  <entry>
    <title>树莓派之MQTT</title>
    <link href="http://ljgabc.com/2016/04/29/2016-04-29-%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8BMQTT/"/>
    <id>http://ljgabc.com/2016/04/29/2016-04-29-树莓派之MQTT/</id>
    <published>2016-04-29T10:28:34.000Z</published>
    <updated>2016-11-20T14:29:41.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h1><blockquote>
<p>MQTT是一项异步消息传输协议，是IBM在分析了他们的客户在其业务中消息传递的情况（包括通过它传递数据）之后专门为物联网所定制的重要的轻量级消息传输协议。</p>
<p>MQTT是轻量级基于代理的发布/订阅的消息传输协议，设计思想是开放、简单、轻量、易于实现。这些特点使它适用于受限环境。</p>
</blockquote>
<p>MQTT协议的特点：</p>
<ul>
<li>使用发布/订阅消息模式，提供一对多的消息发布，解除应用程序耦合。</li>
<li>对负载内容屏蔽的消息传输。</li>
<li>使用 TCP/IP 提供网络连接。</li>
<li>有三种消息发布服务质量：<ul>
<li>“至多一次”，消息发布完全依赖底层 TCP/IP 网络。会发生消息丢失或重复。这一级别可用于如下情况，环境传感器数据，丢失一次读记录无所谓，因为不久后还会有第二次发送。</li>
<li>“至少一次”，确保消息到达，但消息重复可能会发生。</li>
<li>“只有一次”，确保消息到达一次。这一级别可用于如下情况，在计费系统中，消息重复或丢失会导致不正确的结果。</li>
</ul>
</li>
<li>小型传输，开销很小（固定长度的头部是 2 字节），协议交换最小化，以降低网络流量。</li>
<li>使用 Last Will 和 Testament 特性通知有关各方客户端异常中断的机制。</li>
</ul>
<p>由于协议开销很小，且能很好的适应各种复杂网络，特别是受限网络，MQTT还经常被用来实现推送服务。设备使用长连接去建立一个客户端到服务器的双向数据通道，只要在连接建立后，一旦一方有数据更新，就可以马上通过双向的数据通道向对方发送数据，平时在没有数据时，通过一些心跳等机制维持通道连接。</p>
<p>本文描述了如何使用MQTT协议控制树莓派的LED。框图如下：</p>
<p><img src="/images/2016-04-29/MQTT.PNG" alt="框图"></p>
<h1 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2 步骤"></a>2 步骤</h1><h1 id="2-1-准备条件"><a href="#2-1-准备条件" class="headerlink" title="2.1 准备条件"></a>2.1 准备条件</h1><ul>
<li>服务器一台，要求有独立IP地址或域名(能够在公网访问)；</li>
<li>树莓派一台</li>
<li>Android手机（目前只实现了Android APP）</li>
<li>Widnows开发机器，预装Python</li>
</ul>
<h1 id="2-2-服务器配置"><a href="#2-2-服务器配置" class="headerlink" title="2.2 服务器配置"></a>2.2 服务器配置</h1><p>服务器需要安装MQTT服务器。目前网络上有很多MQTT服务器实现，我选用的是mosquitto。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mosquitto</div></pre></td></tr></table></figure>
<p>一般需要使用tls加密mqtt传输内容，已避免信息泄漏。由于条件有限，我使用了用户名/密码验证的方式，这种方式只实现了初步防御，并不是特别安全。</p>
<p>编辑<code>/etc/mosquitto/mosquitto.conf</code>，添加以下配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 不允许匿名访问</div><div class="line">allow_anonymous false</div><div class="line"></div><div class="line"># 密码文件存放路径</div><div class="line">password_file /etc/mosquitto/passwd</div></pre></td></tr></table></figure>
<p>然后生成密码，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mosquitto_passwd -c /etc/mosquitto/passwd ljgabc</div><div class="line"># 输入密码</div></pre></td></tr></table></figure></p>
<p>之后重启服务,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart mosquitto.service</div></pre></td></tr></table></figure></p>
<h1 id="2-3-树莓派配置"><a href="#2-3-树莓派配置" class="headerlink" title="2.3 树莓派配置"></a>2.3 树莓派配置</h1><p>安装MQTT客户端工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install paho-mqtt</div></pre></td></tr></table></figure></p>
<p>客户端实现，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">#! /usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line"># 引入RPi.GPIO库</div><div class="line">import RPi.GPIO as GPIO</div><div class="line"></div><div class="line"># 引入MQTT客户端</div><div class="line">import paho.mqtt.client as mqtt</div><div class="line"></div><div class="line">LED_PIN = 40</div><div class="line"></div><div class="line">def init():</div><div class="line">    GPIO.setmode(GPIO.BOARD)    # 使用`BOARD`编码</div><div class="line">    GPIO.setup(LED_PIN, GPIO.OUT, initial=GPIO.LOW)  # 使能LED_PIN作为输出接口，默认输出低电平</div><div class="line"></div><div class="line">    client = mqtt.Client()</div><div class="line">    client.on_connect = on_connect</div><div class="line">    client.on_message = on_message</div><div class="line">    client.username_pw_set(&apos;ljgabc&apos;, &apos;ljgabc&apos;)</div><div class="line">    return client</div><div class="line"></div><div class="line"># 设备连接上MQTT服务器时的回调函数</div><div class="line">def on_connect(client, userdata, flags, rc):</div><div class="line">    print(&quot;Connected with result code &quot;+str(rc))</div><div class="line">    # 订阅TOPIC</div><div class="line">    client.subscribe(&quot;ljgabc/led&quot;)</div><div class="line"></div><div class="line"># 收到订阅消息时的回调函数</div><div class="line">def on_message(client, userdata, msg):</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    收到0时，关闭LED；收到1时打开LED；收到其他消息，不响应。</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    print(msg.topic+&quot; &quot;+str(msg.payload))</div><div class="line">    try:</div><div class="line">        new_state = ord(msg.payload)</div><div class="line">        if new_state == 0 :</div><div class="line">            GPIO.OUTPUT(LED_PIN, GPIO.LOW)</div><div class="line">        else if new_state == 1:</div><div class="line">            GPIO.OUTPUT(LED_PIN, GPIO.HIGH)</div><div class="line">        else:</div><div class="line">            print(&apos;unknown msg&apos;)</div><div class="line">    except TypeError:</div><div class="line">        print(&apos;unknown msg&apos;)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    client = init()</div><div class="line">    client.connect(&quot;xxx.xxx.xxx.xxx&quot;)</div><div class="line">    client.loop_forever()</div></pre></td></tr></table></figure></p>
<h1 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h1><p>在通过python测试</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">import paho.mqtt.client as mqtt</div><div class="line">client = mqtt.Client()</div><div class="line">client.username_pw_set(&apos;ljgabc&apos;, &apos;ljgabc&apos;)</div><div class="line">client.connect(&quot;xxx.xxx.xxx.xxx&quot;)</div><div class="line"></div><div class="line"># 关闭LED</div><div class="line">client.publish(&apos;ljgabc/led&apos;, 0)</div><div class="line"></div><div class="line"># 打开LED</div><div class="line">client.publish(&apos;ljgabc/led&apos;, 0)</div></pre></td></tr></table></figure>
<p>可以看到树莓派已经能够正常的打开和关闭LED</p>
<h1 id="2-5-Android-APP"><a href="#2-5-Android-APP" class="headerlink" title="2.5 Android APP"></a>2.5 Android APP</h1><p>android程序见<a href="github.com">github</a></p>
<h1 id="2-6-WebChat"><a href="#2-6-WebChat" class="headerlink" title="2.6 WebChat"></a>2.6 WebChat</h1><p>待续。。。</p>
<h1 id="2-7-WebPage"><a href="#2-7-WebPage" class="headerlink" title="2.7 WebPage"></a>2.7 WebPage</h1><p>待续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1 介绍&quot;&gt;&lt;/a&gt;1 介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;MQTT是一项异步消息传输协议，是IBM在分析了他们的客户在其业务中消息传递的情况（包括通过它传递
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="树莓派" scheme="http://ljgabc.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="MQTT" scheme="http://ljgabc.com/tags/MQTT/"/>
    
  </entry>
  
  <entry>
    <title>nginx+flask+uwsgi配置</title>
    <link href="http://ljgabc.com/2016/04/29/2016-04-29-nginx-flask-uwsgi%E9%85%8D%E7%BD%AE/"/>
    <id>http://ljgabc.com/2016/04/29/2016-04-29-nginx-flask-uwsgi配置/</id>
    <published>2016-04-29T10:03:11.000Z</published>
    <updated>2016-11-20T14:29:41.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Nginx"><a href="#1-Nginx" class="headerlink" title="1 Nginx"></a>1 Nginx</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx</div></pre></td></tr></table></figure>
<p>修改<code>/etc/nginx/flask.conf</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listion 80;</div><div class="line">    server_name domain_name;</div><div class="line">    localtion / &#123;</div><div class="line">        include uwsgi_params;</div><div class="line">        uwsgi_pass 127.0.0.1:8889;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>启动<code>nginx</code>服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl enable nginx.service</div><div class="line">systemctl start nginx.service</div></pre></td></tr></table></figure></p>
<h1 id="2-uWSGI"><a href="#2-uWSGI" class="headerlink" title="2 uWSGI"></a>2 uWSGI</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install uwsgi uwsgi-plugin-python</div></pre></td></tr></table></figure>
<p>编辑<code>/etc/uwsgi.ini</code>，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line">uid = uwsgi</div><div class="line">gid = uwsgi</div><div class="line">pidfile = /run/uwsgi/uwsgi.pid</div><div class="line">emperor = /etc/uwsgi.d</div><div class="line">stats = /run/uwsgi/stats.sock</div><div class="line">emperor-tyrant = true</div><div class="line">cap = setgid,setuid</div></pre></td></tr></table></figure></p>
<p>编辑<code>/etc/uwsgi.d/flask.ini</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line">uid = nginx</div><div class="line">gid = nginx</div><div class="line"></div><div class="line">disable-logging = true</div><div class="line"></div><div class="line">socket = 127.0.0.1:8888</div><div class="line"></div><div class="line">single-interpreter = true</div><div class="line">master = true</div><div class="line">plugin = python</div><div class="line"></div><div class="line">app = hello</div><div class="line">module = hello</div><div class="line">callable = app</div><div class="line"></div><div class="line">virtualenv = /var/www/flask-ve</div><div class="line">pythonpath = /var/www/flask</div><div class="line">chdir = /var/www/flask</div></pre></td></tr></table></figure></p>
<p>启动<code>uWSGI</code>服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl enable uwsgi.service</div><div class="line">systemctl start uwsgi.service</div></pre></td></tr></table></figure></p>
<h1 id="3-Flask"><a href="#3-Flask" class="headerlink" title="3 Flask"></a>3 Flask</h1><p>创建<code>virtualenv</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /var/www</div><div class="line">virtualenv flask-ve</div><div class="line">source flask-ve/bin/activate</div><div class="line">pip install flask</div></pre></td></tr></table></figure></p>
<p>创建<code>app</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">cd /var/www</div><div class="line">mkdir flask</div><div class="line">cd flask</div><div class="line">echo &gt;&gt; hello.py &lt;&lt; EOF</div><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">from flask import Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&apos;/&apos;):</div><div class="line">    return &apos;Hello World!&apos;</div></pre></td></tr></table></figure></p>
<p>完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-Nginx&quot;&gt;&lt;a href=&quot;#1-Nginx&quot; class=&quot;headerlink&quot; title=&quot;1 Nginx&quot;&gt;&lt;/a&gt;1 Nginx&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Flask" scheme="http://ljgabc.com/tags/Flask/"/>
    
      <category term="Nginx" scheme="http://ljgabc.com/tags/Nginx/"/>
    
      <category term="uwsgi" scheme="http://ljgabc.com/tags/uwsgi/"/>
    
  </entry>
  
  <entry>
    <title>LVM磁盘扩容一例</title>
    <link href="http://ljgabc.com/2016/04/26/2016-04-26-LVM%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9%E4%B8%80%E4%BE%8B/"/>
    <id>http://ljgabc.com/2016/04/26/2016-04-26-LVM磁盘扩容一例/</id>
    <published>2016-04-26T07:03:24.000Z</published>
    <updated>2016-11-20T14:29:41.208Z</updated>
    
    <content type="html"><![CDATA[<p>先前用VirtualBox给Debian只分配了20G的硬盘容量，今天编译QT的时候磁盘容量不足，需要将根分区扩容。</p>
<h1 id="1-准备磁盘"><a href="#1-准备磁盘" class="headerlink" title="1 准备磁盘"></a>1 准备磁盘</h1><p>首先，用VboxManager给修改磁盘容量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 修改磁盘容量上限为100G</div><div class="line">D:\VirtualBox\VBoxManage.exe modifyhd &quot;E:\VirtualMachines\Debian\Debian.vdi&quot; --resize 102400</div></pre></td></tr></table></figure></p>
<p>启动Debian虚拟机，使用cfdisk工具，可以看到磁盘容量已经由20G变为100G，多出来的容量成为自由空间（未分配）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cfdisk /dev/sda</div></pre></td></tr></table></figure></p>
<p>在自由空间上新建分区，保存。此时的磁盘分区情况如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/dev/sda1   100M  /boot分区</div><div class="line">/dev/sda2   20G   分给debianvbox-vg</div><div class="line">/dev/sda3   80G</div></pre></td></tr></table></figure></p>
<h1 id="2-扩容"><a href="#2-扩容" class="headerlink" title="2 扩容"></a>2 扩容</h1><p>首先查看一下现有的PV<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># pvdisplay</div><div class="line"></div><div class="line">--- Physical volume ---</div><div class="line"> PV Name    /dev/sda2</div><div class="line"> VG Name    debianvbox-vg</div><div class="line"> PV Size    19.8Gib</div><div class="line"> ....</div></pre></td></tr></table></figure></p>
<p>查看VG<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># vgdisplay</div><div class="line">--- Volume group ---</div><div class="line"> VG Name    debianvbox-vg</div><div class="line"> ...</div><div class="line"> VG Size    19.8Gib</div><div class="line"> ...</div></pre></td></tr></table></figure></p>
<p>将/dev/sd3加入VG<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vgextend debianvbox-vg /dev/sda3</div></pre></td></tr></table></figure></p>
<p>确认PV和VG<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># pvdisplay</div><div class="line">--- Physical volume ---</div><div class="line"> PV Name    /dev/sda2</div><div class="line"> VG Name    debianvbox-vg</div><div class="line"> PV Size    19.8Gib</div><div class="line"> ....</div><div class="line"></div><div class="line">--- Physical volume ---</div><div class="line"> PV Name    /dev/sda3</div><div class="line"> VG Name    debianvbox-vg</div><div class="line"> PV Size    80Gib</div><div class="line"> ....</div></pre></td></tr></table></figure></p>
<p>查看LV<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># lvdisplay</div><div class="line">--- Ligical volume ---</div><div class="line"> LV PATH    /dev/debianvbox-vg/root</div><div class="line"> LV Name    root</div><div class="line"> VG Name    debianvbox-vg</div><div class="line"> ...</div><div class="line"> LV Size    19.8G</div><div class="line"> ...</div><div class="line"></div><div class="line">--- Ligical volume ---</div><div class="line"> LV PATH    /dev/debianvbox-vg/swap</div><div class="line"> LV Name    swap</div><div class="line"> VG Name    debianvbox-vg</div><div class="line"> ...</div><div class="line"> LV Size    1.0G</div><div class="line"> ...</div></pre></td></tr></table></figure></p>
<p>扩容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lvresize -L 80G /dev/debianvbox-vg/root</div></pre></td></tr></table></figure></p>
<p>修改磁盘容量大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">resize2fs /dev/debianvobx-vg/root</div></pre></td></tr></table></figure></p>
<p>完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先前用VirtualBox给Debian只分配了20G的硬盘容量，今天编译QT的时候磁盘容量不足，需要将根分区扩容。&lt;/p&gt;
&lt;h1 id=&quot;1-准备磁盘&quot;&gt;&lt;a href=&quot;#1-准备磁盘&quot; class=&quot;headerlink&quot; title=&quot;1 准备磁盘&quot;&gt;&lt;/a&gt;1 
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="LVM" scheme="http://ljgabc.com/tags/LVM/"/>
    
  </entry>
  
  <entry>
    <title>蓝牙入门概念</title>
    <link href="http://ljgabc.com/2016/03/12/2016-03-12-%E8%93%9D%E7%89%99%E5%85%A5%E9%97%A8%E6%A6%82%E5%BF%B5/"/>
    <id>http://ljgabc.com/2016/03/12/2016-03-12-蓝牙入门概念/</id>
    <published>2016-03-12T10:00:27.000Z</published>
    <updated>2016-11-20T14:29:41.208Z</updated>
    
    <content type="html"><![CDATA[<p>低功耗蓝牙(BLE)协议是一个多层协议，官方的介绍比较复杂，这里只挑两个必须掌握的介绍一下，GAP和GATT。</p>
<p><img src="/images/2016-04-14/19-42-54.jpg" alt="Image"></p>
<h1 id="1-GAP"><a href="#1-GAP" class="headerlink" title="1 GAP"></a>1 GAP</h1><p>GAP全称是通用访问规范(Generic Access Profile)，通过名字就可以猜到这个是管理底层连接的。</p>
<p>GAP中规定了以下几个术语：</p>
<h2 id="1-1-角色"><a href="#1-1-角色" class="headerlink" title="1.1 角色"></a>1.1 角色</h2><p>BLE可以看做是一个主从式结构，一个主机（集中器），一个设备。比如，蓝牙手环应用，手机是主机（集中器），蓝牙手环是设备。</p>
<p>现在的手机一般都支持两种模式，既可以当主机，又可以当设备。但在某个确定的场景中，只能是一种身份。</p>
<p>Nordic提供的协议栈中（底层库），S110是只支持设备模式，S120只支持主机模式，S130两者都支持。</p>
<h2 id="1-2-广播"><a href="#1-2-广播" class="headerlink" title="1.2 广播"></a>1.2 广播</h2><p>广播是<code>设备</code>发起的活动。</p>
<p>设备想要被主机搜扫到，必须发起广播。有一些参数用来设置广播的信息（如设备名等）、间隔等信息。 设备在广播时，所有可见范围内的主机都可以接收到广播信息，从而发现设备。</p>
<p>主机接收到广播后，相当于建立起的初步联系，此时两者可以沟通以获取更多的信息，这个过程叫扫描回应。</p>
<h2 id="1-3-扫描"><a href="#1-3-扫描" class="headerlink" title="1.3 扫描"></a>1.3 扫描</h2><p>扫描是<code>主机</code>发起的活动。扫描其实就是主机让自己出去接收广播的状态，从而发现设备。</p>
<p>扫描一般不会一直持续下去，一般在手机上系统扫描一段时间就会自动停止。当选定某一个设备连接时也自动停止扫描。</p>
<h2 id="1-4-连接"><a href="#1-4-连接" class="headerlink" title="1.4 连接"></a>1.4 连接</h2><p>主机想要连接到一个设备时，发起一个连接请求。</p>
<p>之后两者根据协议建立连接，都是底层的一些协议规定，就不细讲了。</p>
<h1 id="2-GATT"><a href="#2-GATT" class="headerlink" title="2 GATT"></a>2 GATT</h1><p>GATT全称是通用属性配置文件(Generic Attribute Profile)，是用来描述设备或主机的各种属性的。而属性就是各种可以读写的信息，主机和设备之间就靠读写这些属性来沟通。</p>
<p>比如，一个蓝牙设备可以用一个可读写的特性（特性与属性的区别见下文）来表征一个LED的开关。当手机和蓝牙设备建立连接后可以向这个特性写入0或者1。蓝牙设备就可以通过特性的值来打开或关闭LED。</p>
<p><img src="/images/2016-04-14/19-43-35.jpg" alt="Image"></p>
<p>GATT中规定了以下几个术语：</p>
<h2 id="2-1-角色"><a href="#2-1-角色" class="headerlink" title="2.1 角色"></a>2.1 角色</h2><p>GATT中也分为两个角色，GATT服务器和GATT客户端。</p>
<p>提供属性的设备称为GATT服务器，访问GATT服务器而获得属性的设备称为GATT客户端。</p>
<p>比如之前的例子，手机通过访问蓝牙设备的属性来控制LED，所以蓝牙设备就是GATT服务器，手机就是GATT客户端。</p>
<h2 id="2-2-属性"><a href="#2-2-属性" class="headerlink" title="2.2 属性"></a>2.2 属性</h2><p>属性是GATT服务器中最基本的单元。GATT服务器将其所有的属性组成一个属性表。</p>
<p>一个属性包含句柄、UUID、值：</p>
<ul>
<li>句柄是属性在GATT表中的索引。我们一般用不到</li>
<li>UUID是属性的ID，包含了属性值的类型等信息</li>
<li>可能有多个属性拥有同一个UUID</li>
</ul>
<h2 id="2-3-特性"><a href="#2-3-特性" class="headerlink" title="2.3 特性"></a>2.3 特性</h2><p>一个特性至少包含2个属性：一个属性用于声明(又叫描述符)，一个属性用于存放特性的值。</p>
<p>存放特性值的属性就是真正传输的数据，声明属性用来确定该特性是否可读写、是否可以发起通知（类似于向主机发起中断）等信息。</p>
<p>比如，LED状态就是一个特性，该特性可读写。</p>
<h2 id="2-4-描述符"><a href="#2-4-描述符" class="headerlink" title="2.4 描述符"></a>2.4 描述符</h2><p>描述符就是用于声明的属性。 有一个特别的描述符值得特别地提起：客户端特性配置描述符(Client Characteristic Configuration Descriptor，CCCD)，这个描述符是给任何支持通知或指示功能的特性额外增加的。在CCCD中写入“1”使能通知功能，写入“2”使能指示功能，写入“0”同时禁止通知和指示功能。</p>
<p>在S110协议栈中，对任何使能了通知功能或是指示功能的特性，协议栈将自动加入这个类型的描述符。</p>
<h2 id="2-5-服务"><a href="#2-5-服务" class="headerlink" title="2.5 服务"></a>2.5 服务</h2><p>一个服务包含一个或多个特性，这些特性是逻辑上相关的集合体。</p>
<p>GATT服务一般包含几块具有相关的功能，比如特定传感器的读取和设置，人机接口的输入输出。组织具有相关的特性到服务中既实用又有效，因为它使得逻辑上和用户数据上的边界变得更加清晰，同时它也有助于不同应用程序间代码的重用。</p>
<h2 id="2-6-数据配置文件"><a href="#2-6-数据配置文件" class="headerlink" title="2.6 数据配置文件"></a>2.6 数据配置文件</h2><p>一个profile文件可以包含一个或者多个服务，一个profile文件包含需要的服务的信息或者为对等设备如何交互的配置文件的选项信息。</p>
<p>其实就是层层封装，目的是为应用提供方便，也更好的重用。</p>
<h1 id="3-其他"><a href="#3-其他" class="headerlink" title="3 其他"></a>3 其他</h1><h2 id="3-1-标准服务、定制服务"><a href="#3-1-标准服务、定制服务" class="headerlink" title="3.1 标准服务、定制服务"></a>3.1 标准服务、定制服务</h2><p>标准服务就是蓝牙技术联盟（SIG）事先定义好的一些服务。<br>定制服务就是你自己开发的服务。</p>
<h2 id="3-2-UUID"><a href="#3-2-UUID" class="headerlink" title="3.2 UUID"></a>3.2 UUID</h2><p>UUID有128bit, 如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0x00001234-0000-1000-8000-00805F9B34FB</div></pre></td></tr></table></figure></p>
<p>一般使用的时候，会先生成一个基本UUID，比如<code>0x0000xxxx-0000-1000-8000-00805F9B34FB</code>，然后根据需要定义16bit的<code>xxxx</code>，生成完成的UUID。</p>
<p>目的可能是为了更好的区分，比如一个公司使用相同的基本UUID，然后通过不同的<code>xxxx</code>来区分不同的服务、特性等。</p>
<h2 id="3-3-操作类型-性质"><a href="#3-3-操作类型-性质" class="headerlink" title="3.3 操作类型(性质)"></a>3.3 操作类型(性质)</h2><p>特性的操作类型有：</p>
<ul>
<li>写</li>
<li>没有回应的写</li>
<li>读</li>
<li>通知</li>
<li>指示（有回应的通知）</li>
</ul>
<p>通过字面意思就可以理解，比如LED特性，需要写和读性质。如果设备有事件需要上报，比如按键等，就需要通知或者指示性质。通知就是上报完就没事了，指示的话还需要主机给个响应。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;低功耗蓝牙(BLE)协议是一个多层协议，官方的介绍比较复杂，这里只挑两个必须掌握的介绍一下，GAP和GATT。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-04-14/19-42-54.jpg&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-GAP&quot;
    
    </summary>
    
      <category term="硬件" scheme="http://ljgabc.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="蓝牙" scheme="http://ljgabc.com/tags/%E8%93%9D%E7%89%99/"/>
    
  </entry>
  
  <entry>
    <title>简单的开机浪涌抑制电路</title>
    <link href="http://ljgabc.com/2016/02/29/2016-02-29-%E7%AE%80%E5%8D%95%E7%9A%84%E5%BC%80%E6%9C%BA%E6%B5%AA%E6%B6%8C%E6%8A%91%E5%88%B6%E7%94%B5%E8%B7%AF/"/>
    <id>http://ljgabc.com/2016/02/29/2016-02-29-简单的开机浪涌抑制电路/</id>
    <published>2016-02-29T09:19:28.000Z</published>
    <updated>2016-11-20T14:29:41.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-浪涌电路"><a href="#1-浪涌电路" class="headerlink" title="1 浪涌电路"></a>1 浪涌电路</h2><p><strong>浪涌电流</strong>是指远远超出正常工作电流的瞬间电流。对于一般的电路，开机瞬间，各个元件尚未进入正常的工作状态，所有电容都开始充电，造成的结果就是开机瞬间的工作电流远远大于正常工作电流，甚至达到5~10倍以上。</p>
<p>浪涌电流会造成输入电源电压波形塌陷，使得供电质量变差，甚至会影响其他用电设备的工作以及使保护电路动作。例如在若干次浪涌电流冲击下，使得输入保险丝发生过载熔断，为避免这类现象发生，不得不选用更高额定电流的保险丝。这样的后果是正常工作时，主电路发生过载时，保险丝不能即使熔断，起不到保护作用，造成主电路器件不可恢复性的损坏。同时，过大的浪涌电流还会影响接插件的触电可靠性，产生很高的di/dt和dv/dt等，因此必须对浪涌电流加以抑制。</p>
<h2 id="2-抑制方法"><a href="#2-抑制方法" class="headerlink" title="2 抑制方法"></a>2 抑制方法</h2><h3 id="2-1-使用热敏电阻"><a href="#2-1-使用热敏电阻" class="headerlink" title="2.1 使用热敏电阻"></a>2.1 使用热敏电阻</h3><p>抑制浪涌电流就是在开机瞬间，使电流缓慢上升，类似于电源中的延时启动电路。一种简单的方法就是在环路中串入一个热敏电阻。热敏电阻在未工作时电阻值较大，所以在刚刚开机时可以抑制冲击电流；正常工作后，热敏电阻因电流产生的热，使电阻值下降，所以不会影响电路的正常运行。</p>
<p>由于热敏电路在正常工作后仍然有一定的阻抗，造成电源供电能力下降，也白白浪费了能量。而且当工作电流较大时，热敏电阻上的功率也会很大。</p>
<h3 id="2-2-使用MOSFET"><a href="#2-2-使用MOSFET" class="headerlink" title="2.2 使用MOSFET"></a>2.2 使用MOSFET</h3><p>在电路回路中串联一个MOSFET，在开机时，使MOSFET缓慢导通，等效电阻缓慢减小，从而使电路电流缓慢上升。当电路正常工作时，MOSFET的等效电路只有几个毫欧，所以产生的压降和功耗可以忽略不计。具体电路如下所示：</p>
<p><img src="/images/2016-02-29/17-34-05.jpg" alt="Image"></p>
<p>使MOSFET缓慢导通的方法是使用RC电路，由于电容电压不能突变，所以开机瞬间，P沟道MOSGET栅级电压等于源级电压，VGS=0，MOSFET截止。电源通过R405给电容充电，栅级电压缓慢下降，VGS缓慢增大，MOSFET缓慢导通，使得整个回路电流缓慢增大，不至于产生浪涌电流。</p>
<p>通过调节RC的充电时间，可以调节MOSFET栅级电压的曲线，从而实现调节电路电流上升曲线的斜率。</p>
<p>使用两个电容的作用是，当任何一个电容被击穿后，剩下的一个电容和电阻仍然能够起到抑制浪涌电流的作用，不至于烧坏保险丝或电源。</p>
<p>二极管的作用是，电源关短瞬间，电容上端电压为0，下端电压为-VCC，此时，电容可以通过二极管迅速放电。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-浪涌电路&quot;&gt;&lt;a href=&quot;#1-浪涌电路&quot; class=&quot;headerlink&quot; title=&quot;1 浪涌电路&quot;&gt;&lt;/a&gt;1 浪涌电路&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;浪涌电流&lt;/strong&gt;是指远远超出正常工作电流的瞬间电流。对于一般的电路，开机瞬间，各个
    
    </summary>
    
      <category term="硬件" scheme="http://ljgabc.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="浪涌" scheme="http://ljgabc.com/tags/%E6%B5%AA%E6%B6%8C/"/>
    
  </entry>
  
  <entry>
    <title>电工的工作台</title>
    <link href="http://ljgabc.com/2016/02/25/2016-02-25-%E7%94%B5%E5%B7%A5%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8F%B0/"/>
    <id>http://ljgabc.com/2016/02/25/2016-02-25-电工的工作台/</id>
    <published>2016-02-25T12:25:29.000Z</published>
    <updated>2016-11-20T14:29:41.208Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2016-02-25/20-25-34.jpg" alt="Image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2016-02-25/20-25-34.jpg&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>DraftSight画2D螺旋线</title>
    <link href="http://ljgabc.com/2016/02/24/2016-02-24-DraftSight%E7%94%BB2D%E8%9E%BA%E6%97%8B%E7%BA%BF/"/>
    <id>http://ljgabc.com/2016/02/24/2016-02-24-DraftSight画2D螺旋线/</id>
    <published>2016-02-24T06:26:30.000Z</published>
    <updated>2016-11-20T14:29:41.208Z</updated>
    
    <content type="html"><![CDATA[<p>DraftSight是3DS公司（达索系统集团）的一套2D制图软件。类似于AutoCAD，但有免费版（Free），所以在做PCB时，经常拿来画一些外框、异形线之类的。跟AutoCAD相比，少了一些专用的命令，比如画2D螺旋线。好在DraftSight可以使用脚本编程，这样，通过样条曲线画多个线段的方法来模拟2D螺旋线。</p>
<p>首先要求出螺旋线上各个点的座标，用Python实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line">import math</div><div class="line"></div><div class="line">START_R = 24    # 起始半径</div><div class="line">END_R = 46       # 终止半径</div><div class="line">PIDTH = 1.2       # 两条线间距</div><div class="line">START_A = 0      # 起始角度</div><div class="line">POINT_PER_CYCLE = 30  # 将360度等分成多少份，份数越多，线段越多，螺旋线越接近理想情况</div><div class="line"></div><div class="line">r = START_R        # 当前半径</div><div class="line">a = START_A       # 当前角度</div><div class="line">i = 0                    # 当前点</div><div class="line"></div><div class="line">print(&quot;spline&quot;)</div><div class="line">while r &lt;= END_R:</div><div class="line">    r = START_R + i * PIDTH / POINT_PER_CYCLE</div><div class="line">    a = START_A + i * (2 * math.pi) / POINT_PER_CYCLE</div><div class="line">    x = r * math.sin(a)</div><div class="line">    y = r * math.cos(a)</div><div class="line">    i = i + 1</div><div class="line">    print(&quot;%r,%r&quot; % (x,y))</div></pre></td></tr></table></figure></p>
<p>将打印结果保存为luoxuan.scr, 在DraftSight-&gt;工具-&gt;运行脚本中，选择luoxuan.scr即可。<br>输出结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">spline</div><div class="line">0.0,24.0</div><div class="line">4.998197047258934,23.514668321640688</div><div class="line">9.794218365265268,21.998174620033826</div><div class="line">14.177380285294452,19.513489904323734</div><div class="line">17.954378983533843,16.166195449630017</div><div class="line">20.957814771583415,12.100000000000003</div><div class="line">23.05360995499452,7.4905719436487255</div><div class="line">24.146991619541676,2.5379510881386262</div><div class="line">24.186772495356408,-2.542132226669329</div><div class="line">23.16773673694994,-7.5276539829737175</div><div class="line">21.1310198523403,-12.199999999999994</div><div class="line">18.162459534667523,-16.35355201941049</div><div class="line">14.388982976119745,-19.804736022298712</div><div class="line">9.973182488218617,-22.400134621396575</div><div class="line">5.106311126484169,-24.023305074022268</div><div class="line">1.3937225688214031e-14,-24.6</div><div class="line">-5.122944061749584,-24.101556882080974</div><div class="line">-10.038260351110749,-22.54630189461939</div><div class="line">-14.530051436669932,-19.9989001009487</div><div class="line">-18.400265878820278,-16.567673813445335</div><div class="line">-21.47743001385407,-12.400000000000011</div><div class="line">-23.624243864771614,-7.675982140273697</div><div class="line">-24.74370475676264,-2.6006681660992372</div><div class="line">-24.783485632577374,2.6048493046299126</div><div class="line">-23.738370646727034,7.713064179598683</div><div class="line">-21.650635094610966,12.500000000000004</div><div class="line">-18.608346429953947,16.755030383225815</div><div class="line">-14.74165412749523,20.290146218923677</div><div class="line">-10.2172244740641,22.94826189598214</div><div class="line">-5.231058140974816,24.61019363446255</div><div class="line">-2.855431604414582e-14,25.2</div><div class="line">.....</div></pre></td></tr></table></figure></p>
<p><img src="/images/2016-02-24/14-56-11.jpg" alt="Image"></p>
<p>导入到PCB中</p>
<p><img src="/images/2016-02-24/14-56-29.jpg" alt="Image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DraftSight是3DS公司（达索系统集团）的一套2D制图软件。类似于AutoCAD，但有免费版（Free），所以在做PCB时，经常拿来画一些外框、异形线之类的。跟AutoCAD相比，少了一些专用的命令，比如画2D螺旋线。好在DraftSight可以使用脚本编程，这样，
    
    </summary>
    
      <category term="硬件" scheme="http://ljgabc.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
      <category term="PCB" scheme="http://ljgabc.com/tags/PCB/"/>
    
      <category term="DraftSight" scheme="http://ljgabc.com/tags/DraftSight/"/>
    
  </entry>
  
  <entry>
    <title>用MOS管防止电源接反烧坏器件</title>
    <link href="http://ljgabc.com/2016/02/22/2016-02-22-%E7%94%A8MOS%E7%AE%A1%E9%98%B2%E6%AD%A2%E7%94%B5%E6%BA%90%E6%8E%A5%E5%8F%8D%E7%83%A7%E5%9D%8F%E5%99%A8%E4%BB%B6/"/>
    <id>http://ljgabc.com/2016/02/22/2016-02-22-用MOS管防止电源接反烧坏器件/</id>
    <published>2016-02-22T07:28:32.000Z</published>
    <updated>2016-11-20T14:29:41.208Z</updated>
    
    <content type="html"><![CDATA[<p>在设计或调试电路板时，如果不小心将输入电源接反，轻则烧坏电路、芯片，重则将电源都烧坏。所以，我们就需要在电路中加入保护电路，即使电源接反，也不会烧坏电路或电源。</p>
<p>简单的防止电源反接的方法就是在电源的输入端串入一个二极管。电源正接时，二极管正向导通；反接时，二极管截至，电路中无电流。不过，由于二极管有压降，会给电路造成不必要的损耗。当电路中电流较大时，二极管的功耗也非常可观。<br><img src="/images/2016-02-22/15-44-40.jpg" alt="Image"></p>
<p>由于MOS管在导通时的内阻可以做到非常小（毫欧级别），所以如果用MOS管替换二极管，可以把压降做到非常小，小到几乎可以忽略不计。起的效果与开关电源中的适用MOS管替代整流二极管类似。</p>
<p><strong>NMOS 管防止电源反接电路</strong>:<br><img src="/images/2016-02-22/15-39-38.jpg" alt="Image"></p>
<p>如图所示，电源正确连接时：刚上电时，NMOS管的寄生二极管导通，所以S的电位大概就是0.6V，<br>而G极的电位，是VIN，VIN-0.6V大于UGS的阀值开启电压，MOS管导通，由于内阻很小，所以就把寄生二极管短路了，压降几乎为 0。此时VGS约为VIN，NMOS管继续导通。</p>
<p>电源反接时，寄生二极管反向截至，VGS=0，NMOS管也截至，所以电路中无电流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在设计或调试电路板时，如果不小心将输入电源接反，轻则烧坏电路、芯片，重则将电源都烧坏。所以，我们就需要在电路中加入保护电路，即使电源接反，也不会烧坏电路或电源。&lt;/p&gt;
&lt;p&gt;简单的防止电源反接的方法就是在电源的输入端串入一个二极管。电源正接时，二极管正向导通；反接时，二极
    
    </summary>
    
      <category term="硬件" scheme="http://ljgabc.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>电容的一些注意事项</title>
    <link href="http://ljgabc.com/2016/01/19/2016-01-19-%E7%94%B5%E5%AE%B9%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://ljgabc.com/2016/01/19/2016-01-19-电容的一些注意事项/</id>
    <published>2016-01-19T02:02:33.000Z</published>
    <updated>2016-11-20T14:29:41.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-电容分类"><a href="#1-电容分类" class="headerlink" title="1 电容分类"></a>1 电容分类</h1><p>电容器有着各式各样的种类，以生产材料可划分为陶瓷电容器、钽电解电容器、铝电解电容器等。特别是多层陶瓷电容器，体积虽小但容量大，经常被用于去藕、电源电压的平滑化、滤波等各种电路中。<br><img src="/images/2016-02-19/10-10-39.jpg" alt="Image"></p>
<h1 id="2-电容的等效电路"><a href="#2-电容的等效电路" class="headerlink" title="2 电容的等效电路"></a>2 电容的等效电路</h1><p>实际的电容元件不可能是理想的，存在着寄生电感和损耗，当电容运用于高频电路时，就不得不考虑这些寄生电感、损耗对电路的影响。<br>在交流下电容元件总有一定介质损耗，此外其引线也有一定电阻和分布电感。因此，实际电容元件的等效电路如下图所示（简易模型）。<br><img src="/images/2016-03-01/16-34-19.jpg" alt="Image"></p>
<p>电阻RP代表绝缘电阻或泄漏，与标称电容C并联。第二个电阻RS(等效串联电阻或ESR)与电容串联，代表电容引脚和电容板的电阻。</p>
<p>电感L(等效串联电感或ESL)代表引脚和电容板的电感。最后，电阻RDA和电容CDA一起构成称为电介质吸收或DA现象的简化模型。在采样保持放大器(SHA)之类精密应用中使用电容时，DA可造成误差。但在去耦应用中，电容的DA一般不重要。</p>
<h1 id="3-电容的阻抗-频率特性"><a href="#3-电容的阻抗-频率特性" class="headerlink" title="3 电容的阻抗-频率特性"></a>3 电容的阻抗-频率特性</h1><p>理想情况下，电容的阻抗随着频率的增加而降低，利用这一点可以组成RC滤波电路，滤去电路中的高频噪声。理想情况下电容的阻抗-频率响应曲线如下图所示(0.1uf电容)。<br><img src="/images/2016-02-19/11-01-13.jpg" alt="Image"></p>
<p>然而，考虑到实际情况，当频率大于某一特定的值时（RSL与C的谐振频率），电容器件将呈现感性，即此时，ESL起主导作用。当C=0.1uf，ESL取10nH时，谐振频率为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f = \frac&#123;1&#125;&#123;2\pi\sqrt&#123;LC&#125;&#125; \approx 5MHz</div></pre></td></tr></table></figure></p>
<p>仿真的实际阻抗-频率响应曲线如下图所示，与理论计算值相符。<br><img src="/images/2016-02-19/10-58-09.jpg" alt="Image"></p>
<p>由此可见，由于<code>ESL</code>存在，电容在高频段不再表现出电容应用的特性，不同的<code>ESL</code>值对电容特性的影响如下图所示。<br><img src="/images/2016-02-19/10-59-41.jpg" alt="Image"></p>
<p>实际上，由于不同类型的电容的工艺不同，电容的等效模型也不尽相同，不能一概而论。以村田多层陶瓷电容为例，官方给出的等效模型如下图所示。<br><img src="/images/2016-02-19/17-04-53.jpg" alt="Image"><br>阻抗-频率响应曲线如下图所示。<br><img src="/images/2016-02-19/17-07-27.jpg" alt="Image"></p>
<p><strong>总结一下</strong>，<br><strong>低频率范围</strong>：低频率范围的阻抗曲线与理想电容器相同，都与频率呈反比趋势减少。ESR值也显示出与电介质分极延迟产生的介质损耗相应的特性。<br><strong>共振点附近</strong>：频率升高，则阻抗将受ESR影响偏离理想电容器。阻抗为最小值时的频率称为自振频率，此时阻抗=ESR。若大于自振频率，则组件特性由电容器转变为电感，阻抗转而增加。低于自振频率的范围称作容性领域，反之则称作感性领域。ESR除了受介电损耗的影响，还受电极自身抵抗行程的损耗影响。<br><strong>高频范围</strong>：共振点以上的高频率范围中的阻抗的特性由寄生电感(ESL)决定。高频范围的阻抗与频率成正比趋势增加。ESR逐渐表现出电极趋肤效应及接近效应的影响。<br>以上为实际电容器的频率特性。重要的是，频率越高，就越不能忽视寄生成分ESR或ESL的影响。随着电容器在高频领域的应用越来越多，ESR和ESL与静电容量值一样，成为表示电容器性能的重要参数。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-电容分类&quot;&gt;&lt;a href=&quot;#1-电容分类&quot; class=&quot;headerlink&quot; title=&quot;1 电容分类&quot;&gt;&lt;/a&gt;1 电容分类&lt;/h1&gt;&lt;p&gt;电容器有着各式各样的种类，以生产材料可划分为陶瓷电容器、钽电解电容器、铝电解电容器等。特别是多层陶瓷电容器，
    
    </summary>
    
      <category term="硬件" scheme="http://ljgabc.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos架设SVN服务器</title>
    <link href="http://ljgabc.com/2016/01/04/2016-01-04-Centos%E6%9E%B6%E8%AE%BESVN%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://ljgabc.com/2016/01/04/2016-01-04-Centos架设SVN服务器/</id>
    <published>2016-01-04T01:43:34.000Z</published>
    <updated>2016-11-20T14:29:41.207Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装工具"><a href="#1-安装工具" class="headerlink" title="1. 安装工具"></a>1. 安装工具</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">yum install -y httpd svnversion mod_dav_svn php php-mysql mariadb-server</div><div class="line"></div><div class="line">systemctl start httpd mariadb</div><div class="line">systemctl enable httpd mariadb</div></pre></td></tr></table></figure>
<h2 id="2-下载usvn"><a href="#2-下载usvn" class="headerlink" title="2. 下载usvn"></a>2. 下载usvn</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 假设svn文件要放在 /home/svn下</div><div class="line">mkdir /home/svn</div><div class="line">cd /home/svn</div><div class="line">wget https://codeload.github.com/usvn/usvn/tar.gz/1.0.7</div><div class="line"></div><div class="line">tar -xvf usvn-1.0.7.tar.gz</div><div class="line"></div><div class="line">chcon -R -t httpd_sys_content_t /home/svn</div><div class="line">chcon -R -t httpd_sys_rw_content_t /home/svn</div><div class="line"></div><div class="line">vi /etc/httpd/conf.d/usvn.conf</div></pre></td></tr></table></figure>
<p>输入以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Alias /usvn /home/svn/usvn-1.0.7/public</div><div class="line">&lt;Directory &quot;/home/svn/usvn-1.0.7/public&quot;&gt;</div><div class="line">    Options +SymLinksIfOwnerMatch</div><div class="line">    AllowOverride All</div><div class="line">    Order allow,deny</div><div class="line">    Allow from all</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure></p>
<p>之后，重启httpd服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart httpd.service</div></pre></td></tr></table></figure></p>
<h2 id="3-创建数据库"><a href="#3-创建数据库" class="headerlink" title="3. 创建数据库"></a>3. 创建数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 设置mysql密码，按提示操作</div><div class="line">mysql_secure_install</div><div class="line"></div><div class="line">mysql -u root -p</div><div class="line"></div><div class="line">&gt; create database usvn;</div><div class="line">&gt; grant all on usvn.* to usvn@localhost identified by &apos;usvn&apos;;</div><div class="line">&gt; flush privileges;</div></pre></td></tr></table></figure>
<h2 id="4-安装usvn"><a href="#4-安装usvn" class="headerlink" title="4. 安装usvn"></a>4. 安装usvn</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">访问http://ip/usvn/install.php</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-安装工具&quot;&gt;&lt;a href=&quot;#1-安装工具&quot; class=&quot;headerlink&quot; title=&quot;1. 安装工具&quot;&gt;&lt;/a&gt;1. 安装工具&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="SVN" scheme="http://ljgabc.com/tags/SVN/"/>
    
      <category term="Centos" scheme="http://ljgabc.com/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>让i.MX6使用Debian文件系统</title>
    <link href="http://ljgabc.com/2015/12/21/2015-12-21-%E8%AE%A9i-MX6%E4%BD%BF%E7%94%A8Debian%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://ljgabc.com/2015/12/21/2015-12-21-让i-MX6使用Debian文件系统/</id>
    <published>2015-12-21T05:09:35.000Z</published>
    <updated>2016-11-20T14:29:41.207Z</updated>
    
    <content type="html"><![CDATA[<p>从<code>Debian 4.0</code>开始，<code>Debian</code>已经开始支持<code>ARM</code>处理器，所以在<code>i.MX6</code>上安装<code>Debian</code>文件系统并不麻烦。</p>
<p>在i.MX6上使用<code>Debian</code>文件系统的优点有：</p>
<ul>
<li>所有软件包、库都经过官方筛选、打补丁</li>
<li><code>Debian</code>一直已稳定性为人津津乐道，由于<code>ARM</code>版使用的软件包与<code>X86</code>版本是同样的源码，只是编译器不一样，所以稳定性也能够保证</li>
<li>由于<code>ARM</code>版使用的软件包与<code>X86</code>版本是同样的版本，从<code>ARM</code>版迁移至<code>X86</code>时，不存在由于库版本不兼容导致的问题</li>
<li>软件库丰富！！！ 基本上<code>X86</code>上有的软件包，<code>ARM</code>上都有。所以，常用的软件包不用自行编译，直接<code>apt-get install</code>安装</li>
</ul>
<h2 id="1-准备开发环境"><a href="#1-准备开发环境" class="headerlink" title="1. 准备开发环境"></a>1. 准备开发环境</h2><p>必须使用<code>ubuntu</code>或<code>debian</code>作为开发环境系统，并安装以下工具。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 安装必要的工具</div><div class="line">apt-get install debootstrap qemu-user-static binfmt-support</div></pre></td></tr></table></figure></p>
<p>准备一个文件夹，用来保存生成好的文件系统<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 用来保存生成的文件系统</div><div class="line">mkdir ~/debianfs</div></pre></td></tr></table></figure></p>
<h2 id="2-生成文件系统"><a href="#2-生成文件系统" class="headerlink" title="2. 生成文件系统"></a>2. 生成文件系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># 从官方镜像下载文件系统，使用`debian-8.2(jeesis)`</div><div class="line">sudo debootstrap --foreign --arch=armhf jeesie ~/debianfs</div><div class="line"></div><div class="line"># 也可以指定镜像地址（加快下载速度）</div><div class="line"># sudo debootstrap --foreign --arch=armhf jeesie ~/debianfs http://ftp.cn.debian.org/debian</div></pre></td></tr></table></figure>
<h2 id="3-初始化文件系统"><a href="#3-初始化文件系统" class="headerlink" title="3. 初始化文件系统"></a>3. 初始化文件系统</h2><p>初始化文件系统时，需要<code>chroot</code>到文件系统中，但由于开发机一般为<code>X86</code>，所以需要用到<code>qemu-arm</code>工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo cp /usr/bin/qemu-arm-static ~/debianfs/usr/bin</div><div class="line">sudo chroot ~/debianfs /debootstrap/debootstrap --second-stage</div></pre></td></tr></table></figure></p>
<h2 id="3-配置"><a href="#3-配置" class="headerlink" title="3. 配置"></a>3. 配置</h2><p>修改<code>root</code>密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vim ~/debian/etc/shadow</div><div class="line"># 删除代表密码域的*号</div></pre></td></tr></table></figure></p>
<p>添加串口终端<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;T0:23:respawn:/sbin/getty -L ttymxc0 115200 vt100&quot; &gt;&gt; ~/debianfs/etc/inittab</div></pre></td></tr></table></figure></p>
<p>完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从&lt;code&gt;Debian 4.0&lt;/code&gt;开始，&lt;code&gt;Debian&lt;/code&gt;已经开始支持&lt;code&gt;ARM&lt;/code&gt;处理器，所以在&lt;code&gt;i.MX6&lt;/code&gt;上安装&lt;code&gt;Debian&lt;/code&gt;文件系统并不麻烦。&lt;/p&gt;
&lt;p&gt;在i.MX
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="i.MX6" scheme="http://ljgabc.com/tags/i-MX6/"/>
    
      <category term="Debian" scheme="http://ljgabc.com/tags/Debian/"/>
    
  </entry>
  
  <entry>
    <title>制作系统linux镜像文件</title>
    <link href="http://ljgabc.com/2015/11/26/2015-11-26-%E5%88%B6%E4%BD%9C%E7%B3%BB%E7%BB%9Flinux%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6/"/>
    <id>http://ljgabc.com/2015/11/26/2015-11-26-制作系统linux镜像文件/</id>
    <published>2015-11-26T02:07:36.000Z</published>
    <updated>2016-11-20T14:29:41.207Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何制作一个可以直接dd到sd卡的linux系统镜像文件"><a href="#如何制作一个可以直接dd到sd卡的linux系统镜像文件" class="headerlink" title="如何制作一个可以直接dd到sd卡的linux系统镜像文件"></a>如何制作一个可以直接dd到sd卡的linux系统镜像文件</h1><p>linux中常见的以img结尾的镜像文件,可以直接dd到sd卡或sata硬盘使用,也可以通过qemu使用,制作方法如下:</p>
<h2 id="1-创建"><a href="#1-创建" class="headerlink" title="1 创建"></a>1 创建</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 初始化一个4G大小的系统镜像</div><div class="line">dd if=/dev/zero of=./rootfs.img bs=1M seek=4096</div></pre></td></tr></table></figure>
<h2 id="2-制作文件系统"><a href="#2-制作文件系统" class="headerlink" title="2 制作文件系统"></a>2 制作文件系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 使用ext4文件系统格式化镜像</div><div class="line">mkfs.ext4 -F ./rootfs.img</div></pre></td></tr></table></figure>
<h2 id="3-拷贝文件"><a href="#3-拷贝文件" class="headerlink" title="3 拷贝文件"></a>3 拷贝文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 挂载镜像</div><div class="line">sudo mount -o loop ./rootfs.img /mnt</div><div class="line"></div><div class="line"># 拷贝文件</div><div class="line">sudo cp -ar /path/to/rootfs/* /mnt</div><div class="line"></div><div class="line"># 卸载</div><div class="line">sudo umount /mnt</div></pre></td></tr></table></figure>
<p>此时制作好的系统镜像可以拿去直接dd到sd卡使用.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;如何制作一个可以直接dd到sd卡的linux系统镜像文件&quot;&gt;&lt;a href=&quot;#如何制作一个可以直接dd到sd卡的linux系统镜像文件&quot; class=&quot;headerlink&quot; title=&quot;如何制作一个可以直接dd到sd卡的linux系统镜像文件&quot;&gt;&lt;/a&gt;如何
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>惠东</title>
    <link href="http://ljgabc.com/2015/10/31/2015-10-31-%E6%83%A0%E4%B8%9C/"/>
    <id>http://ljgabc.com/2015/10/31/2015-10-31-惠东/</id>
    <published>2015-10-31T11:54:36.000Z</published>
    <updated>2016-11-20T14:29:41.207Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2015-10-31/1.jpg" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2015-10-31/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>净月潭</title>
    <link href="http://ljgabc.com/2015/10/24/2015-10-24-%E5%87%80%E6%9C%88%E6%BD%AD/"/>
    <id>http://ljgabc.com/2015/10/24/2015-10-24-净月潭/</id>
    <published>2015-10-24T15:17:50.000Z</published>
    <updated>2016-11-20T14:29:41.207Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2015-10-24/1.jpg" alt="1"></p>
<p><img src="/images/2015-10-24/2.jpg" alt="2"></p>
<p><img src="/images/2015-10-24/3.jpg" alt="3"></p>
<p><img src="/images/2015-10-24/4.jpg" alt="4"></p>
<p><img src="/images/2015-10-24/5.jpg" alt="5"></p>
<p><img src="/images/2015-10-24/6.jpg" alt="6"></p>
<p><img src="/images/2015-10-24/7.jpg" alt="7"></p>
<p><img src="/images/2015-10-24/8.jpg" alt="8"></p>
<p><img src="/images/2015-10-24/9.jpg" alt="9"></p>
<p><img src="/images/2015-10-24/10.jpg" alt="10"></p>
<p><img src="/images/2015-10-24/11.jpg" alt="11"></p>
<p><img src="/images/2015-10-24/12.jpg" alt="12"></p>
<p><img src="/images/2015-10-24/13.jpg" alt="13"></p>
<p><img src="/images/2015-10-24/14.jpg" alt="14"></p>
<p><img src="/images/2015-10-24/15.jpg" alt="15"></p>
<p><img src="/images/2015-10-24/16.jpg" alt="16"></p>
<p><img src="/images/2015-10-24/17.jpg" alt="17"></p>
<p><img src="/images/2015-10-24/18.jpg" alt="18"></p>
<p><img src="/images/2015-10-24/19.jpg" alt="19"></p>
<p><img src="/images/2015-10-24/20.jpg" alt="20"></p>
<p><img src="/images/2015-10-24/21.jpg" alt="21"></p>
<p><img src="/images/2015-10-24/22.jpg" alt="22"></p>
<p><img src="/images/2015-10-24/23.jpg" alt="23"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2015-10-24/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-10-24/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-10-24/3.jp
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>树莓派之lelylanled</title>
    <link href="http://ljgabc.com/2015/09/25/2015-09-25-%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8Blelylanled/"/>
    <id>http://ljgabc.com/2015/09/25/2015-09-25-树莓派之lelylanled/</id>
    <published>2015-09-25T09:34:08.000Z</published>
    <updated>2016-11-20T14:29:41.207Z</updated>
    
    <content type="html"><![CDATA[<p>之前的网络呼吸灯里，树莓派相当于一个提供LED控制的服务器，客户端用的是curl命令行工具。客户端其用命令行、web、手机APP等都可以访问。</p>
<p><a href="http://www.lelylan.com/" target="_blank" rel="external">lelylan</a>提供了一套开发环境和一套标准的接口，可以实现各种形式的客户端，比如<code>Device Web Component</code>、<code>Angular JS Client</code>、<code>Ruby Client</code>、<code>Node.js Client</code>、<code>Python Client</code>、<code>iOS Client</code>、<code>Android Client</code>以及<code>Lelylan Dashboard</code>等。</p>
<p>本文准备使用<code>Lelylan Dashboard</code>，在网络呼吸灯的基础上，加上真正的使用网页控制LED。</p>
<p>打开<a href="http://lelylan.github.io/devices-dashboard-ng/" target="_blank" rel="external">Lelylan Dashboard</a>，新建一个名为webled的Light设备。步骤如下：</p>
<ol>
<li><p>Step 1<br><img src="/images/2015-09-25/sadgjaw39u8ik1.png" alt="Step 1"></p>
</li>
<li><p>Step 2<br><img src="/images/2015-09-25/sadgjaw39u8ik2.png" alt="Step 2"></p>
</li>
<li><p>Step 3<br><img src="/images/2015-09-25/sadgjaw39u8ik3.png" alt="Step 3"></p>
</li>
<li><p>Step 4<br><img src="/images/2015-09-25/sadgjaw39u8ik4.png" alt="Step 4"></p>
</li>
<li><p>Step 5<br><img src="/images/2015-09-25/sadgjaw39u8ik5.png" alt="Step 5"></p>
</li>
</ol>
<p><code>lelylan</code>的包每次会以<code>PUT</code>方式发送到指定的URL，包的内从可以从<code>request.json</code>中获取<code>dict</code>格式的信息，各种信息的格式如下(其中的id是lelylan自动分配的，可能有所不同)：</p>
<p><strong>打开LED</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    u&apos;properties&apos;: [</div><div class="line">        &#123;</div><div class="line">            u&apos;id&apos;: u&apos;518be88300045e0610000008&apos;,</div><div class="line">            u&apos;value&apos;: u&apos;off&apos;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>关闭LED</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    u&apos;properties&apos;: [</div><div class="line">        &#123;</div><div class="line">            u&apos;id&apos;: u&apos;518be88300045e0610000008&apos;,</div><div class="line">            u&apos;value&apos;: u&apos;off&apos;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>设置亮度为31(可选范围0~100)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    u&apos;properties&apos;: [</div><div class="line">        &#123;</div><div class="line">            u&apos;id&apos;: u&apos;518be8b100045e99cc000004&apos;, </div><div class="line">            u&apos;value&apos;: u&apos;31&apos;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>设置颜色</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    u&apos;properties&apos;: [</div><div class="line">        &#123;</div><div class="line">            u&apos;id&apos;: u&apos;518be90500045e1521000008&apos;,</div><div class="line">            u&apos;value&apos;: u&apos;#cc4c92&apos;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>设置闪烁频率(0.0~20)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    u&apos;properties&apos;: [</div><div class="line">        &#123;</div><div class="line">            u&apos;id&apos;: u&apos;518be95500045e1521000009&apos;, </div><div class="line">            u&apos;value&apos;: 1</div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">            u&apos;id&apos;: u&apos;518be9aa00045e0610000009&apos;,</div><div class="line">            u&apos;value&apos;: u&apos;10&apos;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>设置呼吸频率(ms)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    u&apos;properties&apos;: [</div><div class="line">        &#123;</div><div class="line">            u&apos;id&apos;: u&apos;5497e32513437b4a6b000002&apos;, </div><div class="line">            u&apos;value&apos;: 10</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>设置呼吸灯颜色</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    u&apos;properties&apos;: [</div><div class="line">        &#123;</div><div class="line">            u&apos;id&apos;: u&apos;518be90500045e1521000008&apos;,</div><div class="line">            u&apos;value&apos;: u&apos;#3d3d3d&apos;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>了解了<code>lalylan</code>的包格式之后，下一步就是如何在<code>Flask</code>中解析这些命令，并用来控制LED。</p>
<p>比如，处理LED的打开和关闭事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">@app.route(&quot;/LED&quot;, methods=[&apos;GET&apos;, &apos;PUT&apos;, &apos;POST&apos;])</div><div class="line">def LED():</div><div class="line">    if request.method == &apos;GET&apos;:</div><div class="line">        return &quot;Hello LelylanLED!&quot;</div><div class="line">    elif request.method == &apos;PUT&apos;:</div><div class="line">        # 解析lelylan发过来的参数</div><div class="line">        properties = request.json[&apos;properties&apos;]</div><div class="line">        id0 = properties[0][&apos;id&apos;]</div><div class="line">        value0 = properties[0][&apos;value&apos;]</div><div class="line"></div><div class="line">        # LED on/off 的ID</div><div class="line">        if id0 == ID_LED_ONOFF:</div><div class="line">            # 根据value值判断LED动作</div><div class="line">            if value0 == VAL_LED_ON:</div><div class="line">                breath.set(100)</div><div class="line">            elif value0 == VAL_LED_OFF:</div><div class="line">                breath.set(0)</div><div class="line">            else:</div><div class="line">                abort(404)</div><div class="line">        else:</div><div class="line">            abort(404)</div><div class="line">        return value0</div><div class="line">    else:</div><div class="line">        return abort(404)</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/ljgabc/raspberrypi/blob/master/lelylanled.py" target="_blank" rel="external">完整代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的网络呼吸灯里，树莓派相当于一个提供LED控制的服务器，客户端用的是curl命令行工具。客户端其用命令行、web、手机APP等都可以访问。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.lelylan.com/&quot; target=&quot;_blank&quot; rel=&quot;ext
    
    </summary>
    
      <category term="硬件" scheme="http://ljgabc.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="树莓派" scheme="http://ljgabc.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>房奴</title>
    <link href="http://ljgabc.com/2015/09/24/2015-09-24-%E6%88%BF%E5%A5%B4/"/>
    <id>http://ljgabc.com/2015/09/24/2015-09-24-房奴/</id>
    <published>2015-09-24T14:02:34.000Z</published>
    <updated>2016-11-20T14:29:41.207Z</updated>
    
    <content type="html"><![CDATA[<p>有房啦~</p>
<p><img src="/images/2015-09-24/1.jpg" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有房啦~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-09-24/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>shell统计pcie失败次数脚本</title>
    <link href="http://ljgabc.com/2015/09/21/2015-09-21-shell%E7%BB%9F%E8%AE%A1pcie%E5%A4%B1%E8%B4%A5%E6%AC%A1%E6%95%B0%E8%84%9A%E6%9C%AC/"/>
    <id>http://ljgabc.com/2015/09/21/2015-09-21-shell统计pcie失败次数脚本/</id>
    <published>2015-09-21T11:08:00.000Z</published>
    <updated>2016-11-20T14:29:41.207Z</updated>
    
    <content type="html"><![CDATA[<p>shell脚本中，统计pcie检测失败次数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"># 记录文件</div><div class="line">PASS=/root/pass.txt</div><div class="line">FAIL=/root/fail.txt</div><div class="line"></div><div class="line"># FPGA设备VID</div><div class="line">VID=&quot;10ee&quot;</div><div class="line"></div><div class="line"># 重启延时时间</div><div class="line">BOOTDLY=3</div><div class="line">            </div><div class="line"># 如不存在则创建文件                                               </div><div class="line">touch $&#123;PASS&#125;                                                                   </div><div class="line">touch $&#123;FAIL&#125;                                                                   </div><div class="line">                 </div><div class="line"># 统计已有成功和失败次数                                                               </div><div class="line">PASS_CNT=`wc -l $&#123;PASS&#125; | awk &apos;&#123;print $1&#125;&apos;`                                     </div><div class="line">FAIL_CNT=`wc -l $&#123;FAIL&#125; | awk &apos;&#123;print $1&#125;&apos;`                                     </div><div class="line">                    </div><div class="line"># 打印次数                            </div><div class="line">echo &quot;====================&quot;                                                     </div><div class="line">echo &quot;PASS: $&#123;PASS_CNT&#125;, FALI: $&#123;FAIL_CNT&#125;&quot;                                     </div><div class="line">echo &quot;====================&quot;                                                     </div><div class="line"></div><div class="line"># 加载PCIE驱动</div><div class="line">echo 1 &gt; /sys/deferred_pcie/write </div><div class="line"></div><div class="line"># 检测FPGA                                                  </div><div class="line">lspci | grep $VID                    </div><div class="line"></div><div class="line"># 根据grep的结果判断是否有FPGA设备</div><div class="line">if [ $? -eq 0 ]; then                                                           </div><div class="line">    echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` `expr $&#123;PASS_CNT&#125; + 1` | tee -a $&#123;PASS&#125;    </div><div class="line">else                                                                            </div><div class="line">    echo `date +&quot;%Y-%m-%d %H:%M:%S&quot;` `expr $&#123;FAIL_CNT&#125; + 1` | tee -a $&#123;FAIL&#125;    </div><div class="line">fi                                                 </div><div class="line"></div><div class="line"># 延时BOOTDLY秒，如果没有任何输入则重启，否则暂停</div><div class="line">read -p &quot;Press Any Key to STOP!!! &quot; -t $BOOTDLY Continue                           </div><div class="line">                                                                            </div><div class="line">if [ $? -eq 1 ]; then                                                       </div><div class="line">    reboot                                                                  </div><div class="line">fi</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;shell脚本中，统计pcie检测失败次数。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="PCIE" scheme="http://ljgabc.com/tags/PCIE/"/>
    
  </entry>
  
  <entry>
    <title>树莓派之Flask呼吸灯</title>
    <link href="http://ljgabc.com/2015/09/20/2015-09-20-%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8BFlask%E5%91%BC%E5%90%B8%E7%81%AF/"/>
    <id>http://ljgabc.com/2015/09/20/2015-09-20-树莓派之Flask呼吸灯/</id>
    <published>2015-09-20T12:09:39.000Z</published>
    <updated>2016-11-20T14:29:41.207Z</updated>
    
    <content type="html"><![CDATA[<p>用<code>Python</code>控制树莓派的LED灯，只能在命令行下本地控制，无法与网络连接,可玩性不高。使用<code>Flask</code>和<code>RESTFul</code>，实现通过网络控制LED灯。</p>
<p>首先，在树莓派上安装需要的组件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo pip install Flask</div><div class="line">sudo pip install flask-restful</div></pre></td></tr></table></figure></p>
<p><code>Flask</code>是一个使用<code>Python</code>编写的轻量级Web应用框架。<code>WSGI</code>工具箱采用<code>Werkzeug</code>，模板引擎则使用<code>Jinja2</code>,非常简单易学。</p>
<p>一个最简单的例子如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">#! /usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line"># helloflask.py</div><div class="line"># author: ljgabc</div><div class="line"># date: 2015-09-20 16:00</div><div class="line"># email: ljgac@yahoo.com</div><div class="line"># website: ljgabc.github.io</div><div class="line"></div><div class="line">from flask import Flask</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line"></div><div class="line">@app.route(&quot;/&quot;)</div><div class="line">def index():</div><div class="line">    # 用户访问根目录时，将会返回&quot;Hello World!&quot;</div><div class="line">    return &quot;Hello Flask!&quot;</div><div class="line"></div><div class="line">if __name__ == &quot;__main__&quot;:</div><div class="line">    # 设定host，以便在所有ip上都能访问</div><div class="line">    app.run(host=&quot;0.0.0.0&quot;)</div></pre></td></tr></table></figure></p>
<p><code>REST</code>是一种针对网络应用的设计和开发方式，可以降低开发的复杂性，提高系统的可伸缩性。满足这种架构的实现成为<code>RESTFul</code>.</p>
<p><code>REST</code>模式下，对资源有4中操作：</p>
<ul>
<li>POST /uri 创建</li>
<li>DELETE /uri/xxx 删除</li>
<li>PUT /uri/xxx 更新或创建</li>
<li>GET /uri/xxx 查看<br>简单来讲，<code>REST</code>就是规定了web应用中，C/S之间的通信方式、方法（对资源的操作）。</li>
</ul>
<p>使用<code>Flask</code>和<code>Flask-RESTFul</code>的一个简单例子如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">#! /usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line"># hellorestful.py</div><div class="line"># author: ljgabc</div><div class="line"># date: 2015-09-20 16:00</div><div class="line"># email: ljgac@yahoo.com</div><div class="line"># website: ljgabc.github.io</div><div class="line"></div><div class="line">&apos;&apos;&apos;</div><div class="line">Flask-RESTFul简单例子</div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line">from flask import Flask, request, abort</div><div class="line">from flask_restful import Resource, Api</div><div class="line"></div><div class="line">app = Flask(__name__)</div><div class="line">api = Api(app)</div><div class="line"></div><div class="line"># todos是一个资源</div><div class="line">todos = &#123;&#125;</div><div class="line"></div><div class="line"># 定义了对tudos的几种操作</div><div class="line">class Todo(Resource):</div><div class="line">    # 获取资源</div><div class="line">    def get(self, todo_id):</div><div class="line">        if todo_id not in todos:</div><div class="line">            abort(404)</div><div class="line">        return &#123;todo_id: todos[todo_id]&#125;</div><div class="line"></div><div class="line">    # 创建或更新资源</div><div class="line">    def put(self, todo_id):</div><div class="line">        todos[todo_id] = request.form[&apos;data&apos;]</div><div class="line">        return &#123;todo_id: todos[todo_id]&#125;</div><div class="line"></div><div class="line"># 定义uri规则，根目录+字符串形式的id号</div><div class="line">api.add_resource(Todo, &apos;/&lt;string:todo_id&gt;&apos;)</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    app.run(host=&quot;0.0.0.0&quot;)</div></pre></td></tr></table></figure></p>
<p>在<code>linux</code>下，可以用<code>curl</code>工具测试以上代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ curl http://127.0.0.1:5000/todo1 -d &quot;data=Remember the milk&quot; -X PUT</div><div class="line">&#123;&quot;todo1&quot;: &quot;Remember the milk&quot;&#125;</div><div class="line"></div><div class="line">$ curl http://127.0.0.1:5000/todo1</div><div class="line">&#123;&quot;todo1&quot;: &quot;Remember the milk&quot;&#125;</div><div class="line"></div><div class="line">$ curl http://127.0.0.1:5000/todo2</div><div class="line">&#123;&quot;message&quot;: &quot;The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.&quot;&#125;\</div><div class="line"></div><div class="line">$ curl http://127.0.0.1:5000/todo2 -d &quot;data=Change my brakepads&quot; -X PUT</div><div class="line">&#123;&quot;todo2&quot;: &quot;Change my brakepads&quot;&#125;</div><div class="line"></div><div class="line">$ curl http://127.0.0.1:5000/todo2</div><div class="line">&#123;&quot;todo2&quot;: &quot;Change my brakepads&quot;&#125;</div></pre></td></tr></table></figure></p>
<p>掌握了以上简单例子之后，就可以将其与之前控制LED的例子结合起来，实现一个通过web控制的LED。<br>核心代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">led0_st = [u&quot;off&quot;]</div><div class="line"></div><div class="line"># 定义了对tudos的几种操作</div><div class="line">class LED(Resource):</div><div class="line">    # 获取LED状态</div><div class="line">    def get(self, led_id):</div><div class="line">        # 由于只有一个LED0，所以led_id只会等于0，只能获取LED0的状态</div><div class="line">        if led_id != 0:</div><div class="line">            abort(404)</div><div class="line">        return led0_st[0]</div><div class="line"></div><div class="line">    # 更新LED状态</div><div class="line">    def put(self, led_id):</div><div class="line">        if led_id != 0:</div><div class="line">            abort(404)</div><div class="line"></div><div class="line">        # 获取操作数据value，</div><div class="line">        value = request.form[&apos;value&apos;]</div><div class="line"></div><div class="line">        # 校验指令，如果指令正常则驱动LED，并保存状态</div><div class="line">        if value == u&apos;on&apos;:</div><div class="line">            led0_st[0] = value</div><div class="line">            breath.set(100)</div><div class="line">        elif value == u&apos;off&apos;:</div><div class="line">            led0_st[0] = value</div><div class="line">            breath.set(0)</div><div class="line">        else:</div><div class="line">            try:</div><div class="line">                led0_st[0] = int(value)</div><div class="line">                if led0_st[0] &lt; 0:</div><div class="line">                    led0_st[0] = 0</div><div class="line">                elif led0_st[0] &gt; 100:</div><div class="line">                    led0_st[0] = 100</div><div class="line">                breath.set(led0_st[0])</div><div class="line">            except ValueError:</div><div class="line">                return &quot;Unavailable led status %r&quot; % value</div><div class="line"></div><div class="line">        return led0_st[0]</div><div class="line"></div><div class="line"># 定义uri规则，/LED+整型id</div><div class="line">api.add_resource(LED, &apos;/LED/&lt;int:led_id&gt;&apos;)</div></pre></td></tr></table></figure></p>
<p><code>linux</code>下使用<code>curl</code>测试代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ curl http://127.0.0.1:5000/LED/0 </div><div class="line">&quot;off&quot;</div><div class="line"></div><div class="line">$ curl http://127.0.0.1:5000/LED/0 -d &quot;value=on&quot; -X PUT</div><div class="line">&quot;on&quot;</div><div class="line"></div><div class="line">$ curl http://127.0.0.1:5000/LED/0 </div><div class="line">&quot;on&quot;</div><div class="line"></div><div class="line">$ curl http://127.0.0.1:5000/LED/0 -d &quot;value=off&quot; -X PUT</div><div class="line">&quot;off&quot;</div><div class="line"></div><div class="line">$ curl http://127.0.0.1:5000/LED/0 </div><div class="line">&quot;off&quot;</div><div class="line"></div><div class="line"># web版呼吸灯</div><div class="line">$ while true; do for i in 10 20 30 40 50 60 70 80 90 100 100 90 80 70 60 50 40 30 20 10; do curl http://127.0.0.1:5000/LED/0 -d &quot;value=$i&quot; -X PUT; done; done</div></pre></td></tr></table></figure></p>
<p>由于我的树莓派没有公网IP，所以只能在局域网内进行测试、连接。如果需要能从外网任意地方均可连接，可以使用花生壳获取能从公网连接的网址，之后将上述127.0.0.1替换为xxx.eicp.net。<br>如果你有自己的域名的话，可以考虑使用<code>dnspod</code>+<code>ddns</code>，但要求你的adsl分配的是公网ip，而不是nat后的内网ip。</p>
<p><a href="https://github.com/ljgabc/raspberrypi/blob/master/webled.py" target="_blank" rel="external">完整代码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用&lt;code&gt;Python&lt;/code&gt;控制树莓派的LED灯，只能在命令行下本地控制，无法与网络连接,可玩性不高。使用&lt;code&gt;Flask&lt;/code&gt;和&lt;code&gt;RESTFul&lt;/code&gt;，实现通过网络控制LED灯。&lt;/p&gt;
&lt;p&gt;首先，在树莓派上安装需要的组件。&lt;
    
    </summary>
    
      <category term="硬件" scheme="http://ljgabc.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
      <category term="树莓派" scheme="http://ljgabc.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Flask" scheme="http://ljgabc.com/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>Catmul插值算法</title>
    <link href="http://ljgabc.com/2015/09/17/2015-09-17-Catmul%E6%8F%92%E5%80%BC%E7%AE%97%E6%B3%95/"/>
    <id>http://ljgabc.com/2015/09/17/2015-09-17-Catmul插值算法/</id>
    <published>2015-09-17T01:50:40.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<p>如图所示，已知临近4个点，求中间点的值<br><img src="/images/2016-02-17/18-34-01.jpg" alt="Image"></p>
<p>图中x已归一化到[0,1]，此时，插值系数可按照以下公式确定</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$y=\frac&#123;126&#125;&#123;128&#125;\frac&#123;floor(64x)&#125;&#123;63&#125;+\frac&#123;1&#125;&#123;128&#125;$</div></pre></td></tr></table></figure>
<ol>
<li>y = 126<em>floor(64</em>x)/(128*63) + 1/128</li>
<li>0.5<em>(-y + 2</em>y^2 - y^3)</li>
<li>0.5<em>(2 - 5</em>y^2 + 3*y^3)</li>
<li>0.5<em>(y + 4</em>y^2 -3*y^3)</li>
<li>0.5*(-y^2 + y^3)</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如图所示，已知临近4个点，求中间点的值&lt;br&gt;&lt;img src=&quot;/images/2016-02-17/18-34-01.jpg&quot; alt=&quot;Image&quot;&gt;&lt;/p&gt;
&lt;p&gt;图中x已归一化到[0,1]，此时，插值系数可按照以下公式确定&lt;/p&gt;
&lt;figure class=&quot;h
    
    </summary>
    
      <category term="软件" scheme="http://ljgabc.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="Catmul" scheme="http://ljgabc.com/tags/Catmul/"/>
    
      <category term="插值" scheme="http://ljgabc.com/tags/%E6%8F%92%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>小梧桐</title>
    <link href="http://ljgabc.com/2015/09/13/2015-09-13-%E5%B0%8F%E6%A2%A7%E6%A1%90/"/>
    <id>http://ljgabc.com/2015/09/13/2015-09-13-小梧桐/</id>
    <published>2015-09-13T15:01:27.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2015-09-13/1.jpg" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2015-09-13/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>树莓派之呼吸灯</title>
    <link href="http://ljgabc.com/2015/09/13/2015-09-13-%E6%A0%91%E8%8E%93%E6%B4%BE%E4%B9%8B%E5%91%BC%E5%90%B8%E7%81%AF/"/>
    <id>http://ljgabc.com/2015/09/13/2015-09-13-树莓派之呼吸灯/</id>
    <published>2015-09-13T12:06:41.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<p><code>RPi.GPIO</code>库中通过软件模拟在任意<code>GPIO</code>上输出<code>PWM</code>波形，由于软件运行的时间受CPU负荷的影响，所以输出精度、输出频率等不是很稳定，但用于控制LED灯的亮暗已经够用了。</p>
<p>电路图如下:<br><img src="/images/2016-02-17/20-07-28.jpg" alt="Image"></p>
<p><code>RPi.GPIO</code>的PWM功能示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#! /usr/bin/python</div><div class="line"></div><div class="line"># 引入RPi.GPIO库</div><div class="line">import RPi.GPIO as GPIO</div><div class="line"></div><div class="line">GPIO.setmode(GPIO.BOARD)    # 使用`BOARD`编码</div><div class="line">GPIO.setup(40, GPIO.OUT, initial=GPIO.LOW)  # 使能PIN40作为输出接口，默认输出低电平</div><div class="line"></div><div class="line">pwm = GPIO.PWM(40, 100)     # 使能PIN40输出频率为100Hz的PWM信号</div><div class="line">pwm.start(0)                # 启动PWM输出，初始占空比位0</div><div class="line">pwm.ChangeDutyCycle(50)     # 输出占空比50%， 有效范围为0.0~100.0</div><div class="line">pwm.stop()                  # 停止PWM</div><div class="line"></div><div class="line">GPIO.cleanup()</div></pre></td></tr></table></figure></p>
<p><a href="https://github.com/ljgabc/raspberrypi/blob/master/breath.py" target="_blank" rel="external">完整的例子</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;RPi.GPIO&lt;/code&gt;库中通过软件模拟在任意&lt;code&gt;GPIO&lt;/code&gt;上输出&lt;code&gt;PWM&lt;/code&gt;波形，由于软件运行的时间受CPU负荷的影响，所以输出精度、输出频率等不是很稳定，但用于控制LED灯的亮暗已经够用了。&lt;/p&gt;
&lt;p&gt;电路图
    
    </summary>
    
      <category term="硬件" scheme="http://ljgabc.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
      <category term="树莓派" scheme="http://ljgabc.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
  </entry>
  
  <entry>
    <title>塘朗山绿道</title>
    <link href="http://ljgabc.com/2015/09/12/2015-09-12-%E5%A1%98%E6%9C%97%E5%B1%B1%E7%BB%BF%E9%81%93/"/>
    <id>http://ljgabc.com/2015/09/12/2015-09-12-塘朗山绿道/</id>
    <published>2015-09-12T13:59:14.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2015-09-12/1.jpg" alt="1"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2015-09-12/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="http://ljgabc.com/2015/09/10/2015-09-10-Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://ljgabc.com/2015/09/10/2015-09-10-Docker学习笔记/</id>
    <published>2015-09-10T11:39:42.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-启动交互容器"><a href="#1-启动交互容器" class="headerlink" title="1 启动交互容器"></a>1 启动交互容器</h1><p>下面的命令则启动一个<code>bash</code>终端，允许用户进行交互。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">normal$ sudo docker run -t -i ubuntu:14.04 /bin/bash</div><div class="line">root@af8bae53bdd3:/#</div></pre></td></tr></table></figure></p>
<p>其中，<code>-t</code>选项让<code>Docker</code>分配一个伪终端（<code>pseudo-tty</code>）并绑定到容器的标准输入上，<code>-i</code>则让容器的标准输入保持打开。</p>
<h1 id="2-启动守护进程容器"><a href="#2-启动守护进程容器" class="headerlink" title="2 启动守护进程容器"></a>2 启动守护进程容器</h1><p>通过<code>-d</code>参数来启动一个容器，并让其在后台执行。大部分的应用都应该采用这种模式。</p>
<h1 id="3-进入容器"><a href="#3-进入容器" class="headerlink" title="3 进入容器"></a>3 进入容器</h1><p>在使用<code>-d</code>参数时，容器启动后会进入后台。 某些时候需要进入容器进行操作，有很多种方法，包括使用<code>docker attach</code>命令或<code>nsenter</code>工具等。</p>
<h1 id="4-删除容器"><a href="#4-删除容器" class="headerlink" title="4 删除容器"></a>4 删除容器</h1><p>用<code>docker rm [NAME]</code>命令来删除一个停止运行的容器。如果数量太多要一个个删除可能会很麻烦，用<code>docker rm $(docker ps -a -q)</code>可以全部清理掉。</p>
<h1 id="5-自定义容器名称"><a href="#5-自定义容器名称" class="headerlink" title="5 自定义容器名称"></a>5 自定义容器名称</h1><p>使用<code>--name</code>标记可以为容器自定义命名。</p>
<h1 id="6-外部网络连接"><a href="#6-外部网络连接" class="headerlink" title="6 外部网络连接"></a>6 外部网络连接</h1><p>容器需要进行外部网络连接时，必须通过端口映射实现，将需要的容器端口映射到主机的某个端口上。</p>
<p>使用<code>-P</code>或<code>-p</code>参数来指定端口映射。</p>
<p>当使用<code>-P</code>标记时，<code>Docker</code>会随机映射一个<code>49000~49900</code>的端口到内部容器开放的网络端口。</p>
<p>使用<code>-p</code>（小写的）则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort。</div></pre></td></tr></table></figure></p>
<p>使用<code>docker port</code>来查看当前映射的端口配置，也可以查看到绑定的地址</p>
<h1 id="7-容器互联"><a href="#7-容器互联" class="headerlink" title="7 容器互联"></a>7 容器互联</h1><p>使用<code>--link</code>参数可以让容器之间安全的进行交互。<code>--link</code>参数的格式为<code>--link name:alias</code>，其中<code>name</code>是要链接的容器的名称，<code>alias</code>是这个连接的别名。</p>
<p><code>Docker</code>在两个互联的容器之间创建了一个安全隧道，而且不用映射它们的端口到宿主主机上，从而避免了暴露关键数据库到外部网络上。</p>
<p><code>Docker</code>通过<code>2</code>种方式为容器公开连接信息：</p>
<ol>
<li>环境变量；</li>
<li>更新父容器的<code>/etc/hosts</code>文件；</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-启动交互容器&quot;&gt;&lt;a href=&quot;#1-启动交互容器&quot; class=&quot;headerlink&quot; title=&quot;1 启动交互容器&quot;&gt;&lt;/a&gt;1 启动交互容器&lt;/h1&gt;&lt;p&gt;下面的命令则启动一个&lt;code&gt;bash&lt;/code&gt;终端，允许用户进行交互。&lt;br&gt;&lt;fi
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Docker" scheme="http://ljgabc.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>docker-gitlab搭建过程</title>
    <link href="http://ljgabc.com/2015/09/06/2015-09-06-docker-gitlab%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    <id>http://ljgabc.com/2015/09/06/2015-09-06-docker-gitlab搭建过程/</id>
    <published>2015-09-06T12:10:44.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>建议使用gogs替代gitlab</p>
</blockquote>
<h1 id="1-使用到的docker镜像"><a href="#1-使用到的docker镜像" class="headerlink" title="1 使用到的docker镜像"></a>1 使用到的docker镜像</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker pull sameersbn/gitlab:7.14.1</div><div class="line">ocker pull sameersbn/postgresql:9.4-3</div><div class="line">ocker pull sameersbn/redis:latest</div></pre></td></tr></table></figure>
<h1 id="2-启动应用"><a href="#2-启动应用" class="headerlink" title="2 启动应用"></a>2 启动应用</h1><h2 id="2-1-运行postgresql数据库"><a href="#2-1-运行postgresql数据库" class="headerlink" title="2.1 运行postgresql数据库"></a>2.1 运行postgresql数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker run --name gitlab-postgresql -d \</div><div class="line">    --env &apos;DB_NAME=gitlabhq_production&apos; \</div><div class="line">    --env &apos;DB_USER=gitlab&apos; --env &apos;DB_PASS=password&apos; \</div><div class="line">    --volume /srv/docker/gitlab/postgresql:/var/lib/postgresql \</div><div class="line">    sameersbn/postgresql:9.4-3</div></pre></td></tr></table></figure>
<p>也支持使用外部的数据库，此步不需要。在第三步，启动gitlab时，需要指定环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--env &apos;DB_TYPE=postgres&apos; \</div><div class="line">--env &apos;DB_HOST=192.168.1.100&apos; \</div><div class="line">--env &apos;DB_NAME=gitlabhq_production&apos; \</div><div class="line">--env &apos;DB_USER=gitlab&apos; \</div><div class="line">--env &apos;DB_PASS=password&apos; \</div></pre></td></tr></table></figure></p>
<h2 id="2-2-运行redis环境"><a href="#2-2-运行redis环境" class="headerlink" title="2.2 运行redis环境"></a>2.2 运行redis环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker run --name gitlab-redis -d \</div><div class="line">    --volume /srv/docker/gitlab/redis:/var/lib/redis \</div><div class="line">    sameersbn/redis:latest</div></pre></td></tr></table></figure>
<p>也支持使用外部的redis服务器，此步不需要。在第三步启动gitlab时，需要指定环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--env &apos;REDIS_HOST=192.168.1.100&apos; \</div><div class="line">--env &apos;REDIS_PORT=6379&apos; \</div></pre></td></tr></table></figure></p>
<h2 id="2-3-运行gitlab"><a href="#2-3-运行gitlab" class="headerlink" title="2.3 运行gitlab"></a>2.3 运行gitlab</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">docker run --name gitlab -d \</div><div class="line">    --link gitlab-postgresql:postgresql --link gitlab-redis:redisio \</div><div class="line">    --publish 10022:22 --publish 10080:80 \</div><div class="line">    --env &apos;GITLAB_PORT=10080&apos; --env &apos;GITLAB_SSH_PORT=10022&apos; \</div><div class="line">    --volume /srv/docker/gitlab/gitlab:/home/git/data \</div><div class="line">sameersbn/gitlab:7.14.1</div></pre></td></tr></table></figure>
<p>默认讲<code>gitlab</code>的<code>80</code>端口映射位主机的<code>10080</code>端口；<br><code>22</code>端口映射为主机的<code>10022</code>端口。</p>
<p>稍等几分钟之后，gitlab就可以使用了。</p>
<h1 id="3-使用"><a href="#3-使用" class="headerlink" title="3 使用"></a>3 使用</h1><p>默认用户名、密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">username: root</div><div class="line">password: 5iveL!fe</div></pre></td></tr></table></figure></p>
<h1 id="4-邮件配置"><a href="#4-邮件配置" class="headerlink" title="4 邮件配置"></a>4 邮件配置</h1><p><code>gitlab</code>默认使用<code>gmail</code>发送邮件，如果想要使用的话，需要在启动时指定<code>gmail</code>的用户名和密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--env &apos;SMTP_USER=USER@gmail.com&apos; \</div><div class="line">--env &apos;SMTP_PASS=PASSWORD&apos; \</div></pre></td></tr></table></figure></p>
<p>可以通过更多的环境变量，修改smtp的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">--env &apos;SMTP_HOST=mail.google.com&apos; \</div><div class="line">--env &apos;SMTP_PORT=587&apos; \</div><div class="line">--env &apos;SMTP_USER=USER@gmail.com&apos; \</div><div class="line">--env &apos;SMTP_PASS=PASSWORD&apos; \</div></pre></td></tr></table></figure></p>
<p>gitlab默认邮件地址是example@example.com，可以通过环境变量修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--env &apos;GITLAB_EMAIL=example@example.com&apos; \</div><div class="line">--env &apos;GITLAB_EMAIL_DISPLAY_NAME=GitLab&apos; \</div><div class="line">--env &apos;GITLAB_EMAIL_REPLY_TO=noreply@example.com&apos; \</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;建议使用gogs替代gitlab&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-使用到的docker镜像&quot;&gt;&lt;a href=&quot;#1-使用到的docker镜像&quot; class=&quot;headerlink&quot; title=&quot;1 使用到的docker镜
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Docker" scheme="http://ljgabc.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Git Subtree</title>
    <link href="http://ljgabc.com/2015/08/14/2015-08-14-Git-Subtree/"/>
    <id>http://ljgabc.com/2015/08/14/2015-08-14-Git-Subtree/</id>
    <published>2015-08-14T01:57:49.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><blockquote>
<p>合并子仓库到项目子目录中</p>
</blockquote>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul>
<li><p>添加远程分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add -f 分支名(仓库别名) 远程仓库地址</div></pre></td></tr></table></figure>
</li>
<li><p>放到子目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git subtree add --prefix=子目录名 分支名(仓库别名) 分支 --squash</div></pre></td></tr></table></figure>
</li>
<li><p>更新仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git fetch 分支名(仓库别名) 分支</div><div class="line">git pull --prefix=子目录名 分支名(仓库别名) 分支 --squash</div></pre></td></tr></table></figure>
</li>
<li><p>推送更新</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git subtree push --prefix=子目录名 分支名(仓库别名) 分支</div></pre></td></tr></table></figure>
</li>
</ul>
<p>完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;合并子仓库到项目子目录中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Git" scheme="http://ljgabc.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git使用规范流程</title>
    <link href="http://ljgabc.com/2015/08/12/2015-08-12-Git%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83%E6%B5%81%E7%A8%8B/"/>
    <id>http://ljgabc.com/2015/08/12/2015-08-12-Git使用规范流程/</id>
    <published>2015-08-12T12:02:45.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<p>团队开发中，遵循一个合理、清晰的<code>Git</code>使用流程，是非常重要的。</p>
<p>否则，每个人都提交一堆杂乱无章的<code>commit</code>，项目很快就会变得难以协调和维护。</p>
<p>下面是<a href="https://github.com/thoughtbot/guides/tree/master/protocol/git" target="_blank" rel="external">ThoughtBot</a>的<code>Git</code>使用规范流程。我从中学到了很多，推荐你也这样使用<code>Git</code>。</p>
<p><img src="/images/2016-02-17/18-31-30.jpg" alt="Image"></p>
<h3 id="第一步-新建分支"><a href="#第一步-新建分支" class="headerlink" title="第一步:新建分支"></a>第一步:新建分支</h3><p>首先,每次开发新功能,都应该新建一个单独的分支(这方面可以参考<a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank" rel="external">《Git分支管理策略》</a>)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 获取主干最新代码</div><div class="line">$ git checkout master</div><div class="line">$ git pull# 新建一个开发分支myfeature</div><div class="line">$ git checkout -b myfeature</div></pre></td></tr></table></figure>
<h3 id="第二步-提交分支commit"><a href="#第二步-提交分支commit" class="headerlink" title="第二步:提交分支commit"></a>第二步:提交分支commit</h3><p>分支修改后,就可以提交<code>commit</code>了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add --all</div><div class="line">$ git status</div><div class="line">$ git commit --verbose</div></pre></td></tr></table></figure>
<ul>
<li><code>git add</code>命令的<code>all</code>参数,表示保存所有变化(包括新建、修改和删除)。从<code>Git 2.0</code>开始,<code>all</code>是<code>git add</code>的默认参数,所以也可以用<code>git add .</code>代替。</li>
<li><code>git status</code>命令,用来查看发生变动的文件。</li>
<li><code>git commit</code>命令的<code>verbose</code>参数,会列出<code>diff</code>的结果。</li>
</ul>
<h3 id="第三步-撰写提交信息"><a href="#第三步-撰写提交信息" class="headerlink" title="第三步:撰写提交信息"></a>第三步:撰写提交信息</h3><p>提交<code>commit</code>时,必须给出完整扼要的提交信息,下面是一个范本。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Present-tense summary under 50 characters</div><div class="line">* More information about commit (under 72 characters).</div><div class="line">* More information about commit (under 72 characters).</div><div class="line">http://project.management-system.com/ticket/123</div></pre></td></tr></table></figure>
<p>第一行是不超过<code>50</code>个字的提要,然后空一行,罗列出改动原因、主要变动、以及需要注意的问题。最后,提供对应的网址(比如<code>Bug ticket</code>)。</p>
<h3 id="第四步-与主干同步"><a href="#第四步-与主干同步" class="headerlink" title="第四步:与主干同步"></a>第四步:与主干同步</h3><p>分支的开发过程中,要经常与主干保持同步。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git fetch origin</div><div class="line">$ git rebase origin/master</div></pre></td></tr></table></figure>
<h3 id="第五步-合并commit-可选"><a href="#第五步-合并commit-可选" class="headerlink" title="第五步:合并commit(可选)"></a>第五步:合并commit(可选)</h3><p>分支开发完成后,很可能有一堆<code>commit</code>,但是合并到主干的时候,往往希望只有一个(或最多两三个)<code>commit</code>,这样不仅清晰,也容易管理。</p>
<p>那么,怎样才能将多个<code>commit</code>合并呢?这就要用到<code>git rebase</code>命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git rebase -i origin/master</div></pre></td></tr></table></figure>
<p><code>git rebase</code>命令的<code>i</code>参数表示互动(interactive),这时<code>git</code>会打开一个互动界面,进行下一步操作。</p>
<p>下面采用<a href="https://robots.thoughtbot.com/git-interactive-rebase-squash-amend-rewriting-history" target="_blank" rel="external">Tute Costa</a>的例子,来解释怎么合并<code>commit</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">pick 07c5abd Introduce OpenPGP and teach basic usage</div><div class="line">pick de9b1eb Fix PostChecker::Post#urls</div><div class="line">pick 3e7ee36 Hey kids, stop all the highlighting</div><div class="line">pick fa20af3 git interactive rebase, squash, amend</div><div class="line"></div><div class="line"># Rebase 8db7e8b..fa20af3 onto 8db7e8b</div><div class="line">#</div><div class="line"># Commands:</div><div class="line">#  p, pick = use commit</div><div class="line">#  r, reword = use commit, but edit the commit message</div><div class="line">#  e, edit = use commit, but stop for amending</div><div class="line">#  s, squash = use commit, but meld into previous commit</div><div class="line">#  f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</div><div class="line">#  x, exec = run command (the rest of the line) using shell</div><div class="line">#</div><div class="line"># These lines can be re-ordered; they are executed from top to bottom.</div><div class="line">#</div><div class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</div><div class="line">#</div><div class="line"># However, if you remove everything, the rebase will be aborted.</div><div class="line">#</div><div class="line"># Note that empty commits are commented out</div></pre></td></tr></table></figure>
<p>上面的互动界面,先列出当前分支最新的4个<code>commit</code>(越下面越新)。每个<code>commit</code>前面有一个操作命令,默认是<code>pick</code>,表示该行<code>commit</code>被选中,要进行<code>rebase</code>操作。</p>
<p>4个<code>commit</code>的下面是一大堆注释,列出可以使用的命令。</p>
<ul>
<li><code>pick</code>:正常选中</li>
<li><code>reword</code>:选中,并且修改提交信息;</li>
<li><code>edit</code>:选中,<code>rebase</code>时会暂停,允许你修改这个<code>commit</code>(参考这里)</li>
<li><code>squash</code>:选中,会将当前<code>commit</code>与上一个<code>commit</code>合并</li>
<li><code>fixup</code>:与<code>squash</code>相同,但不会保存当前<code>commit</code>的提交信息</li>
<li><code>exec</code>:执行其他<code>shell</code>命令</li>
</ul>
<p>上面这6个命令当中,<code>squash</code>和<code>fixup</code>可以用来合并commit。先把需要合并的<code>commit</code>前面的动词,改成<code>squash</code>(或者s)。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pick 07c5abd Introduce OpenPGP and teach basic usage</div><div class="line">s de9b1eb Fix PostChecker::Post#urls</div><div class="line">s 3e7ee36 Hey kids, stop all the highlighting</div><div class="line">pick fa20af3 git interactive rebase, squash, amend</div></pre></td></tr></table></figure>
<p>这样一改,执行后,当前分支只会剩下两个<code>commit</code>。第二行和第三行的<code>commit</code>,都会合并到第一行的<code>commit</code>。提交信息会同时包含,这三个<code>commit</code>的提交信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># This is a combination of 3 commits.</div><div class="line"># The first commit&apos;s message is:</div><div class="line">Introduce OpenPGP and teach basic usage</div><div class="line"># This is the 2nd commit message:</div><div class="line">Fix PostChecker::Post#urls</div><div class="line"># This is the 3rd commit message:</div><div class="line">Hey kids, stop all the highlighting</div></pre></td></tr></table></figure>
<p>如果将第三行的<code>squash</code>命令改成<code>fixup</code>命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pick 07c5abd Introduce OpenPGP and teach basic usage</div><div class="line">s de9b1eb Fix PostChecker::Post#urls</div><div class="line">f 3e7ee36 Hey kids, stop all the highlighting</div><div class="line">pick fa20af3 git interactive rebase, squash, amend</div></pre></td></tr></table></figure>
<p>运行结果相同,还是会生成两个<code>commit</code>,第二行和第三行的<code>commit</code>,都合并到第一行的<code>commit</code>。但是,新的提交信息里面,第三行<code>commit</code>的提交信息,会被注释掉。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># This is a combination of 3 commits.</div><div class="line"># The first commit&apos;s message is:</div><div class="line">Introduce OpenPGP and teach basic usage</div><div class="line"># This is the 2nd commit message:</div><div class="line">Fix PostChecker::Post#urls</div><div class="line"># This is the 3rd commit message:</div><div class="line"># Hey kids, stop all the highlighting</div></pre></td></tr></table></figure>
<p><code>squash</code>和<code>fixup</code>命令,还可以当作命令行参数使用,自动合并<code>commit</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git commit --fixup</div><div class="line">$ git rebase -i --autosquash</div></pre></td></tr></table></figure>
<p>这个用法请参考<a href="http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html" target="_blank" rel="external">这篇文章</a>,这里就不解释了。</p>
<h3 id="第六步-推送到远程仓库"><a href="#第六步-推送到远程仓库" class="headerlink" title="第六步:推送到远程仓库"></a>第六步:推送到远程仓库</h3><p>合并<code>commit</code>后,就可以推送当前分支到远程仓库了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push --force origin myfeature</div></pre></td></tr></table></figure>
<p><code>git push</code>命令要加上<code>force</code>参数,因为<code>rebase</code>以后,分支历史改变了,跟远程分支不一定兼容,有可能要强行推送(参见<a href="http://willi.am/blog/2014/08/12/the-dark-side-of-the-force-push/" target="_blank" rel="external">这里</a>)。</p>
<h3 id="第七步-发出Pull-Request"><a href="#第七步-发出Pull-Request" class="headerlink" title="第七步:发出Pull Request"></a>第七步:发出Pull Request</h3><p>提交到远程仓库以后,就可以发出<code>Pull Request</code>到<code>master</code>分支,然后请求别人进行代码<code>review</code>,确认可以合并到<code>master</code>。</p>
<p>(完)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;团队开发中，遵循一个合理、清晰的&lt;code&gt;Git&lt;/code&gt;使用流程，是非常重要的。&lt;/p&gt;
&lt;p&gt;否则，每个人都提交一堆杂乱无章的&lt;code&gt;commit&lt;/code&gt;，项目很快就会变得难以协调和维护。&lt;/p&gt;
&lt;p&gt;下面是&lt;a href=&quot;https://githu
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Git" scheme="http://ljgabc.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>欢乐海岸</title>
    <link href="http://ljgabc.com/2015/07/25/2015-07-25-%E6%AC%A2%E4%B9%90%E6%B5%B7%E5%B2%B8/"/>
    <id>http://ljgabc.com/2015/07/25/2015-07-25-欢乐海岸/</id>
    <published>2015-07-25T13:55:13.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2015-07-25/1.jpg" alt="1"></p>
<p><img src="/images/2015-07-25/2.jpg" alt="2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2015-07-25/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-07-25/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>在Android上运行Linux系统和软件</title>
    <link href="http://ljgabc.com/2015/07/18/2015-07-18-%E5%9C%A8Android%E4%B8%8A%E8%BF%90%E8%A1%8CLinux%E7%B3%BB%E7%BB%9F%E5%92%8C%E8%BD%AF%E4%BB%B6/"/>
    <id>http://ljgabc.com/2015/07/18/2015-07-18-在Android上运行Linux系统和软件/</id>
    <published>2015-07-18T08:22:46.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<p><code>chroot</code>，即<code>change root directory</code>(更改<code>root</code>目录)。在<code>linux</code>系统中，系统默认的目录结构都是以<code>/</code>，即是以根(root)开始的。而在使用<code>chroot</code>之后，系统的目录结构将以指定的位置作为<code>/</code>位置。</p>
<p>在<code>Android</code>系统中运行<code>Linux</code>系统的核心就是<code>chroot</code>命令。</p>
<p><strong>步骤</strong></p>
<h3 id="1-准备文件系统"><a href="#1-准备文件系统" class="headerlink" title="1 准备文件系统"></a>1 准备文件系统</h3><p>将文件系统拷贝到Android系统中，如<code>/sdcard/linuxfs</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt; ls /sdcard/linuxfs</div><div class="line">bin  dev  etc  linuxrc  lib  proc  root  sbin  sys  tmp  usr  var</div></pre></td></tr></table></figure>
<h3 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2 准备工作"></a>2 准备工作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mount -o bind /dev/ /sdcard/linuxfs/dev/</div><div class="line">mount -t proc proc /sdcard/linuxfs/proc/</div><div class="line">mount -t sysfs sysfs /sdcard/linuxfs/sys/</div></pre></td></tr></table></figure>
<h3 id="3-chroot"><a href="#3-chroot" class="headerlink" title="3 chroot"></a>3 chroot</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">busybox chroot /sdcard/linuxfs /linuxrc</div><div class="line">或</div><div class="line">busybox chroot /sdcard/linuxfs /bin/sh</div></pre></td></tr></table></figure>
<p>完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;chroot&lt;/code&gt;，即&lt;code&gt;change root directory&lt;/code&gt;(更改&lt;code&gt;root&lt;/code&gt;目录)。在&lt;code&gt;linux&lt;/code&gt;系统中，系统默认的目录结构都是以&lt;code&gt;/&lt;/code&gt;，即是以根(roo
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Maker&#39;s Day</title>
    <link href="http://ljgabc.com/2015/07/06/2015-07-06-Maker-s-Day/"/>
    <id>http://ljgabc.com/2015/07/06/2015-07-06-Maker-s-Day/</id>
    <published>2015-07-06T11:39:47.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Maker Day - 每年一次，N 小时，小组协作，高效完成一款产品(模块、小制作等)，可多小组PK </li>
<li>Tink Day - 每个月抽一天时间，一起完善技术文档，分析有趣的问题，优化代码，解决 BUG </li>
<li>Outing - 知乎的 Outing 是场挑战，骑行爬上垂直攀升 1000 米的山坡，或是草原负重徒步 30 公里。挑战完成，你会发现自己可以做到比想象更多</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Maker Day - 每年一次，N 小时，小组协作，高效完成一款产品(模块、小制作等)，可多小组PK &lt;/li&gt;
&lt;li&gt;Tink Day - 每个月抽一天时间，一起完善技术文档，分析有趣的问题，优化代码，解决 BUG &lt;/li&gt;
&lt;li&gt;Outing - 知
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>Python操作Excel</title>
    <link href="http://ljgabc.com/2015/06/17/2015-06-17-Python%E6%93%8D%E4%BD%9CExcel/"/>
    <id>http://ljgabc.com/2015/06/17/2015-06-17-Python操作Excel/</id>
    <published>2015-06-17T12:49:05.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<p><code>Python</code>操作<code>Excel</code>文件需要用到<code>xlrd</code>库，可以使用<code>pip</code>安装。</p>
<p>使用方法非常简单</p>
<ol>
<li><p>打开文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f = open_workbook(filepath)</div></pre></td></tr></table></figure>
</li>
<li><p>获取表</p>
</li>
</ol>
<p>一个excel可以有多个sheet</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># 列出所有的sheet</div><div class="line">sheets = f.sheets()</div><div class="line">for sheet in sheets:</div><div class="line">  print sheet.name</div><div class="line"></div><div class="line"># 获取指定位置的sheet</div><div class="line">sheet = f.sheet_by_index(0)</div><div class="line">或</div><div class="line">sheet = sheets[0]</div><div class="line"></div><div class="line"># 获取指定名字的sheet</div><div class="line">sheet = f.sheet_by_name(sheetname)</div></pre></td></tr></table></figure>
<ol>
<li>表格操作</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 获取行数、列数</div><div class="line">nrows = sheet.nrows</div><div class="line">ncols = sheet.ncols</div><div class="line"></div><div class="line"># 获取整行、整列的值(list)</div><div class="line">row_values = sheet.row_values(nRow)</div><div class="line">col_values = sheet.col_values(nCol)</div><div class="line"></div><div class="line"># 获取单元格的值</div><div class="line">cell_value = sheet.cell(nRow, nCol).value</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Python&lt;/code&gt;操作&lt;code&gt;Excel&lt;/code&gt;文件需要用到&lt;code&gt;xlrd&lt;/code&gt;库，可以使用&lt;code&gt;pip&lt;/code&gt;安装。&lt;/p&gt;
&lt;p&gt;使用方法非常简单&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开文件&lt;/p&gt;
&lt;figure 
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>scp断点续传</title>
    <link href="http://ljgabc.com/2015/06/15/2015-06-15-scp%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/"/>
    <id>http://ljgabc.com/2015/06/15/2015-06-15-scp断点续传/</id>
    <published>2015-06-15T11:04:49.000Z</published>
    <updated>2016-11-20T14:29:41.206Z</updated>
    
    <content type="html"><![CDATA[<p><code>scp</code>是通过<code>ssh</code>协议传输数据，但是其不支持断点续传。也就是说，如果是想传输一个很大的数据，通过<code>scp</code>拷贝时，如果遇到网络中断等问题，只能从头开始传输，而不能接着原来的地方继续传输。</p>
<p>遇到这种情况，可以使用<code>rsync</code>工具，实现意外中断后，下次继续传，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">USER=xxxx</div><div class="line">PORT=xxxx</div><div class="line">HOST=xxx.xxx.xxx.xxx</div><div class="line"></div><div class="line">rsync -vhP -e &quot;ssh -p $&#123;PORT&#125;&quot; $&#123;USER&#125;@$&#123;HOST&#125;:/path/to/file /path/to/file</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;scp&lt;/code&gt;是通过&lt;code&gt;ssh&lt;/code&gt;协议传输数据，但是其不支持断点续传。也就是说，如果是想传输一个很大的数据，通过&lt;code&gt;scp&lt;/code&gt;拷贝时，如果遇到网络中断等问题，只能从头开始传输，而不能接着原来的地方继续传输。&lt;/p&gt;
&lt;p
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="scp" scheme="http://ljgabc.com/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>Makefile获取编译时间及版本信息</title>
    <link href="http://ljgabc.com/2015/06/09/2015-06-09-Makefile%E8%8E%B7%E5%8F%96%E7%BC%96%E8%AF%91%E6%97%B6%E9%97%B4%E5%8F%8A%E7%89%88%E6%9C%AC%E4%BF%A1%E6%81%AF/"/>
    <id>http://ljgabc.com/2015/06/09/2015-06-09-Makefile获取编译时间及版本信息/</id>
    <published>2015-06-09T11:13:50.000Z</published>
    <updated>2016-11-20T14:29:41.205Z</updated>
    
    <content type="html"><![CDATA[<p>在<code>Makefile</code>中获取编译时间及版本信息，</p>
<p>在<code>Makefile</code>中添加以下语句,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 编译时间</div><div class="line">COMPILE_TIME = $(shell date +&quot;%Y-%M-%d %H:%M:%S&quot;)</div><div class="line">CFLAGS += &quot;\&quot;$(COMPILE_TIME)\&quot;&quot;</div><div class="line"></div><div class="line"># SVN版本号</div><div class="line">SVN_REVIVION = $(shell svnversion -n)</div><div class="line">CFLAGS += &quot;\&quot;$(SVN_REVIVION)\&quot;&quot;</div><div class="line"></div><div class="line"># GIT版本号</div><div class="line">GIT_REVISION = $(shell git show -s --pretty=format:%h)</div><div class="line">CFLAGS += &quot;\&quot;$(GIT_REVISION)\&quot;&quot;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;code&gt;Makefile&lt;/code&gt;中获取编译时间及版本信息，&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Makefile&lt;/code&gt;中添加以下语句,&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Makefile" scheme="http://ljgabc.com/tags/Makefile/"/>
    
      <category term="SVN" scheme="http://ljgabc.com/tags/SVN/"/>
    
      <category term="Git" scheme="http://ljgabc.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Python访问I2C设备</title>
    <link href="http://ljgabc.com/2015/06/06/2015-06-06-Python%E8%AE%BF%E9%97%AEI2C%E8%AE%BE%E5%A4%87/"/>
    <id>http://ljgabc.com/2015/06/06/2015-06-06-Python访问I2C设备/</id>
    <published>2015-06-06T03:04:51.000Z</published>
    <updated>2016-11-20T14:29:41.205Z</updated>
    
    <content type="html"><![CDATA[<p>Python访问I2C设备需要用到smbus扩展，附件是已经编译好的适用于ARM EABI的扩展，直接跟脚本放在相同的目录即可使用。</p>
<p>Python访问I2C设备本质上还是通过/dev/i2c-<em>节点来操作I2C设备的，所以，在操作之前，必须在/dev/i2c-</em>节点。</p>
<ul>
<li><p>使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">import smbus</div><div class="line"></div><div class="line">bus = smbus.SMBus(0)  # 0 对应/dev/i2c-0，依此类推</div><div class="line"></div><div class="line"># 读写24LC02 EEPROM方法</div><div class="line">bus.write_byte_data(SLAVE_ADDR, addr, val)</div><div class="line">bus.read_byte_data(SLAVE_ADDR, addr)</div><div class="line"></div><div class="line">bus.close</div></pre></td></tr></table></figure>
</li>
<li><p>常用方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">read_byte(SLAVE_ADDR)</div><div class="line">write_byte(SLAVE_ADDR, val)</div><div class="line">read_byte_data(SLAVE_ADDR, addr)</div><div class="line">write_byte_data(SLAVE_ADDR, addr, val)</div><div class="line">read_word_data(SLAVE_ADDR, addr)</div><div class="line">write_word_data(SLAVE_ADDR, addr, val)</div><div class="line">read_block_data(SLAVE_ADDR, addr)</div><div class="line">write_block_data(SLAVE_ADDR, addr, [vals])</div></pre></td></tr></table></figure>
</li>
<li><p>Python读写EEPROM库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">&apos;&apos;&apos;access to eeprom 24lc02&apos;&apos;&apos;</div><div class="line"></div><div class="line">import sys, argparse</div><div class="line">import smbus</div><div class="line"></div><div class="line"># /dev/i2c-1</div><div class="line">EEPROM_SLOT = 1</div><div class="line">EEPROM_ADDR = 0x51</div><div class="line"></div><div class="line">def mw(addr, vals):</div><div class="line">    bus = smbus.SMBus(EEPROM_SLOT)</div><div class="line">    bus.write_byte_data(EEPROM_ADDR, addr, vals)</div><div class="line">    bus.close()</div><div class="line">    return 0</div><div class="line"></div><div class="line">def md(addr):</div><div class="line">    bus = smbus.SMBus(EEPROM_SLOT)</div><div class="line">    ret = bus.read_byte_data(EEPROM_ADDR, addr)</div><div class="line">    bus.close()</div><div class="line">    return ret</div><div class="line"></div><div class="line">def main():</div><div class="line">    parser = argparse.ArgumentParser(description=&apos;Read or Write EEPROM.&apos;)</div><div class="line"></div><div class="line">    parser.add_argument(&apos;-r&apos;, dest=&apos;read&apos;, </div><div class="line">            type=(lambda x: int(x,0)), metavar=&apos;ADDR&apos;,</div><div class="line">            help=&apos;read one word from ADDR&apos;);</div><div class="line"></div><div class="line">    parser.add_argument(&apos;-w&apos;, dest=&apos;write&apos;, nargs=2,</div><div class="line">            type=(lambda x: int(x,0)), metavar=(&apos;ADDR&apos;, &apos;VALUE&apos;),</div><div class="line">            help=&apos;write VALUE to ADDR&apos;);</div><div class="line"></div><div class="line">    args = parser.parse_args()</div><div class="line"></div><div class="line">    if args.write is not None and args.read is not None:</div><div class="line">        parser.print_help()</div><div class="line">        return -1</div><div class="line">    elif args.write is None and args.read is None:</div><div class="line">        parser.print_help()</div><div class="line">        return -1</div><div class="line">    elif args.write is not None and len(args.write) == 1:</div><div class="line">        parser.print_help()</div><div class="line">        print &apos;write at least one value&apos;</div><div class="line">        return -1</div><div class="line">    elif args.write is not None:</div><div class="line">        ADDR = args.write[0]</div><div class="line">        VALUES = args.write[1]</div><div class="line">        return mw(ADDR, VALUES);</div><div class="line">    else:</div><div class="line">        ADDR = args.read</div><div class="line">        print &apos;%08X: %08X&apos; % (ADDR, md(ADDR))</div><div class="line">        return 0</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    sys.exit(main())</div></pre></td></tr></table></figure>
</li>
<li><p>附件<br>[smbus.so.tar][1]</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python访问I2C设备需要用到smbus扩展，附件是已经编译好的适用于ARM EABI的扩展，直接跟脚本放在相同的目录即可使用。&lt;/p&gt;
&lt;p&gt;Python访问I2C设备本质上还是通过/dev/i2c-&lt;em&gt;节点来操作I2C设备的，所以，在操作之前，必须在/dev/i
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
      <category term="I2C" scheme="http://ljgabc.com/tags/I2C/"/>
    
  </entry>
  
  <entry>
    <title>Python序列化模块Pickle</title>
    <link href="http://ljgabc.com/2015/06/04/2015-06-04-Python%E5%BA%8F%E5%88%97%E5%8C%96%E6%A8%A1%E5%9D%97Pickle/"/>
    <id>http://ljgabc.com/2015/06/04/2015-06-04-Python序列化模块Pickle/</id>
    <published>2015-06-04T12:50:52.000Z</published>
    <updated>2016-11-20T14:29:41.205Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写一个基于文件计数器，脚本每执行一次记一次数，计数结果在文件中存储，用来统计开发板开关机次数。</p>
<blockquote>
<p><code>pickle</code>模块实现了一个简单的的Python对象序列化和反序列化的高效算法。</p>
</blockquote>
<p>可以方便的存储和读取Python对象到文件中。</p>
<p>计数器代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line"></div><div class="line">import pickle</div><div class="line"></div><div class="line">FILE = r&apos;counter.pickle&apos;</div><div class="line"></div><div class="line">def counter(step):</div><div class="line">    &apos;&apos;&apos;基于文件的计数器，每调用一次，记step次数&apos;&apos;&apos;</div><div class="line"></div><div class="line">    # 如果文件存在，则从文件读出，否则counter置为0</div><div class="line">    try:</div><div class="line">        with open(FILE, &apos;rb&apos;) as f:</div><div class="line">            counter = pickle.load(f)</div><div class="line">    except IOError:</div><div class="line">        counter = 0</div><div class="line"></div><div class="line">    # 计数</div><div class="line">    counter += step</div><div class="line"></div><div class="line">    # 将counter写入文件，不存在则创建</div><div class="line">    try:</div><div class="line">        with open(FILE, &apos;wb+&apos;) as f:</div><div class="line">            pickle.dump(counter, f)</div><div class="line">    except IOError:</div><div class="line">        print &apos;Error Open &apos; + FILE + &quot; for write&quot;</div><div class="line">        return -1</div><div class="line"></div><div class="line">    return 0</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写一个基于文件计数器，脚本每执行一次记一次数，计数结果在文件中存储，用来统计开发板开关机次数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;pickle&lt;/code&gt;模块实现了一个简单的的Python对象序列化和反序列化的高效算法。&lt;/p&gt;
&lt;/blockqu
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>NFS服务器权限</title>
    <link href="http://ljgabc.com/2015/05/27/2015-05-27-NFS%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%83%E9%99%90/"/>
    <id>http://ljgabc.com/2015/05/27/2015-05-27-NFS服务器权限/</id>
    <published>2015-05-27T11:04:53.000Z</published>
    <updated>2016-11-20T14:29:41.205Z</updated>
    
    <content type="html"><![CDATA[<p>假设NFS服务器时，如果公司内没有<code>OpenLDAP</code>或<code>Active Directory</code>等帐号管理服务，这样服务器上并没有每个访问用户的<code>UID</code>和<code>GID</code>，也就无法判断该客户端用户是否有对文件的读写权限。</p>
<p>一个解决方案就是给所有客户端设置相同的<code>UID</code>和<code>GID</code>，不管客户端是什么用户，实现方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/home/ftp/images *(rw,sync,no_subtree_check,all_squash,anonuid=1000,anongid=1000)</div></pre></td></tr></table></figure>
<p>将所有客户端的访问看作是uid=1000,gid=1000用户的访问。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设NFS服务器时，如果公司内没有&lt;code&gt;OpenLDAP&lt;/code&gt;或&lt;code&gt;Active Directory&lt;/code&gt;等帐号管理服务，这样服务器上并没有每个访问用户的&lt;code&gt;UID&lt;/code&gt;和&lt;code&gt;GID&lt;/code&gt;，也就无法判断该客户端用
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="NFS" scheme="http://ljgabc.com/tags/NFS/"/>
    
  </entry>
  
  <entry>
    <title>Python输入参数解析模块</title>
    <link href="http://ljgabc.com/2015/05/26/2015-05-26-Python%E8%BE%93%E5%85%A5%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E6%A8%A1%E5%9D%97/"/>
    <id>http://ljgabc.com/2015/05/26/2015-05-26-Python输入参数解析模块/</id>
    <published>2015-05-26T12:57:55.000Z</published>
    <updated>2016-11-20T14:29:41.205Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>argparse — Parser for command-line options, arguments and sub-commands</p>
</blockquote>
<p>先举个例子：<br>实现读、写寄存器两个功能，<code>-r</code>表示读，<code>-w</code>表示写。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">usage: mdw.py [-h] [-r ADDR [NUM ...]] [-w ADDR [VALUES ...]]</div><div class="line"></div><div class="line">Read or Write ARM Memory.</div><div class="line"></div><div class="line">optional arguments:</div><div class="line">  -h, --help            show this help message and exit</div><div class="line">  -r ADDR [NUM ...]     read NUM words from ADDR</div><div class="line">  -w ADDR [VALUES ...]  write VALUES to ADDR</div></pre></td></tr></table></figure></p>
<p>实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">def main():</div><div class="line">    parser = argparse.ArgumentParser(decription=&apos;Read or Write ARM Memory.&apos;)</div><div class="line"></div><div class="line">    parser.add_argument(&apos;-r&apos;, dest=&apos;read&apos;, nargs=&apos;+&apos;,</div><div class="line">            type=(lambda x: int(x,0)), metavar=(&apos;ADDR&apos;, &apos;NUM&apos;),</div><div class="line">            help=&apos;read NUM words from ADDR&apos;);</div><div class="line"></div><div class="line">    parser.add_argument(&apos;-w&apos;, dest=&apos;write&apos;, nargs=&apos;+&apos;,</div><div class="line">            type=(lambda x: int(x,0)), metavar=(&apos;ADDR&apos;, &apos;VALUES&apos;),</div><div class="line">            help=&apos;write VALUES to ADDR&apos;);</div><div class="line"></div><div class="line">    args = parser.parse_args()</div><div class="line"></div><div class="line">    if args.write is not None and args.read is not None:</div><div class="line">        parser.print_help()</div><div class="line">        return -1</div><div class="line">    elif args.write is None and args.read is None:</div><div class="line">        parser.print_help()</div><div class="line">        return -1</div><div class="line">    elif args.write is not None and len(args.write) == 1:</div><div class="line">        parser.print_help()</div><div class="line">        print &apos;write at least one value&apos;</div><div class="line">        return -1</div><div class="line">    elif args.write is not None:</div><div class="line">        ADDR = args.write[0]</div><div class="line">        VALUES = args.write[1:]</div><div class="line">        return mw(ADDR, VALUES);</div><div class="line">    else args.read is not None:</div><div class="line">        ADDR = args.read[0]</div><div class="line">        if len(args.read) == 1 :</div><div class="line">            print &apos;%08X: %08X&apos; % (ADDR, md(ADDR)[0])</div><div class="line">        else:</div><div class="line">            NUM = args.read[1]</div><div class="line">            for val in md(ADDR, NUM) :</div><div class="line">                print &apos;%08X: %08X&apos; % (ADDR, val)</div><div class="line">                ADDR += 4</div><div class="line">        return 0</div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    sys.exit(main())</div></pre></td></tr></table></figure></p>
<p>关键部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">parser.add_argument(&apos;-r&apos;, dest=&apos;read&apos;, nargs=&apos;+&apos;,</div><div class="line">            type=(lambda x: int(x,0)), metavar=(&apos;ADDR&apos;, &apos;NUM&apos;),</div><div class="line">            help=&apos;read NUM words from ADDR&apos;);</div></pre></td></tr></table></figure></p>
<p>其中:<br><code>-r</code>: 代表参数名<br><code>dest=&#39;read&#39;</code>: 参数解析后的名称<br><code>nargs=&#39;+&#39;</code>: 表示<code>-r</code>至少还需要一个参数<br><code>type=(lambda x: int(x,0))</code>: 表示可输入的参数是10进制或16进制整型<br><code>metavar=(&#39;ADDR&#39;, &#39;NUM&#39;)</code>: 在打印help信息时参数名</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;argparse — Parser for command-line options, arguments and sub-commands&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;先举个例子：&lt;br&gt;实现读、写寄存器两个功能，&lt;code&gt;-r&lt;
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Typecho折腾备忘</title>
    <link href="http://ljgabc.com/2015/05/23/2015-05-23-Typecho%E6%8A%98%E8%85%BE%E5%A4%87%E5%BF%98/"/>
    <id>http://ljgabc.com/2015/05/23/2015-05-23-Typecho折腾备忘/</id>
    <published>2015-05-23T14:18:41.000Z</published>
    <updated>2016-11-20T14:29:41.205Z</updated>
    
    <content type="html"><![CDATA[<p>#1 安装Nginx + HHVM</p>
<p>环境:<code>ubuntu 14.04</code></p>
<p><strong>安装Nginx</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx</div></pre></td></tr></table></figure></p>
<p><strong>安装HHVM</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">wget -O - sudo apt-key add</div><div class="line">sudo add-apt-repository &apos;deb http://dl.hhvm.com/ubuntu trusty main&apos;</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install hhvm</div><div class="line">sudo /usr/share/hhvm/install_fastcgi.sh</div></pre></td></tr></table></figure>
<h1 id="2-配置Nginx-HHVM"><a href="#2-配置Nginx-HHVM" class="headerlink" title="2 配置Nginx + HHVM"></a>2 配置Nginx + HHVM</h1><p><strong>Nginx</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/nginx/site-available/default</div></pre></td></tr></table></figure></p>
<p>修改成类似这个样子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 80;</div><div class="line"></div><div class="line">    root /var/www;</div><div class="line">    index index.php index.html index.htm;</div><div class="line"></div><div class="line">    include hhvm.conf;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        if (-f $request_filename/index.html)&#123;</div><div class="line">            rewrite (.*) $1/index.html break;</div><div class="line">        &#125;</div><div class="line">        if (-f $request_filename/index.php)&#123;</div><div class="line">            rewrite (.*) $1/index.php;</div><div class="line">        &#125;</div><div class="line">        if (!-f $request_filename)&#123;</div><div class="line">            rewrite (.*) /index.php;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page 404 /404.html;</div><div class="line"></div><div class="line">    # redirect server error pages to the static page /50x.html</div><div class="line">    #</div><div class="line">    error_page 500 502 503 504 /50x.html;</div><div class="line">    location = /50x.html &#123;</div><div class="line">        root /usr/share/nginx/html;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>HHVM</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/nginx/hhvm.conf</div></pre></td></tr></table></figure></p>
<p>修改成类似这个样子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">location ~ .*\.(hh|php)(\/.*)*$ &#123;</div><div class="line">    fastcgi_split_path_info ^(.+\.php)(/.+)$;</div><div class="line">    fastcgi_keep_conn on;</div><div class="line">    fastcgi_pass   127.0.0.1:9000;</div><div class="line">    fastcgi_index  index.php;</div><div class="line">    fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">    include        fastcgi_params;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>大功告成。</p>
<h1 id="3-折腾"><a href="#3-折腾" class="headerlink" title="3 折腾"></a>3 折腾</h1><p><strong>修改归档显示方式</strong><br>打开sidebar.php，修改代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;?php $this-&gt;widget(&apos;Widget_Contents_Post_Date&apos;, &apos;type=month&amp;format=Y年m月&apos;)</div><div class="line">            -&gt;parse(&apos;&lt;li&gt;&lt;a href=&quot;&#123;permalink&#125;&quot;&gt;&#123;date&#125;&lt;/a&gt;&lt;/li&gt;&apos;); ?&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#1 安装Nginx + HHVM&lt;/p&gt;
&lt;p&gt;环境:&lt;code&gt;ubuntu 14.04&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;安装Nginx&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Typecho" scheme="http://ljgabc.com/tags/Typecho/"/>
    
      <category term="HHVM" scheme="http://ljgabc.com/tags/HHVM/"/>
    
  </entry>
  
  <entry>
    <title>Android下配置以太网IP地址</title>
    <link href="http://ljgabc.com/2015/05/19/2015-05-19-Android%E4%B8%8B%E9%85%8D%E7%BD%AE%E4%BB%A5%E5%A4%AA%E7%BD%91IP%E5%9C%B0%E5%9D%80/"/>
    <id>http://ljgabc.com/2015/05/19/2015-05-19-Android下配置以太网IP地址/</id>
    <published>2015-05-19T10:55:35.000Z</published>
    <updated>2016-11-20T14:29:41.205Z</updated>
    
    <content type="html"><![CDATA[<p>需要在命令行下配置，并取得root权限。</p>
<h1 id="1-IP-ADDR"><a href="#1-IP-ADDR" class="headerlink" title="1 IP ADDR"></a>1 IP ADDR</h1><h2 id="1-1-DHCP"><a href="#1-1-DHCP" class="headerlink" title="1.1 DHCP"></a>1.1 DHCP</h2><p>使用以下命令配置<code>eth0</code>使用<code>dhcp</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ifconfig eth0 up</div><div class="line">netcfg eth0 dhcp</div></pre></td></tr></table></figure></p>
<h2 id="1-2-STATIC-IP"><a href="#1-2-STATIC-IP" class="headerlink" title="1.2 STATIC IP"></a>1.2 STATIC IP</h2><p>使用以下命令设置一个静态IP和一个子网掩码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig eth0 [YOUR_IP_ADDRESS] netmask [NETMASK] up</div></pre></td></tr></table></figure></p>
<p>然后使用以下命令配置网关：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip route add default via [GATEWAY_IP] dev eth0</div></pre></td></tr></table></figure></p>
<h1 id="2-DNS"><a href="#2-DNS" class="headerlink" title="2 DNS"></a>2 DNS</h1><p>DNS使用通过Android环境属性配置的，而不是resolv.conf文件。配置命令是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setprop net.dns1 [DNS_IP_ADDRESS1]</div><div class="line">setprop net.dns2 [DNS_IP_ADDRESS2]</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;需要在命令行下配置，并取得root权限。&lt;/p&gt;
&lt;h1 id=&quot;1-IP-ADDR&quot;&gt;&lt;a href=&quot;#1-IP-ADDR&quot; class=&quot;headerlink&quot; title=&quot;1 IP ADDR&quot;&gt;&lt;/a&gt;1 IP ADDR&lt;/h1&gt;&lt;h2 id=&quot;1-1-DHCP&quot;
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Python串口通信</title>
    <link href="http://ljgabc.com/2015/05/16/2015-05-16-Python%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/"/>
    <id>http://ljgabc.com/2015/05/16/2015-05-16-Python串口通信/</id>
    <published>2015-05-16T14:20:12.000Z</published>
    <updated>2016-11-20T14:29:41.205Z</updated>
    
    <content type="html"><![CDATA[<p>Python下进行串口通信要用到<a href="http://pyserial.sourceforge.net/" target="_blank" rel="external">pySerial</a>。</p>
<blockquote>
<p>This module encapsulates the access for the serial port. It provides backends for Python running on Windows, Linux, BSD (possibly any POSIX compliant system), Jython and IronPython (.NET and Mono). The module named “serial” automatically selects the appropriate backend.</p>
<p>这个模块封装了串口操作。支持Windows、LinuxBSD（其他POSIX兼容系统）、Jython和IronPython(.NET及Mono)等。</p>
</blockquote>
<p>##特性</p>
<ul>
<li>所有平台上统一的接口</li>
<li>通过Python属性即可配置端口</li>
<li>支持不通的字长、停止位、校验位和基于RTSD/CTS及(或)Xon/Xoff的流控</li>
<li>支持读取超时</li>
<li>类文件读写API，常见的read、write等接口（也支持readline等）</li>
<li>100% Python实现</li>
<li>使用二进制模式传输，没有<code>NULL</code>字符及<code>CR-LF</code>等，从而兼容<code>io</code>库。<br>*</li>
</ul>
<p>##需求</p>
<ul>
<li>Python &gt;= 2.3</li>
<li>Windows平台下需要ctypes支持(从Python 2.5开始是标准库的一部分)</li>
<li>Java/Jython上的 “Java Communications” (JavaComm)或者兼容包</li>
</ul>
<p>##使用方法</p>
<p>####1 打开串口0，模式:“9600,8,N,1”, 无超时:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import serial</div><div class="line">&gt;&gt;&gt; ser = serial.Serial(0)  # 打开串口0</div><div class="line">&gt;&gt;&gt; print ser.name          # check which port was really used</div><div class="line">&gt;&gt;&gt; ser.write(&quot;hello&quot;)      # 写字符串</div><div class="line">&gt;&gt;&gt; ser.close()             # 关闭串口</div></pre></td></tr></table></figure></p>
<p>####2 打开特定的串口，模式：“19200,8,N,1”, 超时：1s:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; ser = serial.Serial(&apos;/dev/ttyS1&apos;, 19200, timeout=1)</div><div class="line">&gt;&gt;&gt; x = ser.read()          # 读一个字节</div><div class="line">&gt;&gt;&gt; s = ser.read(10)        # 读10个字节</div><div class="line">&gt;&gt;&gt; line = ser.readline()   # 读一行</div><div class="line">&gt;&gt;&gt; ser.close()</div></pre></td></tr></table></figure></p>
<p>####4 打开串口1，模式：“38400,8,E,1”, non blocking HW handshaking:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; ser = serial.Serial(1, 38400, timeout=0, parity=serial.PARITY_EVEN, rtscts=1)</div><div class="line">&gt;&gt;&gt; s = ser.read(100)       # read up to one hundred bytes or as much is in the buffer</div></pre></td></tr></table></figure></p>
<p>####5 配置串口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; ser = serial.Serial()</div><div class="line">&gt;&gt;&gt; ser.baudrate = 19200</div><div class="line">&gt;&gt;&gt; ser.port = 0</div><div class="line">&gt;&gt;&gt; ser</div><div class="line">Serial&lt;id=0xa81c10, open=False&gt;(port=&apos;COM1&apos;, baudrate=19200, bytesize=8, parity=&apos;N&apos;, stopbits=1, timeout=None, xonxoff=0, rtscts=0)</div><div class="line">&gt;&gt;&gt; ser.open()</div><div class="line">&gt;&gt;&gt; ser.isOpen()</div><div class="line">True</div><div class="line">&gt;&gt;&gt; ser.close()</div><div class="line">&gt;&gt;&gt; ser.isOpen()</div><div class="line">False</div></pre></td></tr></table></figure></p>
<p>####6 可用方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">open()                  # 打开端口</div><div class="line">close()                 # 立即关闭端口  </div><div class="line">setBaudrate(baudrate)   # change baud rate on an open port  </div><div class="line">inWaiting()             # return the number of chars in the receive buffer  </div><div class="line">read(size=1)            # read &quot;size&quot; characters  </div><div class="line">write(s)                # 把字符串s写到该端口  </div><div class="line">flushInput()            # 清除输入缓存区，放弃所有内容</div><div class="line">flushOutput()           # 清除输出缓冲区，放弃输出  </div><div class="line">sendBreak()             # 发送中断条件  </div><div class="line">setRTS(level=1)         # set RTS line to specified logic level  </div><div class="line">setDTR(level=1)         # set DTR line to specified logic level  </div><div class="line">getCTS()                # return the state of the CTS line  </div><div class="line">getDSR()                # return the state of the DSR line  </div><div class="line">getRI()                 # return the state of the RI line  </div><div class="line">getCD()                 # return the state of the CD line</div></pre></td></tr></table></figure></p>
<p>####7 属性<br><strong>只读</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">portstr                 # 设备名称  </div><div class="line">BAUDRATES               # list of valid baudrates  </div><div class="line">BYTESIZES               # list of valid byte sizes  </div><div class="line">PARITIES                # list of valid parities  </div><div class="line">STOPBITS                # list of valid stop bit widths</div></pre></td></tr></table></figure></p>
<p><strong>下面属性值被更改后端口会重新配置，即使端口已经打开</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">port                    # port name/number as set by the user  </div><div class="line">baudrate                # current baud rate setting  </div><div class="line">bytesize                # byte size in bits  </div><div class="line">parity                  # parity setting  </div><div class="line">stopbits                # stop bit with (1,2)  </div><div class="line">timeout                 # timeout setting  </div><div class="line">xonxoff                 # if Xon/Xoff flow control is enabled  </div><div class="line">rtscts                  # if hardware flow control is enabled</div></pre></td></tr></table></figure></p>
<p>####8 异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">serial.SerialException</div></pre></td></tr></table></figure></p>
<p>####9 常量<br><strong>校验</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">serial.PARITY_NONE  </div><div class="line">serial.PARITY_EVEN  </div><div class="line">serial.PARITY_ODD</div></pre></td></tr></table></figure></p>
<p><strong>停止位</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">serial.STOPBITS_ONE  </div><div class="line">serial.STOPBITS_TWO</div></pre></td></tr></table></figure></p>
<p><strong>字长</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">serial.FIVEBITS  </div><div class="line">serial.SIXBITS  </div><div class="line">serial.SEVENBITS  </div><div class="line">serial.EIGHTBITS</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Python下进行串口通信要用到&lt;a href=&quot;http://pyserial.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pySerial&lt;/a&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This module e
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
      <category term="嵌入式" scheme="http://ljgabc.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设置PCIE配置空间寄存器</title>
    <link href="http://ljgabc.com/2015/05/16/2015-05-16-%E8%AE%BE%E7%BD%AEPCIE%E9%85%8D%E7%BD%AE%E7%A9%BA%E9%97%B4%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <id>http://ljgabc.com/2015/05/16/2015-05-16-设置PCIE配置空间寄存器/</id>
    <published>2015-05-16T10:20:56.000Z</published>
    <updated>2016-11-20T14:29:41.205Z</updated>
    
    <content type="html"><![CDATA[<p>###1 查看</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lspci                    # 查看简要描述信息</div><div class="line">lspci -s mm:mm.m         # 查看特定设备的信息(m代表PCIE节点信息)</div><div class="line">lspci -s mm:mm.m -xxx    # 以16进制查看特定PCI设备配置空间前64Byte的信息</div></pre></td></tr></table></figure>
<p><strong>例子</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">lijg@ubuntudesktop:~$ sudo lspci -s 03:00.0 -xxx</div><div class="line">03:00.0 Ethernet controller: Realtek Semiconductor Co., Ltd. RTL8111/8168/8411 PCI Express Gigabit Ethernet Controller (rev 06)</div><div class="line">00: ec 10 68 81 07 04 10 00 06 00 00 02 10 00 00 00</div><div class="line">10: 01 d0 00 00 00 00 00 00 0c 40 00 f0 00 00 00 00</div><div class="line">20: 0c 00 00 f0 00 00 00 00 00 00 00 00 58 14 00 e0</div><div class="line">30: 00 00 00 00 40 00 00 00 00 00 00 00 0b 01 00 00</div><div class="line">40: 01 50 c3 ff 08 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">50: 05 70 81 00 0c 10 e0 fe 00 00 00 00 71 41 00 00</div><div class="line">60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">70: 10 b0 02 02 c0 8c 90 05 00 50 10 00 11 7c 07 00</div><div class="line">80: 40 00 11 10 00 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">90: 00 00 00 00 1f 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">b0: 11 d0 03 00 04 00 00 00 04 08 00 00 00 00 00 00</div><div class="line">c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">d0: 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">e0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</div><div class="line">f0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</div></pre></td></tr></table></figure></p>
<p>###2 设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setpci    # 设置PCIE配置寄存器</div></pre></td></tr></table></figure></p>
<p>写PCI配置寄存器时，使用<code>地址.位宽=值</code>的语法设置，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">setpci -s 03:00.0 62.B=05   # 配置0x62地址的字节的值为0x05</div><div class="line">setpci -s 03:00.0 62.W=0500 # 配置0x62地址的半字的值为0x0500,等效于，</div><div class="line"></div><div class="line">setpci -s 03:00.0 62.B=00</div><div class="line">setpci -s 03:00.0 63.B=05</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###1 查看&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cla
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="PCIE" scheme="http://ljgabc.com/tags/PCIE/"/>
    
  </entry>
  
  <entry>
    <title>交叉编译glibc-2.19</title>
    <link href="http://ljgabc.com/2015/05/10/2015-05-10-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91glibc-2-19/"/>
    <id>http://ljgabc.com/2015/05/10/2015-05-10-交叉编译glibc-2-19/</id>
    <published>2015-05-10T13:50:49.000Z</published>
    <updated>2016-11-20T14:29:41.205Z</updated>
    
    <content type="html"><![CDATA[<p>glibc编译时必须手动指定优化级别，比如<code>-O2</code>等。<br>```<br>export CFLAGS=”-O2 -U_FORTIFY_SOURCE”<br>export CXXFLAGS=${CFLAGS}<br>libc_cv_ssp=no BUILD_CC=”gcc” CC=”arm-linux-gnueabi-gcc” AR=”arm-linux-gnueabi-ar” RANLIB=”arm-linux-gnueabi-ranlib” ../glibc-2.19/configure –prefix=/usr –host=$HOST –build=$BUILD –disable-profile –enable-kernel=2.6.32 –enable-obsolete-rpc<br>make -j5<br>make DESTDIR=$ROOTFS install</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;glibc编译时必须手动指定优化级别，比如&lt;code&gt;-O2&lt;/code&gt;等。&lt;br&gt;```&lt;br&gt;export CFLAGS=”-O2 -U_FORTIFY_SOURCE”&lt;br&gt;export CXXFLAGS=${CFLAGS}&lt;br&gt;libc_cv_ssp=no BU
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="嵌入式" scheme="http://ljgabc.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>交叉编译GCC-4.8.4</title>
    <link href="http://ljgabc.com/2015/05/09/2015-05-09-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91GCC-4-8-4/"/>
    <id>http://ljgabc.com/2015/05/09/2015-05-09-交叉编译GCC-4-8-4/</id>
    <published>2015-05-09T10:52:07.000Z</published>
    <updated>2016-11-20T14:29:41.205Z</updated>
    
    <content type="html"><![CDATA[<h4 id="编译步骤"><a href="#编译步骤" class="headerlink" title="编译步骤"></a>编译步骤</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/usr --build=x86_64-linux-gnu --host=arm-linux-gnueabi --target=arm-linux-gnueabi --disable-multilib --disable-nls --enable-languages=c,c++ --disable-libstdcxx-pch --disable-libssp --enable-checking=release --enable-libstdcxx-time --with-gmp=$ROOTFS/usr --with-mpfr=$ROOTFS/usr --with-cloog=$ROOTFS/usr --with-mpc=$ROOTFS/usr --with-zlib=$ROOTFS/usr</div><div class="line"></div><div class="line">make </div><div class="line"></div><div class="line">make install</div></pre></td></tr></table></figure>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>在第二步<code>make</code>时会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">checking for type equivalent to int8_t... configure: error: no 8-bit type, please report a bug</div></pre></td></tr></table></figure></p>
<p>原因是<code>libatomic</code>的<code>configure</code>文件中设置的<code>CFLAGS</code>有问题，打开<code>libatomic/configure</code>，找到以下地方：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">11401 # Disable fallbacks to __sync routines from libgcc.  Otherwise we&apos;ll</div><div class="line">11402 # make silly decisions about what the cpu can do.</div><div class="line">11403 CFLAGS=&quot;$save_CFLAGS -fno-sync-libcalls $XCFLAGS&quot;</div></pre></td></tr></table></figure></p>
<p>改为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">11401 # Disable fallbacks to __sync routines from libgcc.  Otherwise we&apos;ll</div><div class="line">11402 # make silly decisions about what the cpu can do.</div><div class="line">11403 CFLAGS=&quot;$save_CFLAGS $XCFLAGS&quot;</div></pre></td></tr></table></figure>
<p>重新<code>make</code>即可.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;编译步骤&quot;&gt;&lt;a href=&quot;#编译步骤&quot; class=&quot;headerlink&quot; title=&quot;编译步骤&quot;&gt;&lt;/a&gt;编译步骤&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="嵌入式" scheme="http://ljgabc.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>在ext4中保存uboot环境变量及uImage</title>
    <link href="http://ljgabc.com/2015/05/08/2015-05-08-%E5%9C%A8ext4%E4%B8%AD%E4%BF%9D%E5%AD%98uboot%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8F%8AuImage/"/>
    <id>http://ljgabc.com/2015/05/08/2015-05-08-在ext4中保存uboot环境变量及uImage/</id>
    <published>2015-05-08T14:19:57.000Z</published>
    <updated>2016-11-20T14:29:41.204Z</updated>
    
    <content type="html"><![CDATA[<p>在上一篇文章<a href="/post/zhi-zuo-qian-ru-shi-linuxxi-tong-sdqia">《制作嵌入式Linux系统SD卡》</a>中，uImage、DTB及uboot的env都是通过dd烧录到sd卡上的，而不是在ext4分区中。这样每次升级uImage或dtb的时候，都需要拔下sd卡再烧录，稍显麻烦。如果uImage和dtb等都可以放在ext4分区中，就可以直接在启动后修改文件来升级内核或设备树了。</p>
<p>查看了一下uboot的源码，发现uboot是支持ext4文件系统的，而imx6的默认配置没有打开此选项，在mx6_sabresd.h中添加<code>CONFIG_FS_EXT4</code>选项，可以打开ext4文件系统支持。</p>
<p>之后在uboot命令行多了两个命令可以执行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ext2ls - list files in a directory (default /)                                  </div><div class="line">                                                                                </div><div class="line">Usage:                                                                          </div><div class="line">ext2ls &lt;interface&gt; &lt;dev[:part]&gt; [directory]                                     </div><div class="line">    - list files from &apos;dev&apos; on &apos;interface&apos; in a &apos;directory&apos;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ext2load - load binary file from a Ext2 filesystem                              </div><div class="line">                                                                                </div><div class="line">Usage:                                                                          </div><div class="line">ext2load &lt;interface&gt; &lt;dev[:part]&gt; [addr] [filename] [bytes]                     </div><div class="line">    - load binary file &apos;filename&apos; from &apos;dev&apos; on &apos;interface&apos;                     </div><div class="line">      to address &apos;addr&apos; from ext2 filesystem.</div></pre></td></tr></table></figure>
<p>通过以下命令查看ext4分区的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">=&gt; ext2ls mmc 0:1 /                                                             </div><div class="line">&lt;DIR&gt;       4096 .                                                              </div><div class="line">&lt;DIR&gt;       4096 ..                                                             </div><div class="line">&lt;DIR&gt;      16384 lost+found                                                     </div><div class="line">&lt;DIR&gt;       4096 bin                                                            </div><div class="line">&lt;DIR&gt;       4096 dev                                                            </div><div class="line">&lt;DIR&gt;       4096 etc                                                            </div><div class="line">&lt;DIR&gt;       4096 home                                                           </div><div class="line">&lt;SYM&gt;         11 init                                                           </div><div class="line">&lt;DIR&gt;       4096 lib                                                            </div><div class="line">&lt;DIR&gt;       4096 mnt                                                            </div><div class="line">&lt;DIR&gt;       4096 opt                                                            </div><div class="line">&lt;DIR&gt;       4096 proc                                                           </div><div class="line">&lt;DIR&gt;       4096 root                                                           </div><div class="line">&lt;DIR&gt;       4096 sbin                                                           </div><div class="line">&lt;DIR&gt;       4096 sys                                                            </div><div class="line">&lt;DIR&gt;       4096 tmp                                                            </div><div class="line">&lt;DIR&gt;       4096 usr                                                            </div><div class="line">&lt;DIR&gt;       4096 var                                                            </div><div class="line">&lt;DIR&gt;       4096 boot</div></pre></td></tr></table></figure></p>
<p>通过以下命令将/boot/uImage和/boot/imx6q-sabresd-ldo.dtb加载到内存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ext2load mmc 0:1 $&#123;loadaddr&#125; /boot/uImage_4.4.3</div><div class="line">ext2load mmc 0:1 $&#123;dtbloadaddr&#125; /boot/imx6q-sabresd-ldo.dtb</div></pre></td></tr></table></figure></p>
<p>之后就跟正常启动一样了。</p>
<p>其实，不止是uImage和dtb，设置uboot的env都可以在ext4分区中设置。比如，在ext4中创建<code>/boot/uENV.txt</code>文件，添加以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">loadaddr=0x12000000</div><div class="line">dtbloadaddr=0x18000000</div><div class="line">bootargs=console=ttymxc0,115200 init=/init rw root=/dev/mmcblk1p1</div><div class="line">bootcmd=ext2load mmc 0:1 $&#123;loadaddr&#125; /boot/uImage_4.4.3;ext2load mmc 0:1 $&#123;dtbloadaddr&#125; /boot/imx6q-sabresd-ldo.dtb;bootm $&#123;loadaddr&#125; - $&#123;dtbloadaddr&#125;</div></pre></td></tr></table></figure></p>
<p>保存后，在uboot中设置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setenv bootcmd &apos;ext2load mmc 0:1 0x12000000 /boot/uENV.txt;env import -t 0x12000000;boot&apos;</div></pre></td></tr></table></figure></p>
<p>在启动时，uboot会自动使用uENV.txt中的内容覆盖启动变量，从ext4分区加载uImage和dtb，然后启动。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一篇文章&lt;a href=&quot;/post/zhi-zuo-qian-ru-shi-linuxxi-tong-sdqia&quot;&gt;《制作嵌入式Linux系统SD卡》&lt;/a&gt;中，uImage、DTB及uboot的env都是通过dd烧录到sd卡上的，而不是在ext4分区中。这样每次升级
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="uboot" scheme="http://ljgabc.com/tags/uboot/"/>
    
  </entry>
  
  <entry>
    <title>VIM交叉编译注意事项</title>
    <link href="http://ljgabc.com/2015/05/07/2015-05-07-VIM%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://ljgabc.com/2015/05/07/2015-05-07-VIM交叉编译注意事项/</id>
    <published>2015-05-07T12:18:58.000Z</published>
    <updated>2016-11-20T14:29:41.204Z</updated>
    
    <content type="html"><![CDATA[<p>交叉编译过程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tar xf vim-7.4.tar.gz</div><div class="line"></div><div class="line">cd vim74</div><div class="line"></div><div class="line">vim_cv_memmove_handles_overlap=yes vim_cv_stat_ignores_slash=no vim_cv_getcwd_broken=no vim_cv_tty_group=world vim_cv_terminfo=yes vim_cv_toupper_broken=no ./configure --prefix=/usr --host=arm-linux-gnueabi --disable-darwin --disable-selinux --disable-xsmp --disable-xsmp-interact --enable-cscope --disable-netbeans --enable-multibyte --disable-xim --disable-gtktest --disable-gpm --with-features=huge --with-tlib=ncurses</div><div class="line"></div><div class="line">make </div><div class="line"></div><div class="line">make DESTDIR=$PWD/_install install</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：<code>configure</code>时，指定<code>--prefix=/usr</code>，<code>install</code>时再指定<code>DESTDIR=$PWD/_install</code>，而不是在<code>configure</code>时直接<code>--prefix=$PWD/_install</code>。原因是vim将会在<code>$PREFIX/share/vim74</code>下寻找配置文件，如果使用后者，运行时会提示找不到<code>syntax等文件</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;交叉编译过程&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div clas
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="vim" scheme="http://ljgabc.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Dropbear远程无法登陆问题</title>
    <link href="http://ljgabc.com/2015/05/06/2015-05-06-Dropbear%E8%BF%9C%E7%A8%8B%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86%E9%97%AE%E9%A2%98/"/>
    <id>http://ljgabc.com/2015/05/06/2015-05-06-Dropbear远程无法登陆问题/</id>
    <published>2015-05-06T11:17:00.000Z</published>
    <updated>2016-11-20T14:29:41.203Z</updated>
    
    <content type="html"><![CDATA[<p>编译好dropbear并安装到文件系统中，从远程登陆时，提示</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Login attempt for nonexistent user from</div></pre></td></tr></table></figure>
<p>原因是文件系统中缺少libnss_file.so*库，造成系统调用<code>getpwuid()</code>失败。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编译好dropbear并安装到文件系统中，从远程登陆时，提示&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="dropbear" scheme="http://ljgabc.com/tags/dropbear/"/>
    
  </entry>
  
  <entry>
    <title>Linux Device Tree</title>
    <link href="http://ljgabc.com/2015/04/30/2015-04-30-Linux-Device-Tree/"/>
    <id>http://ljgabc.com/2015/04/30/2015-04-30-Linux-Device-Tree/</id>
    <published>2015-04-30T13:12:51.000Z</published>
    <updated>2016-11-20T14:29:41.203Z</updated>
    
    <content type="html"><![CDATA[<p>#0 什么是 Device Tree ?</p>
<ul>
<li>从Power.org标准组织的嵌入式Power架构平台需求(ePART)引入<ul>
<li>ePAPR 定一个了一个用来描述系统硬件信息的文件。启动时，启动程序将device tree加载到客户端的内存中，并将device tree在内存中地址作为指针传递给客户端</li>
<li>Device tree采用树形结构组织信息，包含一些用来表述系统中的物理设备的节点</li>
<li>一个兼容ePAPR标准的device tree文件应该包含系统中所有无法被客户端动态检测到的设备信息</li>
</ul>
</li>
</ul>
<p>#1 介绍: 使用Device Tree启动</p>
<p>##1.1 之前</p>
<ul>
<li>内核包含所有的硬件描述</li>
<li>BootLoader加载整个内核镜像然后跳转到内核执行<ul>
<li>通常是uImage或zImage</li>
</ul>
</li>
<li>BootLoadr通过r2寄存器将一些额外的信息，称作ATAGS，传递给内核<ul>
<li>通常包含内存大小、内存地址、内核启动参数等等</li>
</ul>
</li>
<li>BootLoader通过r1寄存器将机器类型码传递给内核</li>
<li>U-Boot中通过以下命令启动内核： bootm &lt;内核加载到内存中的地址&gt;</li>
<li>环境变量: bootm.image</li>
</ul>
<p><img src="/images/2015-04-30/5f2dc406420db327698a1e3c8fff4.png" alt="启动方式1"></p>
<p>##1.2 之后</p>
<ul>
<li>内核中不再包含硬件描述信息, 硬件描述信息被包含在单独的镜像中： dtb</li>
<li>BootLoader在启动时需要同时加载两个镜像: 内核 及 dtb文件</li>
<li>内核镜像同样是uImage 或 zImage</li>
<li>dtb文件存放在 <kernel>/arch/arm/boot/dts, 每个板子一个文件</kernel></li>
<li>BootLoader通过r2寄存器将dtb文件在内存中的地址传递给内核. dtb文件需要根据内存信息、内核命令行或其他信息作修改</li>
<li>不再需要机器码</li>
<li>U-Boot命令行: bootm &lt;内核被加载到内存中的地址&gt; - <dtb被加载到内存中的地址></dtb被加载到内存中的地址></li>
<li>环境变量: bootm.image, bootm.oftree</li>
</ul>
<p><img src="/images/2015-04-30/a3a8187d30eb4e5085cf12cccacb6.png" alt="启动方式2"></p>
<p>##1.3 兼容模式</p>
<ul>
<li>某些BootLoader不支持Device Tree或者设备上使用的版本太老而不支持Device Tree</li>
<li><p>为了方便转换， 添加了一个兼容机制， 通过内核配置项： CONFIG_ARM_APPENDED_DTB.</p>
<ul>
<li>如果配置了该选项，内核会默认在紧接着内核镜像的地方寻找dtb文件镜像</li>
<li>Makefile中没有包含将内核和dtb打包成一个镜像的功能，需要手动实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cat arch/arm/boot/zImage arch/arm/boot/dts/myboard.dtb &gt; my-zImage</div><div class="line">mkimage ... -d my-zImage my-uImage</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>此外, 如果配置了CONFIG_ARM_ATAG_DTB_COMPAT， 内核会使用BootLoader传递来的ATAGS信息, 覆盖Device Tree中的内容</p>
</li>
</ul>
<p>#2 Device Tree的语法及编译</p>
<p>##2.1 基本语法</p>
<p><img src="/images/2015-04-30/c57062f6ff3456416f7e1143822bb.png" alt="dts语法"></p>
<p>##2.2 编译</p>
<ul>
<li>对于ARM平台，所有Device Tree的源文件(DTS)存放在arch/arm/boot/dts<ul>
<li>.dts文件是板级描述</li>
<li>.dtsi是头文件，包含SoC级描述</li>
</ul>
</li>
<li>Device Tree Compiler(DTC)编译DTS，将其转换成二进制镜像<ul>
<li>DTC的源文件放在scripts/dtc</li>
<li>编译生成Device Tree Blob(DTB)文件。BootLoader在启动时加载DTB文件并将其传递给内核</li>
</ul>
</li>
<li>arch/arm/boot/dts/Makefile文件中指定了在编译时编译哪些DTB文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dtb-$(CONFIG_ARCH_MVEBU) += armada-370-db.dtb \</div><div class="line">armada-370-mirabox.dtb \</div><div class="line">...</div></pre></td></tr></table></figure>
</li>
</ul>
<p>#3 Device Tree的示例片段</p>
<p>##3.1 Device Tree端<br><img src="/images/2015-04-30/134be9b26c146e9e0252aaa971fdf.png" alt="dts示例"></p>
<p>##3.2 驱动端</p>
<p><img src="/images/2015-04-30/85380c03034a17323180d7757545b.png" alt="dts驱动"></p>
<blockquote>
<p>待续…</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#0 什么是 Device Tree ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从Power.org标准组织的嵌入式Power架构平台需求(ePART)引入&lt;ul&gt;
&lt;li&gt;ePAPR 定一个了一个用来描述系统硬件信息的文件。启动时，启动程序将device tree加载到客户端的内存中
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Device Tree" scheme="http://ljgabc.com/tags/Device-Tree/"/>
    
      <category term="设备树" scheme="http://ljgabc.com/tags/%E8%AE%BE%E5%A4%87%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>交叉编译Python-3.4.2</title>
    <link href="http://ljgabc.com/2015/04/24/2015-04-24-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91Python-3-4-2/"/>
    <id>http://ljgabc.com/2015/04/24/2015-04-24-交叉编译Python-3-4-2/</id>
    <published>2015-04-24T11:47:29.000Z</published>
    <updated>2016-11-20T14:29:41.203Z</updated>
    
    <content type="html"><![CDATA[<p>交叉编译Python-3.4.2到ARM方法及步骤，备忘。</p>
<p>#0 准备</p>
<p>编译环境目录结构如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">~/work</div><div class="line">├── build</div><div class="line">│   ├── lib        // 编译生成的依赖库文件</div><div class="line">│   └── python     // 编译生成的python文件</div><div class="line">└── src</div><div class="line">    ├── bzip2-1.0.6</div><div class="line">    ├── gdbm-1.11</div><div class="line">    ├── ncurses-5.9</div><div class="line">    ├── openssl-1.0.2a</div><div class="line">    ├── Python-3.4.2</div><div class="line">    ├── readline-6.3</div><div class="line">    ├── sqlite-autoconf-3080500</div><div class="line">    └── xz-5.0.5</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">export WORKDIR=~/work</div><div class="line">export HOST=arm-linux-gnueabi</div><div class="line">export PREFIX=$WORKDIR/build/lib</div><div class="line">export PREFIX_PYTHON=$WORKDIR/build/python</div><div class="line"></div><div class="line">export CFLAGS=&quot;-I$PREFIX/include&quot;</div><div class="line">export LDFLAGS=&quot;-L$PREFIX/lib&quot;</div></pre></td></tr></table></figure>
<p>#1 编译ncurses-5.9</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=$PREFIX --host=$HOST</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>#2 编译readline库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bash_cv_wcwidth_broken=no ./configure --prefix=$PREFIX --host=$HOST --enable-shared=no --with-curses=ncurses</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>#3 编译bzip2库<br>修改Makefile，patch如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">--- Makefile.old    2015-04-24 15:36:49.420543465 +0800</div><div class="line">+++ Makefile    2015-04-24 15:41:00.436534604 +0800</div><div class="line">@@ -15,16 +15,17 @@</div><div class="line"> SHELL=/bin/sh</div><div class="line"> </div><div class="line"> # To assist in cross-compiling</div><div class="line">-CC=gcc</div><div class="line">-AR=ar</div><div class="line">-RANLIB=ranlib</div><div class="line">+CROSS_COMPILE=arm-linux-gnueabi-</div><div class="line">+CC=$(CROSS_COMPILE)gcc</div><div class="line">+AR=$(CROSS_COMPILE)ar</div><div class="line">+RANLIB=$(CROSS_COMPILE)ranlib</div><div class="line"> LDFLAGS=</div><div class="line"> </div><div class="line"> BIGFILES=-D_FILE_OFFSET_BITS=64</div><div class="line"> CFLAGS=-Wall -Winline -O2 -g $(BIGFILES)</div><div class="line"> </div><div class="line"> # Where you want it installed when you do &apos;make install&apos;</div><div class="line">-PREFIX=/usr/local</div><div class="line">+#PREFIX=/usr/local</div><div class="line"> </div><div class="line"> </div><div class="line"> OBJS= blocksort.o  \</div><div class="line">@@ -35,7 +36,7 @@</div><div class="line">       decompress.o \</div><div class="line">       bzlib.o</div><div class="line"> </div><div class="line">-all: libbz2.a bzip2 bzip2recover test</div><div class="line">+all: libbz2.a</div><div class="line"> </div><div class="line"> bzip2: libbz2.a bzip2.o</div><div class="line">    $(CC) $(CFLAGS) $(LDFLAGS) -o bzip2 bzip2.o -L. -lbz2</div><div class="line">@@ -69,44 +70,13 @@</div><div class="line">    cmp sample3.tst sample3.ref</div><div class="line">    @cat words3</div><div class="line"> </div><div class="line">-install: bzip2 bzip2recover</div><div class="line">-   if ( test ! -d $(PREFIX)/bin ) ; then mkdir -p $(PREFIX)/bin ; fi</div><div class="line">+install: libbz2.a</div><div class="line">    if ( test ! -d $(PREFIX)/lib ) ; then mkdir -p $(PREFIX)/lib ; fi</div><div class="line">-   if ( test ! -d $(PREFIX)/man ) ; then mkdir -p $(PREFIX)/man ; fi</div><div class="line">-   if ( test ! -d $(PREFIX)/man/man1 ) ; then mkdir -p $(PREFIX)/man/man1 ; fi</div><div class="line">    if ( test ! -d $(PREFIX)/include ) ; then mkdir -p $(PREFIX)/include ; fi</div><div class="line">-   cp -f bzip2 $(PREFIX)/bin/bzip2</div><div class="line">-   cp -f bzip2 $(PREFIX)/bin/bunzip2</div><div class="line">-   cp -f bzip2 $(PREFIX)/bin/bzcat</div><div class="line">-   cp -f bzip2recover $(PREFIX)/bin/bzip2recover</div><div class="line">-   chmod a+x $(PREFIX)/bin/bzip2</div><div class="line">-   chmod a+x $(PREFIX)/bin/bunzip2</div><div class="line">-   chmod a+x $(PREFIX)/bin/bzcat</div><div class="line">-   chmod a+x $(PREFIX)/bin/bzip2recover</div><div class="line">-   cp -f bzip2.1 $(PREFIX)/man/man1</div><div class="line">-   chmod a+r $(PREFIX)/man/man1/bzip2.1</div><div class="line">    cp -f bzlib.h $(PREFIX)/include</div><div class="line">    chmod a+r $(PREFIX)/include/bzlib.h</div><div class="line">    cp -f libbz2.a $(PREFIX)/lib</div><div class="line">    chmod a+r $(PREFIX)/lib/libbz2.a</div><div class="line">-   cp -f bzgrep $(PREFIX)/bin/bzgrep</div><div class="line">-   ln -s -f $(PREFIX)/bin/bzgrep $(PREFIX)/bin/bzegrep</div><div class="line">-   ln -s -f $(PREFIX)/bin/bzgrep $(PREFIX)/bin/bzfgrep</div><div class="line">-   chmod a+x $(PREFIX)/bin/bzgrep</div><div class="line">-   cp -f bzmore $(PREFIX)/bin/bzmore</div><div class="line">-   ln -s -f $(PREFIX)/bin/bzmore $(PREFIX)/bin/bzless</div><div class="line">-   chmod a+x $(PREFIX)/bin/bzmore</div><div class="line">-   cp -f bzdiff $(PREFIX)/bin/bzdiff</div><div class="line">-   ln -s -f $(PREFIX)/bin/bzdiff $(PREFIX)/bin/bzcmp</div><div class="line">-   chmod a+x $(PREFIX)/bin/bzdiff</div><div class="line">-   cp -f bzgrep.1 bzmore.1 bzdiff.1 $(PREFIX)/man/man1</div><div class="line">-   chmod a+r $(PREFIX)/man/man1/bzgrep.1</div><div class="line">-   chmod a+r $(PREFIX)/man/man1/bzmore.1</div><div class="line">-   chmod a+r $(PREFIX)/man/man1/bzdiff.1</div><div class="line">-   echo &quot;.so man1/bzgrep.1&quot; &gt; $(PREFIX)/man/man1/bzegrep.1</div><div class="line">-   echo &quot;.so man1/bzgrep.1&quot; &gt; $(PREFIX)/man/man1/bzfgrep.1</div><div class="line">-   echo &quot;.so man1/bzmore.1&quot; &gt; $(PREFIX)/man/man1/bzless.1</div><div class="line">-   echo &quot;.so man1/bzdiff.1&quot; &gt; $(PREFIX)/man/man1/bzcmp.1</div><div class="line"> </div><div class="line"> clean: </div><div class="line">    rm -f *.o libbz2.a bzip2 bzip2recover \</div></pre></td></tr></table></figure></p>
<p>编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>#4 编译gdbm库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=$PREFIX --host=$HOST --enable-libgdbm-compat --enable-shared=no</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>#5 编译openssl库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">待添加...</div></pre></td></tr></table></figure></p>
<p>#6 编译sqlite库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=$PREFIX --host=$HOST --enable-shared=no</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>#7 编译xz<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=$PREFIX --host=$HOST --enable-shared=no</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>#8 编译Python<br>先编译host版的python和pgen<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./configure</div><div class="line">make BUILDPYTHON=hostpython hostpython PGEN=Parser/hostpgen Parser/hostpgen</div><div class="line">make distclean</div></pre></td></tr></table></figure></p>
<p>打补丁<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line">diff -ru Python-3.4.2/Makefile.pre.in Python-3.4.2-android/Makefile.pre.in</div><div class="line">--- Python-3.4.2/Makefile.pre.in    2014-03-09 09:40:23.000000000 +0100</div><div class="line">+++ Python-3.4.2-android/Makefile.pre.in    2014-08-04 22:13:00.000000000 +0200</div><div class="line">@@ -674,7 +674,7 @@</div><div class="line"> $(GRAMMAR_H): $(GRAMMAR_INPUT) $(PGENSRCS)</div><div class="line">        @$(MKDIR_P) Include</div><div class="line">        $(MAKE) $(PGEN)</div><div class="line">-       $(PGEN) $(GRAMMAR_INPUT) $(GRAMMAR_H) $(GRAMMAR_C)</div><div class="line">+       $(HOSTPGEN) $(GRAMMAR_INPUT) $(GRAMMAR_H) $(GRAMMAR_C)</div><div class="line"> $(GRAMMAR_C): $(GRAMMAR_H) $(GRAMMAR_INPUT) $(PGENSRCS)</div><div class="line">        $(MAKE) $(GRAMMAR_H)</div><div class="line">        touch $(GRAMMAR_C)</div><div class="line">@@ -1243,6 +1243,7 @@</div><div class="line"> # Install the dynamically loadable modules</div><div class="line"> # This goes into $(exec_prefix)</div><div class="line"> sharedinstall: sharedmods</div><div class="line">+   CC=&apos;$(CC)&apos; LDSHARED=&apos;$(BLDSHARED)&apos; LDFLAGS=&apos;$(LDFLAGS)&apos; OPT=&apos;$(OPT)&apos; CROSS_COMPILE=&apos;$(CROSS_COMPILE)&apos; \</div><div class="line">    $(RUNSHARED) $(PYTHON_FOR_BUILD) $(srcdir)/setup.py install \</div><div class="line">        --prefix=$(prefix) \</div><div class="line">        --install-scripts=$(BINDIR) \</div><div class="line">diff -ru Python-3.4.2/configure Python-3.4.2-android/configure</div><div class="line">--- Python-3.4.2/configure  2014-03-09 09:40:34.000000000 +0100</div><div class="line">+++ Python-3.4.2-android/configure  2014-08-04 22:13:00.000000000 +0200</div><div class="line">@@ -2943,13 +2943,18 @@</div><div class="line">     &#123; $as_echo &quot;$as_me:$&#123;as_lineno-$LINENO&#125;: checking for python interpreter for cross build&quot; &gt;&amp;5</div><div class="line"> $as_echo_n &quot;checking for python interpreter for cross build... &quot; &gt;&amp;6; &#125;</div><div class="line">     if test -z &quot;$PYTHON_FOR_BUILD&quot;; then</div><div class="line">-        for interp in python$PACKAGE_VERSION python3 python; do</div><div class="line">-       which $interp &gt;/dev/null 2&gt;&amp;1 || continue</div><div class="line">-       if $interp -c &apos;import sys;sys.exit(not sys.version_info[:2] &gt;= (3,3))&apos;; then</div><div class="line">-           break</div><div class="line">-       fi</div><div class="line">-            interp=</div><div class="line">-   done</div><div class="line">+        if test ! -z &quot;$HOSTPYTHON&quot; &amp;&amp; PYTHONPATH=&quot;$ac_abs_confdir/Lib&quot; &quot;$HOSTPYTHON&quot; -S -c &apos;import sys;sys.exit(not sys.version_info[:2] &gt;= (3,3))&apos;; then</div><div class="line">+            interp=&quot;$HOSTPYTHON&quot;</div><div class="line">+        else</div><div class="line">+            for interp in python$PACKAGE_VERSION python3 python; do</div><div class="line">+           which $interp &gt;/dev/null 2&gt;&amp;1 || continue</div><div class="line">+           if $interp -c &apos;import sys;sys.exit(not sys.version_info[:2] &gt;= (3,3))&apos;; then</div><div class="line">+               break</div><div class="line">+           fi</div><div class="line">+                interp=</div><div class="line">+       done</div><div class="line">+        fi</div><div class="line">+</div><div class="line">         if test x$interp = x; then</div><div class="line">        as_fn_error $? &quot;python$PACKAGE_VERSION interpreter not found&quot; &quot;$LINENO&quot; 5</div><div class="line">    fi</div><div class="line">diff -ru Python-3.4.2/configure.ac Python-3.4.2-android/configure.ac</div><div class="line">--- Python-3.4.2/configure.ac   2014-03-09 09:40:34.000000000 +0100</div><div class="line">+++ Python-3.4.2-android/configure.ac   2014-08-04 22:13:00.000000000 +0200</div><div class="line">@@ -56,13 +56,18 @@</div><div class="line"> if test &quot;$cross_compiling&quot; = yes; then</div><div class="line">     AC_MSG_CHECKING([for python interpreter for cross build])</div><div class="line">     if test -z &quot;$PYTHON_FOR_BUILD&quot;; then</div><div class="line">-        for interp in python$PACKAGE_VERSION python3 python; do</div><div class="line">-       which $interp &gt;/dev/null 2&gt;&amp;1 || continue</div><div class="line">-       if $interp -c &apos;import sys;sys.exit(not sys.version_info@&lt;:@:2@:&gt;@ &gt;= (3,3))&apos;; then</div><div class="line">-           break</div><div class="line">-       fi</div><div class="line">-            interp=</div><div class="line">-   done</div><div class="line">+        if test ! -z &quot;$HOSTPYTHON&quot; &amp;&amp; PYTHONPATH=&quot;$ac_abs_confdir/Lib&quot; &quot;$HOSTPYTHON&quot; -S -c &apos;import sys;sys.exit(not sys.version_info@&lt;:@:2@:&gt;@ &gt;= (3,3))&apos;; then</div><div class="line">+            interp=&quot;$HOSTPYTHON&quot;</div><div class="line">+        else</div><div class="line">+            for interp in python$PACKAGE_VERSION python3 python; do</div><div class="line">+           which $interp &gt;/dev/null 2&gt;&amp;1 || continue</div><div class="line">+           if $interp -c &apos;import sys;sys.exit(not sys.version_info@&lt;:@:2@:&gt;@ &gt;= (3,3))&apos;; then</div><div class="line">+               break</div><div class="line">+           fi</div><div class="line">+                interp=</div><div class="line">+       done</div><div class="line">+        fi</div><div class="line">+</div><div class="line">         if test x$interp = x; then</div><div class="line">        AC_MSG_ERROR([python$PACKAGE_VERSION interpreter not found])</div><div class="line">    fi</div><div class="line"></div><div class="line">diff -ru Python-3.4.2/setup.py Python-3.4.2-android/setup.py</div><div class="line">--- Python-3.4.2/setup.py   2014-03-09 09:40:34.000000000 +0800</div><div class="line">+++ Python-3.4.2-android/setup.py   2014-08-04 22:13:00.000000000 +0800</div><div class="line">@@ -1060,7 +1060,7 @@</div><div class="line">                              &apos;/usr/local/include/sqlite3&apos;,</div><div class="line">                              ]</div><div class="line">         if cross_compiling:</div><div class="line">-            sqlite_inc_paths = []</div><div class="line">+            sqlite_inc_paths = [&apos;/home/lijg/work/build/lib/include&apos;]</div><div class="line">         MIN_SQLITE_VERSION_NUMBER = (3, 0, 8)</div><div class="line">         MIN_SQLITE_VERSION = &quot;.&quot;.join([str(x)</div><div class="line">                                     for x in MIN_SQLITE_VERSION_NUMBER])</div></pre></td></tr></table></figure></p>
<p>编译arm版本的python</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">cat &gt; config.site &lt;&lt;-SITE</div><div class="line">    ac_cv_file__dev_ptmx=no</div><div class="line">    ac_cv_file__dev_ptc=no</div><div class="line">SITE</div><div class="line"></div><div class="line">./configure CROSS_COMPILE_TARGET=yes HOSTPYTHON=&quot;$(pwd)/hostpython&quot; CONFIG_SITE=config.site --prefix=$PREFIX_PYTHON --host=arm-linux-gnueabi --disable-ipv6 --without-ensurepip</div><div class="line"></div><div class="line">make CROSS_COMPILE_TARGET=yes HOSTPYTHON=&quot;$(pwd)/hostpython&quot; HOSTPGEN=&quot;$(pwd)/Parser/hostpgen&quot;</div><div class="line"></div><div class="line">make CROSS_COMPILE_TARGET=yes HOSTPYTHON=&quot;$(pwd)/hostpython&quot; HOSTPGEN=&quot;$(pwd)/Parser/hostpgen&quot; install</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;交叉编译Python-3.4.2到ARM方法及步骤，备忘。&lt;/p&gt;
&lt;p&gt;#0 准备&lt;/p&gt;
&lt;p&gt;编译环境目录结构如下&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div c
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="嵌入式" scheme="http://ljgabc.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Android隐藏导航条</title>
    <link href="http://ljgabc.com/2015/04/23/2015-04-23-Android%E9%9A%90%E8%97%8F%E5%AF%BC%E8%88%AA%E6%9D%A1/"/>
    <id>http://ljgabc.com/2015/04/23/2015-04-23-Android隐藏导航条/</id>
    <published>2015-04-23T14:51:52.000Z</published>
    <updated>2016-11-20T14:29:41.203Z</updated>
    
    <content type="html"><![CDATA[<p>目的：实现程序控制隐藏和显示Android导航条</p>
<p>适用版本: Android 4.2+</p>
<p>涉及文件: <code>(AndroidSrc)/framework/base/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</code></p>
<p>修改内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</div><div class="line">+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java</div><div class="line">@@ -153,6 +153,8 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode &#123;</div><div class="line">     private float mFlingGestureMaxOutputVelocityPx; // how fast can it really go? (should be a little</div><div class="line">                                                     // faster than mSelfCollapseVelocityPx)</div><div class="line"> </div><div class="line">+    private boolean isDisplayNavBar;</div><div class="line">+</div><div class="line">     PhoneStatusBarPolicy mIconPolicy;</div><div class="line"> </div><div class="line">     // These are no longer handled by the policy, because we need custom strategies for them</div><div class="line">@@ -349,6 +351,7 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode &#123;</div><div class="line">         super.start(); // calls createAndAddWindows()</div><div class="line"> </div><div class="line">         addNavigationBar();</div><div class="line">+        isDisplayNavBar = true;</div><div class="line"> </div><div class="line">         // Lastly, call to the icon policy to install/update all the icons.</div><div class="line">         mIconPolicy = new PhoneStatusBarPolicy(mContext);</div><div class="line">@@ -645,6 +648,10 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode &#123;</div><div class="line">         filter.addAction(ACTION_DEMO);</div><div class="line">         context.registerReceiver(mBroadcastReceiver, filter);</div><div class="line"> </div><div class="line">+        IntentFilter filter1 = new IntentFilter();</div><div class="line">+        filter1.addAction(&quot;ACTION_STATUS_BAR_CTRL&quot;);</div><div class="line">+        context.registerReceiver(mBroadcastReceiver1, filter1);</div><div class="line">+</div><div class="line">         // listen for USER_SETUP_COMPLETE setting (per-user)</div><div class="line">         resetUserSetupObserver();</div><div class="line"> </div><div class="line">@@ -806,6 +813,11 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode &#123;</div><div class="line">         mWindowManager.addView(mNavigationBarView, getNavigationBarLayoutParams());</div><div class="line">     &#125;</div><div class="line"> </div><div class="line">+    private void removeNavigationBar() &#123;</div><div class="line">+        if(mNavigationBarView == null) return;</div><div class="line">+        mWindowManager.removeView(mNavigationBarView);</div><div class="line">+    &#125;</div><div class="line">+</div><div class="line">     private void repositionNavigationBar() &#123;</div><div class="line">         if (mNavigationBarView == null || !mNavigationBarView.isAttachedToWindow()) return;</div><div class="line"> </div><div class="line">@@ -2443,6 +2455,26 @@ public class PhoneStatusBar extends BaseStatusBar implements DemoMode &#123;</div><div class="line">         &#125;</div><div class="line">     &#125;;</div><div class="line"> </div><div class="line">+    private BroadcastReceiver mBroadcastReceiver1 = new BroadcastReceiver() &#123;</div><div class="line">+        public void onReceive(Context context, Intent intent) &#123;</div><div class="line">+            String action = intent.getAction();</div><div class="line">+            if (isOrderedBroadcast()) &#123;  </div><div class="line">+                if (action.equals(&quot;ACTION_STATUS_BAR_CTRL&quot;)) &#123;  </div><div class="line">+                    String cmd = intent.getStringExtra(&quot;cmd&quot;);</div><div class="line">+                    if(cmd.equals(&quot;hide&quot;) &amp;&amp; isDisplayNavBar ) &#123;  </div><div class="line">+                        isDisplayNavBar=false;  </div><div class="line">+                        removeNavigationBar();</div><div class="line">+                    &#125; else if(cmd.equals(&quot;show&quot;)&amp;&amp;!isDisplayNavBar)&#123;  </div><div class="line">+                        isDisplayNavBar=true;  </div><div class="line">+                        addNavigationBar();</div><div class="line">+                    &#125;</div><div class="line">+                &#125;</div><div class="line">+                this.abortBroadcast();</div><div class="line">+            &#125;</div><div class="line">+        &#125;</div><div class="line">+    &#125;;</div><div class="line">+      </div><div class="line">+</div><div class="line">     private BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() &#123;</div><div class="line">         public void onReceive(Context context, Intent intent) &#123;</div><div class="line">             if (DEBUG) Log.v(TAG, &quot;onReceive: &quot; + intent);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目的：实现程序控制隐藏和显示Android导航条&lt;/p&gt;
&lt;p&gt;适用版本: Android 4.2+&lt;/p&gt;
&lt;p&gt;涉及文件: &lt;code&gt;(AndroidSrc)/framework/base/packages/SystemUI/src/com/android/syste
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
      <category term="导航条" scheme="http://ljgabc.com/tags/%E5%AF%BC%E8%88%AA%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>通过/dev/mem访问寄存器</title>
    <link href="http://ljgabc.com/2015/04/18/2015-04-18-%E9%80%9A%E8%BF%87-dev-mem%E8%AE%BF%E9%97%AE%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <id>http://ljgabc.com/2015/04/18/2015-04-18-通过-dev-mem访问寄存器/</id>
    <published>2015-04-18T13:16:01.000Z</published>
    <updated>2016-11-20T14:29:41.203Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章<a href="http://192.168.1.7:2368/linuxxia-tong-guo-pythonfang-wen-ji-cun-qi/" target="_blank" rel="external">Linux下通过Python访问寄存器</a>，提到可以通过/dev/mem访问物理内存，实际上就是实现用户空间驱动的一种方法。</p>
<p>但是不是所有的系统都有Python环境，所以用C语言实现了一个版本，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div></pre></td><td class="code"><pre><div class="line">#include &lt;sys/mman.h&gt;</div><div class="line">#include &lt;sys/types.h&gt;</div><div class="line">#include &lt;sys/stat.h&gt;</div><div class="line">#include &lt;fcntl.h&gt;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;string.h&gt;</div><div class="line">#include &lt;stdlib.h&gt;</div><div class="line">#include &lt;unistd.h&gt;</div><div class="line"></div><div class="line"></div><div class="line">#define WORDSIZE 4</div><div class="line"></div><div class="line">/*</div><div class="line"> * 字符串转数值</div><div class="line"> */</div><div class="line">static int mstrtol(char *nstr, unsigned int *val)</div><div class="line">&#123;</div><div class="line">    char *endptr;</div><div class="line"></div><div class="line">    /*</div><div class="line">     * 将用户输入的16进制字符串转换成数值</div><div class="line">     */</div><div class="line">    *val = strtol(nstr, &amp;endptr, 16);</div><div class="line"></div><div class="line">    /*</div><div class="line">     *  字符串中含有未能解析的值</div><div class="line">     */</div><div class="line">    if(strlen(nstr) != (endptr - nstr)) &#123;</div><div class="line">        printf(&quot;unknown value %s, is it a hex value?\n&quot;, nstr);</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/*</div><div class="line"> * 打印寄存器的值</div><div class="line"> * 参数:</div><div class="line"> *      addr:   寄存器地址</div><div class="line"> * 返回值：</div><div class="line"> *      成功读出返回寄存器的值，否则返回0.</div><div class="line"> */</div><div class="line">unsigned int md(unsigned int addr)</div><div class="line">&#123;</div><div class="line">    int fd;</div><div class="line">    char *mem;</div><div class="line">    unsigned int readword;</div><div class="line">    unsigned int pagesize = getpagesize();</div><div class="line">    unsigned int base_addr = addr &amp; ~(pagesize - 1);</div><div class="line">    unsigned int offset = addr - base_addr;</div><div class="line"></div><div class="line">    fd = open(&quot;/dev/mem&quot;, O_RDWR | O_SYNC);</div><div class="line"></div><div class="line">    if(fd == -1) &#123;</div><div class="line">        perror(&quot;open /dev/mem failed.&quot;);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mem = mmap(0, pagesize, PROT_READ | PROT_WRITE, MAP_SHARED, fd, base_addr);</div><div class="line"></div><div class="line">    if(mem == MAP_FAILED) &#123;</div><div class="line">        perror(&quot;mmap /dev/mem failed.&quot;);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    readword = *((unsigned int *)(mem + offset));</div><div class="line"></div><div class="line">    munmap(mem, pagesize);</div><div class="line"></div><div class="line">    close(fd);</div><div class="line"></div><div class="line">    return readword;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line"> * 设置寄存器的值</div><div class="line"> * 参数:</div><div class="line"> *      addr:   寄存器地址</div><div class="line"> *      val:    要写入寄存器的值</div><div class="line"> * 返回值：</div><div class="line"> *      成功写入返回0，否则返回-1；</div><div class="line"> */</div><div class="line">unsigned int mw(unsigned int addr, unsigned int val)</div><div class="line">&#123;</div><div class="line">    int fd;</div><div class="line">    char *mem;</div><div class="line">    unsigned int readword;</div><div class="line">    unsigned int pagesize = getpagesize();</div><div class="line">    unsigned int base_addr = addr &amp; (pagesize - 1);</div><div class="line">    unsigned int offset = addr - base_addr;</div><div class="line"></div><div class="line">    fd = open(&quot;/dev/mem&quot;, O_RDWR | O_SYNC);</div><div class="line"></div><div class="line">    if(fd == -1) &#123;</div><div class="line">        perror(&quot;open /dev/mem failed.&quot;);</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mem = mmap(0, pagesize, PROT_READ | PROT_WRITE, MAP_SHARED, fd, base_addr);</div><div class="line"></div><div class="line">    if(mem == MAP_FAILED) &#123;</div><div class="line">        perror(&quot;mmap /dev/mem failed.&quot;);</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    *((unsigned int *)(mem + offset)) = val;</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">void print_help()</div><div class="line">&#123;</div><div class="line">  printf(&quot;usage:\nmdw -r addr\nmdw -w addr val\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, char **argv)</div><div class="line">&#123;</div><div class="line">    unsigned int addr = 0;</div><div class="line">  unsigned int val = 0;</div><div class="line"></div><div class="line">  unsigned int rw = 0;</div><div class="line"></div><div class="line">    if(argc &lt; 3) &#123;</div><div class="line">    print_help();</div><div class="line">    return -1;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if(strcmp(argv[1], &quot;-r&quot;) != 0 &amp;&amp; strcmp(argv[1], &quot;-w&quot;) != 0 ) &#123;</div><div class="line">    print_help();</div><div class="line">    return -1;</div><div class="line">  &#125; else if(strcmp(argv[1], &quot;-r&quot;) == 0) &#123;</div><div class="line">    rw = 0;</div><div class="line">  &#125; else &#123;</div><div class="line">    rw = 1;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  if(mstrtol(argv[2], &amp;addr)) &#123;</div><div class="line">    return -1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  addr &amp;= ~(0x03);</div><div class="line"></div><div class="line">  if(rw == 0) &#123;</div><div class="line">    printf(&quot;0x%08X\n&quot;, md(addr));</div><div class="line">  &#125; else &#123;</div><div class="line">    if(mstrtol(argv[3], &amp;val)) &#123;</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line">    mw(addr, val);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章&lt;a href=&quot;http://192.168.1.7:2368/linuxxia-tong-guo-pythonfang-wen-ji-cun-qi/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Linux下通过Python访问寄存器&lt;/a&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="嵌入式" scheme="http://ljgabc.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用Python访问寄存器</title>
    <link href="http://ljgabc.com/2015/04/17/2015-04-17-%E4%BD%BF%E7%94%A8Python%E8%AE%BF%E9%97%AE%E5%AF%84%E5%AD%98%E5%99%A8/"/>
    <id>http://ljgabc.com/2015/04/17/2015-04-17-使用Python访问寄存器/</id>
    <published>2015-04-17T13:15:02.000Z</published>
    <updated>2016-11-20T14:29:41.203Z</updated>
    
    <content type="html"><![CDATA[<p>/dev/mem是物理内存的全映像，可以用来访问物理内存，一般用法是open(“/dev/mem”,O_RDWR|O_SYNC)，然后mmap，接着就可以用mmap的地址来访问物理内存，这实际上就是实现用户空间驱动的一种方法。</p>
<p>python也提供了mmap方法，因此理论上也可以通过python访问arm的寄存器。由于python是一种解释型语言，编写的脚本很容易更改而不用重新编译，因此该方法在调试时非常有用。</p>
<p>脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*-</div><div class="line">&apos;&apos;&apos;</div><div class="line">提供通过/dev/mem接口读写寄存器的方法</div><div class="line">    md - memory display</div><div class="line">    mw - memory write</div><div class="line"></div><div class="line">用法：</div><div class="line">    md addr</div><div class="line">    mw addr value</div><div class="line">&apos;&apos;&apos;</div><div class="line"></div><div class="line">import os, mmap, struct</div><div class="line">import sys, optparse</div><div class="line"></div><div class="line">word_size = 4</div><div class="line"></div><div class="line">def md(addr):</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    mmap的内存按页对齐</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    base_addr = addr &amp; ~(mmap.PAGESIZE - 1)</div><div class="line">    offset = addr - base_addr</div><div class="line">    length = offset + word_size</div><div class="line"></div><div class="line">    f = os.open(&quot;/dev/mem&quot;, os.O_RDWR | os.O_SYNC)</div><div class="line">    mem = mmap.mmap(f, length, mmap.MAP_SHARED, </div><div class="line">            mmap.PROT_READ | mmap.PROT_WRITE,</div><div class="line">            offset=base_addr)</div><div class="line">    os.close(f)</div><div class="line"></div><div class="line">    packed_reg = mem[offset:offset+word_size]</div><div class="line"></div><div class="line">    mem.close()</div><div class="line"></div><div class="line">    reg = struct.unpack(&quot;&lt;I&quot;, packed_reg)[0]</div><div class="line"></div><div class="line">    return reg</div><div class="line"></div><div class="line">def mw(addr, val):</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    mmap的内存按页对齐</div><div class="line">    &apos;&apos;&apos;</div><div class="line">    base_addr = addr &amp; ~(mmap.PAGESIZE - 1)</div><div class="line">    offset = addr - base_addr</div><div class="line">    length = offset + word_size</div><div class="line"></div><div class="line">    f = os.open(&quot;/dev/mem&quot;, os.O_RDWR | os.O_SYNC)</div><div class="line">    mem = mmap.mmap(f, length, mmap.MAP_SHARED, </div><div class="line">            mmap.PROT_READ | mmap.PROT_WRITE,</div><div class="line">            offset=base_addr)</div><div class="line">    os.close(f)</div><div class="line"></div><div class="line">    mem[offset:offset+word_size] = struct.pack(&quot;&lt;I&quot;, val)</div><div class="line"></div><div class="line">    mem.close()</div><div class="line"></div><div class="line">    return 0</div><div class="line"></div><div class="line"></div><div class="line">def main():</div><div class="line">    parser = optparse.OptionParser()</div><div class="line"></div><div class="line">    parser.add_option(&apos;-r&apos;, &apos;--read&apos;, dest=&apos;read&apos;, metavar=&apos;ADDR&apos;,</div><div class="line">            nargs=1, type=int, help=&apos;read a value&apos;)</div><div class="line"></div><div class="line">    parser.add_option(&apos;-w&apos;, &apos;--write&apos;, dest=&apos;write&apos;, metavar=&apos;ADDR VALUE&apos;,</div><div class="line">            nargs=2, type=int, help=&apos;write a value&apos;)</div><div class="line"></div><div class="line">    (options, args) = parser.parse_args()</div><div class="line"></div><div class="line">    if options.write is not None and options.read is not None:</div><div class="line">        parser.print_help()</div><div class="line">        print &apos;\nError: Both read and write are specified&apos;</div><div class="line">        return -1</div><div class="line">    elif options.write is None and options.read is None:</div><div class="line">        parser.print_help()</div><div class="line">        print &apos;\nError: Neither read or write are specified&apos;</div><div class="line">        return -1</div><div class="line"></div><div class="line">    if options.read is not None:</div><div class="line">        print &apos;%08X: %08X&apos; % (options.read, md(options.read))</div><div class="line">    else:</div><div class="line">        mw(options.write[0], options.write[1])</div><div class="line">        print &apos;%08X: %08X&apos; % (options.write[0], md(options.write[0]))</div><div class="line"></div><div class="line"></div><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    sys.exit(main())</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;/dev/mem是物理内存的全映像，可以用来访问物理内存，一般用法是open(“/dev/mem”,O_RDWR|O_SYNC)，然后mmap，接着就可以用mmap的地址来访问物理内存，这实际上就是实现用户空间驱动的一种方法。&lt;/p&gt;
&lt;p&gt;python也提供了mmap方法
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux基本操作</title>
    <link href="http://ljgabc.com/2015/04/16/2015-04-16-Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://ljgabc.com/2015/04/16/2015-04-16-Linux基本操作/</id>
    <published>2015-04-16T13:21:04.000Z</published>
    <updated>2016-11-20T14:29:41.203Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了一个Linux基本命令分享交流活动。之后将PPT总结整理了一下，记录在此。</p>
<hr>
<h3 id="查找帮助"><a href="#查找帮助" class="headerlink" title="查找帮助"></a>查找帮助</h3><blockquote>
<p>man 命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man find</div></pre></td></tr></table></figure>
<hr>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p><img src="/images/2016-02-17/18-16-22.jpg" alt="目录结构"></p>
<hr>
<h3 id="绝对路径、相对路径"><a href="#绝对路径、相对路径" class="headerlink" title="绝对路径、相对路径"></a>绝对路径、相对路径</h3><blockquote>
<p>绝对路径：路径的写法一定由根目录<code>/</code>写起，例如<code>/usr/local/mysql</code>，这就是绝对路径。</p>
<p>相对路径：路径的写法不是由根目录<code>/</code>写起，例如，用户当前在<code>/usr</code>目录下,要进入<code>/usr/local/mysql</code>，只需要<code>cd local/mysql</code>即可。这里用的就是相对路径。</p>
</blockquote>
<p>有两个特殊的相对路径，<code>.</code>和<code>..</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.   指当前目录，例如cd local/mysql，等于cd ./local/mysql</div><div class="line">..  指当前目录的上级目录</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="当前路径"><a href="#当前路径" class="headerlink" title="当前路径"></a>当前路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    pwd - 打印用户当前所在路径</div><div class="line"></div><div class="line">用法</div><div class="line">    pwd [选项]</div><div class="line"></div><div class="line">说明</div><div class="line">    -P  如果目录是链接的话，显示为真正目录</div></pre></td></tr></table></figure>
<hr>
<h3 id="切换路径"><a href="#切换路径" class="headerlink" title="切换路径"></a>切换路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    cd - 切换当前路径</div><div class="line"></div><div class="line">用法</div><div class="line">    cd  [目录]</div><div class="line"></div><div class="line">说明</div><div class="line">    -P  如果目录是链接的话，显示为真正目录</div></pre></td></tr></table></figure>
<hr>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol>
<li>ls</li>
<li>rm</li>
<li>cp</li>
<li>mv</li>
<li>chmod</li>
<li>mkdir</li>
<li>find</li>
<li>grep</li>
<li>tar</li>
<li>cat</li>
</ol>
<hr>
<h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    ls - 查看目录内容</div><div class="line"></div><div class="line">用法</div><div class="line">    ls [选项] [文件/目录]</div><div class="line"></div><div class="line">说明</div><div class="line">    列出[文件/目录]包含哪些文件（如果是文件，只列出文件名）；</div><div class="line">    如果不指定[文件/目录]，则默认列出当前文件夹中的文件；</div><div class="line">       </div><div class="line">选项</div><div class="line">    -a  显示隐藏文件</div><div class="line"></div><div class="line">    -A  与-a类似，比-a少了`.`和`..`两个文件</div><div class="line"></div><div class="line">    -h  必须和-l一起使用，打印文件大小时使用(KB,MB,GB)</div><div class="line"></div><div class="line">    -l  列出文件的详细信息(权限、所有者、组、大小、最后修改时间等)</div></pre></td></tr></table></figure>
<h3 id="ls的例子"><a href="#ls的例子" class="headerlink" title="ls的例子"></a>ls的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ls          列出当前目录文件</div><div class="line">ls /home    列出/home目录下的文件</div><div class="line">ls -l       列出当前目录的详细文件列表</div><div class="line">ls -la      列出当前目录的详细文件列表，包含隐藏文件</div></pre></td></tr></table></figure>
<hr>
<h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    rm - 删除文件或文件夹</div><div class="line"></div><div class="line">用法</div><div class="line">    rm [选项] 文件/文件夹</div><div class="line"></div><div class="line">说明</div><div class="line">    rm用来删除指定文件。默认情况下不能删除文件夹。</div><div class="line"></div><div class="line">选项</div><div class="line">    -f  强制删除（不警告、不报错）</div><div class="line"></div><div class="line">    -i  删除前让用户确认是否删除</div><div class="line"></div><div class="line">    -r, -R</div><div class="line">        删除文件夹及其内容</div></pre></td></tr></table></figure>
<h3 id="rm的例子"><a href="#rm的例子" class="headerlink" title="rm的例子"></a>rm的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rm a.txt    删除a.txt</div><div class="line">rm -i a.txt 删除a.txt,删除之前先确认</div><div class="line">rm -f a.txt 强制删除a.txt,即使a.txt不存在也不报错</div><div class="line">rm -rf abc  删除abc文件夹及其文件</div></pre></td></tr></table></figure>
<hr>
<h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    cp - 拷贝文件/目录</div><div class="line"></div><div class="line">用法</div><div class="line">    cp [选项] 源文件 目的文件</div><div class="line"></div><div class="line">说明</div><div class="line">    将`源文件`拷贝到`目的文件`。默认不能拷贝文件夹。</div><div class="line"></div><div class="line">选项</div><div class="line">    -r  拷贝文件夹。</div></pre></td></tr></table></figure>
<h3 id="cp的例子"><a href="#cp的例子" class="headerlink" title="cp的例子"></a>cp的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp a.txt abc/b.txt</div><div class="line">cp -r abc def</div></pre></td></tr></table></figure>
<hr>
<h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    mv - 移动/重命名 文件/目录</div><div class="line"></div><div class="line">用法</div><div class="line">    mv [选项] 源文件/目录  目的文件/目录</div><div class="line"></div><div class="line">说明</div><div class="line">    将`源文件/目录`重命名为`新文件/目录`，</div><div class="line">    如果源文件和目的文件不在同一个目录，则相当于剪切</div><div class="line"></div><div class="line">选项</div><div class="line">    -f  如果目的地址已经存在文件，则直接覆盖而不提示</div><div class="line"></div><div class="line">    -i  覆盖之前先要求用户确认</div><div class="line"></div><div class="line">    -n  不覆盖已有文件</div><div class="line">    如果同时指定多个以上3个选项，以最后一个为准。</div></pre></td></tr></table></figure>
<h3 id="mv的例子"><a href="#mv的例子" class="headerlink" title="mv的例子"></a>mv的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mv a.txt b.txt</div><div class="line">mv a.txt abc/a.txt</div><div class="line">mv a.txt abc/</div></pre></td></tr></table></figure>
<hr>
<h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    chmod - 修改文件/目录的属性</div><div class="line"></div><div class="line">用法</div><div class="line">    chmod [选项]  模式  文件/目录</div><div class="line"></div><div class="line">说明</div><div class="line">    将文件/目录的属性设置为指定的模式。如果是目录的话，</div><div class="line">    默认只改变该目录权限，而目录中的文件权限不变。</div><div class="line">       </div><div class="line">选项</div><div class="line">    -R  改变文件夹及其子目录中的文件权限。</div><div class="line">              </div><div class="line">模式</div><div class="line">    文件权限表示</div></pre></td></tr></table></figure>
<h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><ul>
<li>Linux中一个文件的权限分为u(所有者)、g(所在组权限)、o(其他人)三部分权限。</li>
<li>每部分权限又包含r(读)、w(写)、x(执行)的权限。</li>
<li><p>通过<code>ls -l</code>查看一个文件时，其权限信息表示如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-rwxrw-r-- 1 lijg lijg 0 3月 13 18:53 a.txt</div></pre></td></tr></table></figure>
<p>第一个字符’-‘代表该文件是一个普通文件。接下来的9个字符分别表示u(所有者)、g(所在组权限)、o(其他人)的权限。<br>每三个字符可以用一个8进制数表示,如果该位有权限为1,无则为0.因此，a.txt的权限还可以表示为764。</p>
</li>
</ul>
<h3 id="chmod的例子"><a href="#chmod的例子" class="headerlink" title="chmod的例子"></a>chmod的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">chmod u+rwx a.txt</div><div class="line">chmod g-r a.txt</div><div class="line">chmod o+x a.txt</div><div class="line">chmod a+rwx a.txt (a代表所有人)</div><div class="line">     </div><div class="line">chmod 777 a.txt (rwxrwxrwx)</div><div class="line">chmod 760 a.txt (rwxrw----)</div></pre></td></tr></table></figure>
<hr>
<h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    mkdir - 创建目录</div><div class="line"></div><div class="line">用法</div><div class="line">    mkdir [选项]  目录</div><div class="line"></div><div class="line">说明</div><div class="line">    创建目录(如果不存在的话)。</div><div class="line"></div><div class="line">选项</div><div class="line">    -p  如果创建的目录的父目录不存在的话，一起创建。</div></pre></td></tr></table></figure>
<h3 id="mkdir的例子"><a href="#mkdir的例子" class="headerlink" title="mkdir的例子"></a>mkdir的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir abc</div><div class="line">mkdir -p abc/def/ghi</div></pre></td></tr></table></figure>
<hr>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    find - 搜索文件并执行对应的动作（默认动作是打印出文件名）</div><div class="line"></div><div class="line">用法</div><div class="line">    find [选项] [路径] [表达式]</div><div class="line"></div><div class="line">说明</div><div class="line">    在给定路径中搜索与表达式匹配的文件。</div></pre></td></tr></table></figure>
<h3 id="find的例子"><a href="#find的例子" class="headerlink" title="find的例子"></a>find的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">find . -name &quot;*.cpp&quot;</div><div class="line">在当前目录下搜索所有以.cpp结尾的文件并打印到屏幕上</div><div class="line"></div><div class="line">find . -name &quot;*.cpp&quot; -print</div><div class="line">与上条命令效果一样</div><div class="line"></div><div class="line">find . -name &quot;*.cpp&quot; -o -name &quot;*.h&quot;</div><div class="line">在当前目录下搜索所有以.cpp结尾或以.h结尾的文件</div><div class="line">        </div><div class="line">find . -name &quot;*.tmp&quot; -exec rm -rf &#123;&#125; \;</div><div class="line">删除当前目录下所有以.tmp结尾的文件</div></pre></td></tr></table></figure>
<hr>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    grep, egrep, fgrep, rgrep - 在文件中查找匹配的内容</div><div class="line"></div><div class="line">用法</div><div class="line">    grep [选项] 正则表达式 [文件]</div><div class="line"></div><div class="line">说明</div><div class="line">    grep 在给定的文件中(如果没有给定，则从标准输入中)</div><div class="line">    搜索与给定的表达式匹配的行。默认情况下将匹配的行打印到屏幕上。</div><div class="line"></div><div class="line">选项</div><div class="line">    -i  匹配时忽略大小写。</div><div class="line">    -H  打印时包含对应的文件名。</div></pre></td></tr></table></figure>
<h3 id="grep的例子"><a href="#grep的例子" class="headerlink" title="grep的例子"></a>grep的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">grep -i &apos;abc&apos; a.txt</div><div class="line"></div><div class="line">更多情况是与find一起使用，在多个文件中查找指定的内容。</div><div class="line">如，忘记变量nCount在哪个文件中定义的</div><div class="line"></div><div class="line">find . -name *.cpp -exec grep -H &apos;nCount&apos; &#123;&#125; \;</div><div class="line">或</div><div class="line">find . -name *.cpp | xargs grep -H &apos;nCount&apos; &#123;&#125; \;</div><div class="line"></div><div class="line">打印出所有包含nCount的文件</div></pre></td></tr></table></figure>
<hr>
<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    tar — 压缩、解压缩工具</div><div class="line"></div><div class="line">用法</div><div class="line">    tar [选项] [文件名] [文件名] ...</div><div class="line"></div><div class="line">说明</div><div class="line">    将文件压缩成压缩包或解压缩压缩包。</div></pre></td></tr></table></figure>
<h3 id="tar的例子"><a href="#tar的例子" class="headerlink" title="tar的例子"></a>tar的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tar xvf abc.tar</div><div class="line">tar xvf abc.tar.gz</div><div class="line">tar xvf abc.tar.bz2</div><div class="line">tar xvf abc.tar.bz2 -C /home/lijg/abc</div><div class="line"></div><div class="line">tar cvf abc.tar abc def ghi </div><div class="line">将abc def ghi三个文件/目录打包成abc.tar</div></pre></td></tr></table></figure>
<hr>
<h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">名称</div><div class="line">    cat - 显示文件内容</div><div class="line"></div><div class="line">用法</div><div class="line">    cat [选项]    文件</div><div class="line"></div><div class="line">说明</div><div class="line">    显示文件内容。</div><div class="line">       </div><div class="line">    如, cat a.txt</div></pre></td></tr></table></figure>
<hr>
<h3 id="环境变量PATH"><a href="#环境变量PATH" class="headerlink" title="环境变量PATH"></a>环境变量PATH</h3><p>PATH变量是linux搜索命令的一些目录集合，只有命令所在目录处于PATH变量中时，才可以直接输入执行。<br>PATH变量以冒号<code>:</code>分割.</p>
<p>查看PATH变量，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure></p>
<p>设置PATH环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">bash:   export PATH=$PATH:/path/to/your/folder</div><div class="line">csh:    set path=&quot;$PATH&quot;:/path/to/your/folder</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h3><p>mask变量用来设置创建新文件时的默认属性(权限)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">lijg@linux:~$ umask</div><div class="line">0022</div><div class="line"></div><div class="line">lijg@linux:~$ touch abcd &amp;&amp; ls -l abcd</div><div class="line">-rw-r--r-- 1 lijg lijg 0  3月 13 15:40 abcd</div><div class="line"></div><div class="line">lijg@linux:~$ umask 077</div><div class="line"></div><div class="line">lijg@linux:~$ umask</div><div class="line">0077</div><div class="line"></div><div class="line">lijg@linux:~$ touch abcd &amp;&amp; ls -l abcd &amp;&amp; rm abcd</div><div class="line">-rw------- 1 lijg lijg 0  3月 13 15:42 abcd</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h3><p>alias 用于给命令设置别名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">lijg@linux:~$ alias lll=&apos;ls -l&apos;</div><div class="line"></div><div class="line">lijg@linux:~$ lll</div><div class="line">total 24</div><div class="line">drwxr-xr-x  2 lijg lijg  4096  3月 13 15:44 ./</div><div class="line">drwxr-xr-x 59 lijg lijg 12288  3月 13 15:43 ../</div><div class="line">-rw-r--r--  1 lijg lijg     4  3月 13 15:18 a.cpp</div><div class="line">-rw-r--r--  1 lijg lijg     3  3月 13 15:18 a.h</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h3><p>Thansk</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近做了一个Linux基本命令分享交流活动。之后将PPT总结整理了一下，记录在此。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;查找帮助&quot;&gt;&lt;a href=&quot;#查找帮助&quot; class=&quot;headerlink&quot; title=&quot;查找帮助&quot;&gt;&lt;/a&gt;查找帮助&lt;/h3&gt;&lt;blockquote
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>制作嵌入式Linux系统SD卡</title>
    <link href="http://ljgabc.com/2015/04/16/2015-04-16-%E5%88%B6%E4%BD%9C%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E7%B3%BB%E7%BB%9FSD%E5%8D%A1/"/>
    <id>http://ljgabc.com/2015/04/16/2015-04-16-制作嵌入式Linux系统SD卡/</id>
    <published>2015-04-16T13:21:03.000Z</published>
    <updated>2016-11-20T14:29:41.203Z</updated>
    
    <content type="html"><![CDATA[<p>#1 SD卡分区<br>SD卡要大于等于2GB，只需添加一个ext4分区，第一个分区之前要预留至少20MB给kernel和dtb</p>
<p><img src="/images/2016-02-17/18-17-16.jpg" alt="分区"></p>
<p>#2 烧录镜像</p>
<p>需要烧录uboot、kernel和dtb三个镜像到SD卡的预留空间中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 烧录uboot，从第2个block开始(imx会从sd卡上第2个block开始读取uboot)</div><div class="line">dd if=uboot.imx of=/dev/sdb bs=512 seek=2;sync</div><div class="line"></div><div class="line"># 烧录uImage，从2048个block开始，中间预留了 (2048-2) * 512 约 1MB空间给uboot</div><div class="line">dd if=uImage of=/dev/sdb bs=512 seek=2048;sync</div><div class="line"></div><div class="line"># 烧录dtb，中间预留了(20480-2048) * 512 越 9MB空间给uImage</div><div class="line">dd if=imx6q.dtb of=/dev/sdb bs=512 seek=20480;sync</div></pre></td></tr></table></figure>
<p>#3 文件系统<br>接下来需要将文件系统拷贝到SD卡上的ext4(ext2、ext3等等均可)分区</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkfs.ext4 /dev/sdb1</div><div class="line">mount /dev/sdb1 /mnt</div><div class="line">cp -a linux_rootfs/* /mnt &amp;&amp; sync</div><div class="line">umount /dev/sdb1</div></pre></td></tr></table></figure>
<p>#4 启动参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># uImage拷贝到内存中的位置</div><div class="line">setenv loadaddr 0x12000000</div><div class="line"></div><div class="line"># dtb拷贝到内存中的位置</div><div class="line">setenv dtbloadaddr 0x18000000</div><div class="line"></div><div class="line"># uImage位置 2048 = 0x800， 拷贝10MB的空间</div><div class="line">setenv kernel_addr 0x800</div><div class="line">setenv kernel_len 0x5000</div><div class="line"></div><div class="line"># dtb 位置 20480 = 0x5000， 拷贝256B空间</div><div class="line">setenv dtb_addr 0x5000</div><div class="line">setenv dtb_len 0x100</div><div class="line"></div><div class="line"># 先从sd卡上指定位置读出uImage和dtb，然后 bootm uImage_addr - dtb_addr</div><div class="line">setenv bootcmd &apos;mmc dev 0;mmc read $&#123;loadaddr&#125; $&#123;kernel_addr&#125; $&#123;kernel_len&#125;;mmc read $&#123;dtbloadaddr&#125; $&#123;dtb_addr&#125; $&#123;dtb_len&#125;;bootm $&#123;loadaddr&#125; - $&#123;dtbloadaddr&#125;&apos;</div><div class="line"></div><div class="line"># 设置串口及文件系统位置</div><div class="line">setenv bootargs &apos;console=ttymxc0,115200 init=/init rw root=/dev/mmcblk1p1&apos;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#1 SD卡分区&lt;br&gt;SD卡要大于等于2GB，只需添加一个ext4分区，第一个分区之前要预留至少20MB给kernel和dtb&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2016-02-17/18-17-16.jpg&quot; alt=&quot;分区&quot;&gt;&lt;/p&gt;
&lt;p&gt;#2 烧录
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="嵌入式" scheme="http://ljgabc.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>看资深投资人对商业计划书的10点建议(转)</title>
    <link href="http://ljgabc.com/2015/04/09/2015-04-09-%E7%9C%8B%E8%B5%84%E6%B7%B1%E6%8A%95%E8%B5%84%E4%BA%BA%E5%AF%B9%E5%95%86%E4%B8%9A%E8%AE%A1%E5%88%92%E4%B9%A6%E7%9A%8410%E7%82%B9%E5%BB%BA%E8%AE%AE-%E8%BD%AC/"/>
    <id>http://ljgabc.com/2015/04/09/2015-04-09-看资深投资人对商业计划书的10点建议-转/</id>
    <published>2015-04-09T13:27:28.000Z</published>
    <updated>2016-11-20T14:29:41.202Z</updated>
    
    <content type="html"><![CDATA[<p>第一，用几句话清楚说明你发现目前市场中存在一个什么空白点，或者存在一个什么问题，以及这个问题有多严重，几句话就够了。很多人写了三百张纸，抄上一些报告。投资人天天看这个，还需要你教育他吗？比如，现在网游市场里盗号严重，你有一个产品能解决这个问题，只需要一句话说清楚就可以。</p>
<p>第二，你有什么样的解决方案，或者什么样的产品，能够解决这个问题。你的方案或者产品是什么，提供了怎样的功能？</p>
<p>第三，你的产品将面对的用户群是哪些？一定要有一个用户群的划分。</p>
<p>第四，说明你的竞争力。为什么这件事情你能做，而别人不能做？是你有更多的免费带宽，还是存储可以不要钱？这只是个比方。否则如何这件事谁都能干，为什么 要投资给你？你有什么特别的核心竞争力?有什么与众不同的地方？所以，关键不在于所干事情的大小，而在于你能比别人干得好，与别人干得不一样。</p>
<p>第五，再论证一下这个市场有多大，你认为这个市场得未来是怎么样？</p>
<p>第六，说明你将如何挣钱？如果真的不知道怎么挣钱，你可以不说，可以老老实实地说，我不知道这个怎么挣钱，但是中国一亿用户会用，如果有一亿人用我觉得肯定有它的价值。想不清楚如何挣钱没有关系，投资人比你有经验，告诉他你的产品多有价值就行。</p>
<p>第七，再用简单的几句话告诉投资人，这个市场里有没有其他人在干，具体情况是怎样。不要说“我这个想法前无古人后无来者”这样的话，投资人一听这话就要打 个问号。有其他人在做同样的事不可怕，重要的是你能不能对这个产业和行业有一个基本了解和客观认识。要说实话、干实事，可以进行一些简单的优劣分析。</p>
<p>第八，突出自己的亮点。只要有一点比对方亮就行。刚出来的产品肯定有很多问题，说明你的优点在哪里。</p>
<p>第九，倒数第二张纸做财务分析，可以简单一些。不要预算未来三年挣多少钱，没人会信。说说未来一年或者六个月需要多少钱，用这些钱干什么？</p>
<p>第十，最后，如果别人还愿意听下去，介绍一下自己的团队，团队成员的优秀之处，以及自己做过什么。</p>
<p>一个包含以上内容的计划，就是一份非常好的商业计划书了。</p>
<p>补充：</p>
<p>1、大家在描述空白点和用户需求的时候，建议置于一个场景中描述，比如小明他是一个深圳北大汇丰商学院的一名男性技术宅男，他在什么情况下有什么问题，然后你们是怎么解决这个需求的。</p>
<p>2、在描述这个市场有多大的时候，建议注意好描述市场有多大时，数据要和自己做的细分市场想匹配，之前有个团队在跟我们做路演的时候，描述他所在的市场有5000亿空间，但其实那是整体市场而言的，他本身做的并不能涵盖整体市场，这会让投资人觉得人和事并不是很靠谱。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一，用几句话清楚说明你发现目前市场中存在一个什么空白点，或者存在一个什么问题，以及这个问题有多严重，几句话就够了。很多人写了三百张纸，抄上一些报告。投资人天天看这个，还需要你教育他吗？比如，现在网游市场里盗号严重，你有一个产品能解决这个问题，只需要一句话说清楚就可以。&lt;/
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>催他人办事时，怎样拿捏分寸与力度(转)</title>
    <link href="http://ljgabc.com/2015/04/08/2015-04-08-%E5%82%AC%E4%BB%96%E4%BA%BA%E5%8A%9E%E4%BA%8B%E6%97%B6%EF%BC%8C%E6%80%8E%E6%A0%B7%E6%8B%BF%E6%8D%8F%E5%88%86%E5%AF%B8%E4%B8%8E%E5%8A%9B%E5%BA%A6/"/>
    <id>http://ljgabc.com/2015/04/08/2015-04-08-催他人办事时，怎样拿捏分寸与力度/</id>
    <published>2015-04-08T10:27:45.000Z</published>
    <updated>2016-11-20T14:29:41.201Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>原文链接 <a href="http://www.jianshu.com/p/419ccccf716f?utm_campaign=newsletter&amp;utm_medium=note-854828&amp;utm_source=weekly-40#" target="_blank" rel="external">催他人办事时，怎样拿捏分寸与力度？</a></p>
</blockquote>
<p>一个项目的推进、一个决策的执行、一个方案的拍板，其中都少不了“催办”这个环节。“催办”就是催促别人采取行动配合你的工作，行动的方式多种多样，有回句话的、有表个态的、有签个字的、有告知某些情况、或者提供某些资料等等。如果别人行动及时，你的工作就会进展顺利；如果别人不给力，你的工作就会卡在节骨眼上无法推进。</p>
<h2 id="催促他人办事，要注意方式方法"><a href="#催促他人办事，要注意方式方法" class="headerlink" title="催促他人办事，要注意方式方法"></a>催促他人办事，要注意方式方法</h2><p>很多职场人知道被动等待他人回复是不靠谱，应该主动出击催促他们尽快配合。然而，很多人不知道争取他人配合，不仅需要积极主动，还需要审时度势。一个不小心，你的积极在他人眼中变成了唐突，你的催办在他人眼中变成了督办，你积极主动不遗余力的工作态度，在他人眼中是咄咄逼人甚至不识时务。为什么会这样子呢？我给大家举些例子吧。</p>
<p>常年做甲方的我经常与各路销售人员打交道，对销售人员的心理和行为有一定了解。当销售无不希望客户一看到他的报价就马上答复，一答复就马上成交。因此，在报价发给我之后，绝多数销售人员会打电话过来问“收到报价了吗？”，“贵司有意向吗？“之类的问题。也有不少人把公司介绍资料发给我之后，立马来电约我面谈。他们那种急于搞定客户拿下订单的心情表露无遗。那么，我会有什么反应？</p>
<p>客户的反应视乎采购品的急迫性、重要性和复杂性而定。如果购买的东西既简单又便宜还急着用，那不用销售跟催，客户也会追着他下单送货。假如购买的东西性质特殊、价格不菲，客户需要精挑细选货比三家的话，销售急迫的跟进就会引起客户的反感了。</p>
<p>比如说，你需要挑选一个培训课程，一个长期合作的物流公司，一个甲级写字楼的办公室，一个办公室装修承包商，一个商务礼品的供货商时，这些采购行为都不可以马上拍板成交，必须根据公司制度一步步地进行筛选比对，在合同签订之前还要按照流程进行审批。在这种情况下，如果销售人员把公司资料或者方案报价发出后没多久，就追问你意下如何，你是很难拿出确切答复的。而且当你正在货比三家，面对多家公司的销售时，如果每个销售都追着你问，你不觉得烦才怪呢。</p>
<p>有位当法务的同学看到我这一讲的微博课后，给大家举了一个这样的例子：她的上司让她去问外聘顾问律师A几个案件的进行情况，催A加快申请执行的进度，免得公司大领导觉得她们部门工作不积极。于是，她想了个法子委婉地向A了解案子的进展，并索取相关资料。</p>
<p>为什么她要委婉地问，而不是直接地问呢？因为，尽管顾问律师是她公司的业务外包方，但这种外包不是普通的劳务外包，是技术外包。能够承接技术外包的专业人士或专业机构通常具备比较强的客户选择能力。因此，与顾问律师的沟通还是客气一些为好，不假思索地直接追问业务进度，很容易引起对方的不悦，进而影响双方的合作关系。</p>
<p>另外，我们再想想，当你去某公司面试后，得到HR的一张名片，你会主动打电话问她面试结果吗？当你与远在地球另一边的一个级别不低的同事通信时，你会因为对方没有及时回复你的邮件而马上打电话或发IM给他吗？ 显然，积极主动地跟进工作的态度是必须的，但要懂得因势利导拿捏分寸，是吧？</p>
<h2 id="选择什么方式催办，要看你与对方的关系"><a href="#选择什么方式催办，要看你与对方的关系" class="headerlink" title="选择什么方式催办，要看你与对方的关系"></a>选择什么方式催办，要看你与对方的关系</h2><p>为什么催某些人办事时，不能直接打电话催促或者径直跑到他的办公室问个究竟呢？因为你和对方之间的关系还没允许你这么做。</p>
<p>你们之间的关系是一种“弱联系”。弱联系（weak ties）是指一种粘性很小的人际互动模式，其特征是接触机会少、感情基础弱、亲密程度低、利益交换少而窄。从上面的例子可以看出，与还未建立稳定业务关系的潜在客户、利益交换范围比较窄的外聘律师，以及一面之缘的HR或接触甚少的国外高层之间的关系都属于弱联系。要催他们办事，就得掌握好力度、拿捏好分寸。不然，用力过猛很容易把这“弱联系”给弄断了。</p>
<p>催促”弱联系“对象办事，尽量不要用电话或者IM。因为，这些方式有一种”要求他人立即给予答复“的意味，很容易给对方一种唐突甚至冒犯的感觉。我建议最好使用电子邮件进行交流，因为电子邮件给予对方缓冲的空间和处理的时间，显得更为客气得体。</p>
<p>接下来，我告诉大家几种催促他人给回复或者作决定的表达方式。这些方式具有不同的力度，我把它们由强至弱进行排列。请大家根据自己与沟通对象的关系进行选择，并且举一反三、灵活运用。</p>
<blockquote>
<p>“Hi, Rahel. I would love to get your reaction to the proposal I sent last week. Have you had a chance to review it? I will call you on Friday unless we have communicated before then.”</p>
</blockquote>
<p>给对方一个”最后通牒“：要是你在周五之前不回复我，我就打”夺命追魂call“。</p>
<blockquote>
<p>“I know you want to offer the program in July. I have only three days available that month: July 11, 12, and 13. Please let me know if you would like me to hold a day for you.”</p>
</blockquote>
<p>坦诚地告诉对方：其实我没多少时间陪你耗了，要么你尽快和我约个时间，要么咱们拉倒。</p>
<blockquote>
<p>“Hello, John. I am forwarding the message I sent last week to be sure you received it. I look forward to hearing from you.”</p>
</blockquote>
<p>直截了当地告诉对方：这是我第二次找你了，一直在等你回话哦。</p>
<blockquote>
<p>“If I hear from you by Friday, I will be able to incorporate your input into the preliminary design” or “If you pay by July 1, you will be eligible for the early-registration discount.”</p>
</blockquote>
<p>用小恩小惠吸引对方早日下决定。</p>
<blockquote>
<p>“Hi, Jessica. As you consider ways to improve the operation team’s writing skills, you may find this survey data instructive.”</p>
</blockquote>
<p>向对方提供一些新鲜有用的资讯，婉转地提醒对方：不要忘了我找你有事哦。</p>
<p>好，这一课就讲到这里。下一讲我们来看看一个同学遇到的难题——一个前辈塞给他一项工作时说：”不急，你慢慢做吧。“谁知没过多久这前辈就来催交货了。他想知道以后面对这种情况时，该如何处理？我们周三再聊吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;原文链接 &lt;a href=&quot;http://www.jianshu.com/p/419ccccf716f?utm_campaign=newsletter&amp;amp;utm_medium=note-854828&amp;amp;utm_source=weekly
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>亚娟的画室</title>
    <link href="http://ljgabc.com/2015/04/04/2015-04-04-%E4%BA%9A%E5%A8%9F%E7%9A%84%E7%94%BB%E5%AE%A4/"/>
    <id>http://ljgabc.com/2015/04/04/2015-04-04-亚娟的画室/</id>
    <published>2015-04-04T13:46:29.000Z</published>
    <updated>2016-11-20T14:29:41.201Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2015-04-04/1.jpg" alt="1"></p>
<p><img src="/images/2015-04-04/2.jpg" alt="2"></p>
<p><img src="/images/2015-04-04/3.jpg" alt="3"></p>
<p><img src="/images/2015-04-04/4.jpg" alt="4"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/images/2015-04-04/1.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-04-04/2.jpg&quot; alt=&quot;2&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2015-04-04/3.jp
    
    </summary>
    
      <category term="摄影" scheme="http://ljgabc.com/categories/%E6%91%84%E5%BD%B1/"/>
    
    
  </entry>
  
  <entry>
    <title>在BusyBox上启动FTP服务</title>
    <link href="http://ljgabc.com/2015/03/19/2015-03-19-%E5%9C%A8BusyBox%E4%B8%8A%E5%90%AF%E5%8A%A8FTP%E6%9C%8D%E5%8A%A1/"/>
    <id>http://ljgabc.com/2015/03/19/2015-03-19-在BusyBox上启动FTP服务/</id>
    <published>2015-03-19T10:10:06.000Z</published>
    <updated>2016-11-20T14:29:41.201Z</updated>
    
    <content type="html"><![CDATA[<p>BusyBox上自带ftp服务器——<code>ftpd</code>(Anonymous FTP Server)，没有身份验证功能，可以作为一个简易的传输文件的措施使用。</p>
<p><code>ftpd</code>可以通过设定<code>inetd.conf</code>由<code>inetd</code>启动(在有链接时inetd程序会自动启用ftpd)，或者是搭配<code>tcpsvd</code>作为单独的守护进程使用。</p>
<p>使用方法:</p>
<p>#0 FTPD的参数<br><code>ftpd</code>的使用方法如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Usage: ftpd [-wvS] [-t N] [-T N] [DIR]</div><div class="line"></div><div class="line">-w  允许上传</div><div class="line">-v  打印错误信息</div><div class="line">-S  错误信息写入SYSLOG</div><div class="line">-t  多长时间无操作算作空闲(默认2分钟, 2 * 60)</div><div class="line">-T  多长时间空闲后自动断开与客户端的连接(默认1小时，1 * 60 * 60)</div><div class="line">DIR FTP根目录</div></pre></td></tr></table></figure></p>
<p>#1. 使用tcpsvd</p>
<p><code>tcpsvd</code>可以建立TCP Socket，并将其绑定到某个程序上，命令格式如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Usage: tcpsvd [选项] IP PORT PROG [PROG ARGS]</div><div class="line"></div><div class="line">IP: 要监听的IP地址</div><div class="line">PORT:   要监听的端口</div><div class="line">PROG:   要绑定的程序</div><div class="line">PROG ARGS: 绑定应用的参数</div><div class="line"></div><div class="line">选项:</div><div class="line">    -l NAME,    本地主机名</div><div class="line">    -u USER[:GRP],  绑定后切换到USER/GROUP</div><div class="line">    -c N,   最大连接数</div><div class="line">    -C N[:MSG]  同一个IP的最大连接数（MSG为超过时的响应信息）</div><div class="line">    -v      打印详细输出</div></pre></td></tr></table></figure></p>
<p>使用<code>tcpsvd</code>启动<code>ftpd</code>的命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tcpsvd 0 21 ftpd -w /root</div></pre></td></tr></table></figure>
<p>#2. 使用inetd</p>
<p><code>inetd</code>使用<code>/etc/inetd.conf</code>里管理服务</p>
<p>使用<code>inetd</code>启动<code>ftpd</code>,需要在<code>/etc/inetd.conf</code>中增加以下代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">21 stream tcp nowait root ftpd ftpd -w /root</div></pre></td></tr></table></figure></p>
<p>然后在<code>/etc/init.d/rc.local</code>中启动<code>inetd</code>服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/sbin/inetd &amp;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BusyBox上自带ftp服务器——&lt;code&gt;ftpd&lt;/code&gt;(Anonymous FTP Server)，没有身份验证功能，可以作为一个简易的传输文件的措施使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ftpd&lt;/code&gt;可以通过设定&lt;code&gt;inetd.conf&lt;/co
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="busybox" scheme="http://ljgabc.com/tags/busybox/"/>
    
  </entry>
  
  <entry>
    <title>Oprofile-1.0.0使用方法</title>
    <link href="http://ljgabc.com/2015/03/16/2015-03-16-Oprofile-1-0-0%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>http://ljgabc.com/2015/03/16/2015-03-16-Oprofile-1-0-0使用方法/</id>
    <published>2015-03-16T14:27:17.000Z</published>
    <updated>2016-11-20T14:29:41.201Z</updated>
    
    <content type="html"><![CDATA[<p>2014年09月，linux下的程序性能分析工具oprofile发布了1.0.0版本。最大的改变是删除了传统的基于opcontrol的控制方式，而是用operf替代。同时还添加了一些新的处理器模型，以及其他的一些BUG修复<a href="http://oprofile.sourceforge.net/news/" target="_blank" rel="external">(链接在此)</a>。</p>
<p>新版简化了使用的流程，不用再执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">opcontrol --init</div><div class="line">opcontrol --start</div><div class="line"></div><div class="line">program</div><div class="line"></div><div class="line">opcontrol --dump</div><div class="line">opcontrol --stop</div><div class="line"></div><div class="line">opreport</div></pre></td></tr></table></figure></p>
<p>使用新的<code>operf</code>命令，只需要执行以下语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">operf --callgraph --events CPU_CYCLES:100000:0:1:1,\</div><div class="line">L1D_CACHE:10000:0:1:1,\</div><div class="line">L2D_CACHE:10000:0:1:1,\</div><div class="line">BUS_ACCESS:100000:0:1:1,\</div><div class="line">BUS_CYCLES:100000:0:1:1,\</div><div class="line">UNALIGNED_LDST_RETIRED:10000:0:1:1 \</div><div class="line">./program</div><div class="line"></div><div class="line">opreport</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2014年09月，linux下的程序性能分析工具oprofile发布了1.0.0版本。最大的改变是删除了传统的基于opcontrol的控制方式，而是用operf替代。同时还添加了一些新的处理器模型，以及其他的一些BUG修复&lt;a href=&quot;http://oprofile.s
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Oprofile" scheme="http://ljgabc.com/tags/Oprofile/"/>
    
      <category term="性能" scheme="http://ljgabc.com/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>渲染到纹理(RenderToTexture)</title>
    <link href="http://ljgabc.com/2015/03/04/2015-03-04-%E6%B8%B2%E6%9F%93%E5%88%B0%E7%BA%B9%E7%90%86-RenderToTexture/"/>
    <id>http://ljgabc.com/2015/03/04/2015-03-04-渲染到纹理-RenderToTexture/</id>
    <published>2015-03-04T13:09:07.000Z</published>
    <updated>2016-11-20T14:29:41.201Z</updated>
    
    <content type="html"><![CDATA[<p>渲染到纹理(RenderToTexture, RTT)，顾名思义就是把渲染目标从帧缓存变成一个纹理。这样就可以实现使一个场景经过多次GPU运算（中间过程都使用RTT），最后一次完全处理完后再渲染到屏幕上。</p>
<p>在Android中使用RTT的步骤主要有：</p>
<p>#1 初始化</p>
<ul>
<li><p>1 创建FBO</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void createFBO(void) &#123;</div><div class="line">    // 创建一个FrameBuffer对象</div><div class="line">    glGenFramebuffers(1, &amp;m_fbo);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>2 创建存储图像的纹理</p>
</li>
</ul>
<p>FBO本身不能存储图像数据，必须将数据绑定到一个纹理上，所以需要创建一个纹理，用于保存数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">void createTexture(void) &#123;</div><div class="line">    // 创建一个要绑定到FBO的纹理</div><div class="line">    glGenTextures(1, &amp;m_tex);</div><div class="line">    // 选中当前纹理</div><div class="line">    glBindTexture(GL_TEXTURE_2D, m_tex);</div><div class="line">    // 设置纹理参数</div><div class="line">    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);</div><div class="line">    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);</div><div class="line">    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);</div><div class="line">    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);</div><div class="line">            </div><div class="line">    // 该纹理必须先用glTexImage2D提交一次，以使GPU确定纹理大小</div><div class="line">    // ！！注意！！ 这里的ScreenWidth和ScreenHeight代表屏幕上实际的像素值！！！</div><div class="line">    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, ScreenWidth, ScreenHeight, 0, GL_RGBA,</div><div class="line">        GL_UNSIGNED_BYTE, NULL);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>3 绑定FBO和纹理<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">void bindFBOtoTexture(GLuint tex) &#123;    </div><div class="line">    // 绑定FBO和纹理，该纹理保存的是FBO中的COLOR信息</div><div class="line">    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D,</div><div class="line">        m_tex, 0);</div><div class="line"></div><div class="line">    // 检查是否绑定成功</div><div class="line">    GLuint status = glCheckFramebufferStatus(GL_FRAMEBUFFER);</div><div class="line">    if (status != GL_FRAMEBUFFER_COMPLETE) &#123;</div><div class="line">        LOGE(&quot;Could not attach texture to framebuffer&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>#2 渲染</p>
<ul>
<li><p>1 渲染之前，绑定FBO</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">void bindFBO(GLuint tex) &#123;</div><div class="line">    // 保存原始绑定的FBO</div><div class="line">    glGetIntegerv(GL_FRAMEBUFFER_BINDING, &amp;m_oldFBO);</div><div class="line"></div><div class="line">    // 渲染到新的FBO</div><div class="line">    glBindFramebuffer(GL_FRAMEBUFFER, m_fbo);</div><div class="line">    </div><div class="line">    // 绑定纹理</div><div class="line">    bindFBOtoTexture(tex);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>2 渲染完后，使用FBO作为下一次处理的输入</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 激活一个纹理</div><div class="line">glActiveTexture(GL_TEXTURE0);</div><div class="line"></div><div class="line">// 绑定m_fbo到0号纹理</div><div class="line">glBindTexture(GL_TEXTURE_2D, m_tex);</div><div class="line"></div><div class="line">// 设置glsl中对应的sample2D使用的纹理号</div><div class="line">glUniform1i(m_hTexture, 0);</div></pre></td></tr></table></figure>
<ul>
<li>3 处理完成后，释放FBO，渲染到屏幕</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void releaseFBO() &#123;</div><div class="line">    glBindFramebuffer(GL_FRAMEBUFFER, m_oldFBO);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;渲染到纹理(RenderToTexture, RTT)，顾名思义就是把渲染目标从帧缓存变成一个纹理。这样就可以实现使一个场景经过多次GPU运算（中间过程都使用RTT），最后一次完全处理完后再渲染到屏幕上。&lt;/p&gt;
&lt;p&gt;在Android中使用RTT的步骤主要有：&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="纹理" scheme="http://ljgabc.com/tags/%E7%BA%B9%E7%90%86/"/>
    
      <category term="GPU" scheme="http://ljgabc.com/tags/GPU/"/>
    
      <category term="OpenGL" scheme="http://ljgabc.com/tags/OpenGL/"/>
    
      <category term="GLES" scheme="http://ljgabc.com/tags/GLES/"/>
    
      <category term="RTT" scheme="http://ljgabc.com/tags/RTT/"/>
    
  </entry>
  
  <entry>
    <title>技术管理者的创业工具箱</title>
    <link href="http://ljgabc.com/2015/02/24/2015-02-24-%E6%8A%80%E6%9C%AF%E7%AE%A1%E7%90%86%E8%80%85%E7%9A%84%E5%88%9B%E4%B8%9A%E5%B7%A5%E5%85%B7%E7%AE%B1/"/>
    <id>http://ljgabc.com/2015/02/24/2015-02-24-技术管理者的创业工具箱/</id>
    <published>2015-02-24T13:07:54.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<p>本文转自“程序人生”微信公共号。</p>
<p>有个刚创业的读者问，作为一个技术管理者，都有些什么推荐的工具和系统来组织公司内部的各种系统？这个问题我之前的文章提过一些，但不系统。今天简单讲讲，目标人群是技术团队在10人到几十人的初创企业，人太少没必要，人太多可能会有更好的选择。</p>
<p>IT平台</p>
<p>建议把整个IT平台放在amazon上，或者阿里云，表面上看上去要比在本地建立各种服务多花不少钱，但间接的好处不容忽视。这个不多说。</p>
<p>身份管理</p>
<p>一个公司的IT系统，最基本的是身份管理（Identity Management）系统，它能识别进入这个王国（realm）的用户是否是一个授权的用户。这里面涉及到很多复杂的协议（LDAP，Kerberos，RADIUS等）和软件，一个个装配起来很麻烦。可以使用freeipa，它是一组开源软件的集合，能帮你解决涉及到身份管理的几乎所有问题。</p>
<p>部署好freeipa后，公司内部的大部分系统都可以与之集成，员工可以一套密码，到处使用。</p>
<p>邮箱</p>
<p>国内公司不用想了，QQ企业邮箱吧。</p>
<p>聊天/交流</p>
<p>电脑上hipchat是首选，托管免费，自己部署要买license。优先考虑托管。</p>
<p>如果想自己部署，但又舍不得花钱，可以看看开源的kandan。</p>
<p>神马，为什么不用QQ？给跪了。用用hipchat，你就知道为啥工作上的交流不该使用QQ。。。</p>
<p>手机上自然是微信了。</p>
<p>代码托管</p>
<p>代码托管可以放在github上，按月交租子就好。github解决了代码托管，知识管理（wiki），问题追踪（bug tracking），代码走读（code review）等基本需求，而且它倡导fork/branching/pull request/review/merge这样的best practice，是第一选择。</p>
<p>如果你对代码这样的「核心资产」托管在别人家里不太放心的话，但又非常习惯于github上的工作流程，可以尝试Atlassian的系列系统：stash/confluence/jira。这些都是需要花钱买license的，如果你不选github，这些可以优先考虑，而且10人以下的企业license基本算是白给（$10），业界良心。</p>
<p>不想花钱，那就gitlab + redmine，没那么好，也够用。</p>
<p>自己做代码托管要想清楚，因为日常备份和灾难恢复会占用开发人员（或者devops）的宝贵时间。建议备份往S3上备，无他，安全，便宜（阿里云有无类似服务我不知道）。</p>
<p>CI</p>
<p>jenkins是第一选择，其次是travis，这两个都没得说。QuickCheck CI没用过，感兴趣的可以也试试。</p>
<p>SSL VPN</p>
<p>如果你把各个系统部署到了amazon，很现实的一个问题就是安全性。内部系统不该有公有IP，这样，最大程度地保证了安全性。然而，没有公有IP，员工怎么访问？</p>
<p>我们需要部署OpenVPN，这样每个员工就可以登录到内网（比如说内部的IT系统，建立在10.0.0.0/24的网段）。OpenVPN是个开源软件，自带各个平台的客户端，员工可以安装相应的客户端。mac用户可以上tunnelblick。客户端配合google authenticator，可以实现高大上的密码+动态token级别的保护，创业公司一下子有了大公司的逼格。</p>
<p>出差时想远程访问公司内部系统？在家办公？OpenVPN全帮你搞定。</p>
<p>域名管理</p>
<p>貌似现在的选择也就是dnspod，还有其他么？</p>
<p>服务集成</p>
<p>hashicorp在github上open source了一个叫consul的系统，golang写的，它用DNS的方式来进行服务发现，很有意思。可以把它部署成一个中间层，屏蔽各个服务的细节，由它来进行中转（通过DNS解析）。consul不光可以对内部IT系统做服务发现，还可以对你公司的产品内部的服务部署和发现提供支持。有空的话我会讲讲consul，它是个非常有意思的服务。</p>
<p>开发/测试环境</p>
<p>建议公司统一有dotfiles（可以clone我的 tyrchen/dotfiles），把vim/bash/osx等的基础设置统一。编辑环境可以用osx，运行/测试环境可以放在vagrant上。公司可以提供一个配置妥当的内部的vagrant box，也可以使用标准的box，然后用ansible做provisioning。建议后者，因为反正也要做测试环境和生产环境的部署脚本，ansible的脚本可以做好几套，vagrant/testing/production，而且可以随着代码的变化（比如加了新的dependency）而不断更新。</p>
<p>差不多就这些。一个新员工到来后，admin给创建邮件账户，VPN账户，域账户就OK。为方便计，员工最好一水的mbp，磁盘做加密。devops最好提供给用户一套脚本，可以给新电脑同步dotfiles，安装必备软件（如homebrew，vagrant等），然后provision 最新的 vagrant box。生成完vagrant box后，新员工就可以运行所有的unit testing，TA会欣喜地看到，所有case都跑过 —— 在这个基础上，TA的生产力就可以迅速爆发出来，在新手训练营阶段，就可以hack-test-hack-test。</p>
<p>有什么遗漏么？或者，你有不同的practice？说来听听。:)</p>
<p>PS: 本文所涉概念和软件很多，就不一一提供链接。所有的名词你应该都可以google到，直接google不到，可以 google xxx github 或者 xxx opensource。至于怎么上google（科学上网），我想，这不仅是技术管理者需要掌握的，每个技术从业人员都需要知道，你说呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文转自“程序人生”微信公共号。&lt;/p&gt;
&lt;p&gt;有个刚创业的读者问，作为一个技术管理者，都有些什么推荐的工具和系统来组织公司内部的各种系统？这个问题我之前的文章提过一些，但不系统。今天简单讲讲，目标人群是技术团队在10人到几十人的初创企业，人太少没必要，人太多可能会有更好的
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>Android下开启OpenMP支持</title>
    <link href="http://ljgabc.com/2015/02/13/2015-02-13-Android%E4%B8%8B%E5%BC%80%E5%90%AFOpenMP%E6%94%AF%E6%8C%81/"/>
    <id>http://ljgabc.com/2015/02/13/2015-02-13-Android下开启OpenMP支持/</id>
    <published>2015-02-13T12:29:08.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<p>Android NDK自R9开始支持OpenMP，不需要额外的库文件和头文件，只需要在编译时加上如下的编译选项即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CFLAGS += -fopenmp</div><div class="line"></div><div class="line">CXXFLAGS += -fopenmp</div><div class="line"></div><div class="line">LDFLAGS += -fopenmp</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Android NDK自R9开始支持OpenMP，不需要额外的库文件和头文件，只需要在编译时加上如下的编译选项即可：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div cla
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
      <category term="OpenMP" scheme="http://ljgabc.com/tags/OpenMP/"/>
    
  </entry>
  
  <entry>
    <title>交叉编译OProfile到Android步骤</title>
    <link href="http://ljgabc.com/2015/02/11/2015-02-11-%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91OProfile%E5%88%B0Android%E6%AD%A5%E9%AA%A4/"/>
    <id>http://ljgabc.com/2015/02/11/2015-02-11-交叉编译OProfile到Android步骤/</id>
    <published>2015-02-11T12:15:09.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-第一次编译profile"><a href="#1-第一次编译profile" class="headerlink" title="1 第一次编译profile"></a>1 第一次编译profile</h1><h2 id="1-1-编译popt-1-16"><a href="#1-1-编译popt-1-16" class="headerlink" title="1.1 编译popt-1.16"></a>1.1 编译popt-1.16</h2><h3 id="1-1-1-补丁"><a href="#1-1-1-补丁" class="headerlink" title="1.1.1 补丁"></a>1.1.1 补丁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">--- popt-1.14/popthelp.c    2008-03-27 13:33:08.000000000 -0400</div><div class="line">+++ popt-1.14/popthelp.c    2011-02-01 21:33:21.000000000 -0500</div><div class="line">@@ -15,6 +15,11 @@</div><div class="line"> #include &lt;sys/ioctl.h&gt;</div><div class="line"> #endif</div><div class="line"> </div><div class="line">+/* needed to find the struct winsize */</div><div class="line">+#ifdef __ANDROID__</div><div class="line">+#include &lt;asm/termios.h&gt;</div><div class="line">+#endif</div><div class="line">+</div><div class="line"> #define    POPT_WCHAR_HACK</div><div class="line"> #ifdef     POPT_WCHAR_HACK</div><div class="line"> #include &lt;wchar.h&gt;         /* for mbsrtowcs */</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">--- popt-1.14/configure.ac  2008-04-02 13:17:39.000000000 -0400</div><div class="line">+++ popt-1.14/configure.ac  2011-02-01 21:33:54.000000000 -0500</div><div class="line">@@ -43,7 +43,7 @@</div><div class="line"> </div><div class="line"> AC_ISC_POSIX</div><div class="line"> AM_C_PROTOTYPES</div><div class="line">-AC_CHECK_VA_COPY</div><div class="line">+</div><div class="line"> </div><div class="line"> AC_CHECK_HEADERS(float.h glob.h langinfo.h libintl.h mcheck.h unistd.h)</div></pre></td></tr></table></figure>
<h3 id="1-1-2编译"><a href="#1-1-2编译" class="headerlink" title="1.1.2编译"></a>1.1.2编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --with-kernel-support --target=arm-linux-androideabi --host=arm-linux-androideabi --enable-install-libfd --prefix=$PWD/_install</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>由于需要静态编译，删除_install/lib目录下的所有so,so.*等文件。</p>
<h2 id="1-2编译binutils-2-20"><a href="#1-2编译binutils-2-20" class="headerlink" title="1.2编译binutils-2.20"></a>1.2编译binutils-2.20</h2><h3 id="1-2-1-补丁"><a href="#1-2-1-补丁" class="headerlink" title="1.2.1 补丁"></a>1.2.1 补丁</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">diff -Nur binutils-2.23.2-old/libiberty/getpagesize.c binutils-2.23.2/libiberty/getpagesize.c</div><div class="line">--- binutils-2.23.2-old/libiberty/getpagesize.c 2005-03-28 04:09:01.000000000 +0200</div><div class="line">+++ binutils-2.23.2/libiberty/getpagesize.c 2013-10-24 22:45:24.000000000 +0200</div><div class="line">@@ -20,6 +20,7 @@</div><div class="line"> </div><div class="line"> */</div><div class="line"> </div><div class="line">+#ifndef ANDROID</div><div class="line"> #ifndef VMS</div><div class="line"> </div><div class="line"> #include &quot;config.h&quot;</div><div class="line">@@ -88,3 +89,4 @@</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> #endif /* VMS */</div><div class="line">+#endif /* ANDROID */</div><div class="line">diff -Nur binutils-2.23.2-old/bfd/archive.c binutils-2.23.2/bfd/archive.c</div><div class="line">--- binutils-2.23.2-old/bfd/archive.c   2013-03-25 09:06:19.000000000 +0100</div><div class="line">+++ binutils-2.23.2/bfd/archive.c   2013-10-24 21:48:30.000000000 +0200</div><div class="line">@@ -1863,7 +1863,9 @@</div><div class="line">     &#123;</div><div class="line">       /* Assume we just &quot;made&quot; the member, and fake it.  */</div><div class="line">       struct bfd_in_memory *bim = (struct bfd_in_memory *) member-&gt;iostream;</div><div class="line">-      time (&amp;status.st_mtime);</div><div class="line">+      time_t t;</div><div class="line">+      time (&amp;t);</div><div class="line">+      status.st_mtime = t;</div><div class="line">       status.st_uid = getuid ();</div><div class="line">       status.st_gid = getgid ();</div><div class="line">       status.st_mode = 0644;</div></pre></td></tr></table></figure>
<h3 id="1-2-2-编译"><a href="#1-2-2-编译" class="headerlink" title="1.2.2 编译"></a>1.2.2 编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./configure --with-kernel-support --target=arm-linux-androideabi --host=arm-linux-androideabi --enable-install-libbfd --prefix=$PWD/_install --disable-nls --enable-install-libiberty --enable-shared</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>由于需要静态编译，删除_install/lib目录下的所有so,so.*等文件。</p>
<h2 id="1-3编译oprofile"><a href="#1-3编译oprofile" class="headerlink" title="1.3编译oprofile"></a>1.3编译oprofile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CFLAGS=&quot;-I/home/lijg/popt-1.16/_install/include&quot;  CXXFLAGS=&quot;-I/home/lijg/popt-1.16/_install/include&quot; LDFLAGS=&quot;-L/home/lijg/popt-1.16/_install/lib -static&quot; ./configure --with-kernel-support --target=arm-linux-androideabi --host=arm-linux-androideabi --with-binutils=/home/lijg/binutils-2.22/_install --prefix=$PWD/_instal</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-第一次编译profile&quot;&gt;&lt;a href=&quot;#1-第一次编译profile&quot; class=&quot;headerlink&quot; title=&quot;1 第一次编译profile&quot;&gt;&lt;/a&gt;1 第一次编译profile&lt;/h1&gt;&lt;h2 id=&quot;1-1-编译popt-1-16&quot;&gt;
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
      <category term="Oprofile" scheme="http://ljgabc.com/tags/Oprofile/"/>
    
  </entry>
  
  <entry>
    <title>敏捷开发之计划会议</title>
    <link href="http://ljgabc.com/2015/01/31/2015-01-31-%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%B9%8B%E8%AE%A1%E5%88%92%E4%BC%9A%E8%AE%AE/"/>
    <id>http://ljgabc.com/2015/01/31/2015-01-31-敏捷开发之计划会议/</id>
    <published>2015-01-31T11:06:10.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><code>Sprint</code>计划会议非常关键,应该算是<code>Scrum</code>中最重要的活动。要是它执行的不好,整个<code>sprint</code>甚至都会被毁掉。</p>
</blockquote>
<p>举办<code>Sprint</code>计划会议,是为了让团队获得足够的信息,能够在几个星期内不受干扰地工作,也是为了让产品负责人能对此有充分的信心。</p>
<p>OK,这么说可能比较模糊。其实,Sprint 计划会议会产生一些实实在在的成果:</p>
<ul>
<li>sprint 目标。</li>
<li>团队成员名单(以及他们的投入程度,如果不是100%的话)。</li>
<li><code>backlog</code>(即<code>sprint</code>中包括的故事列表)。</li>
<li>确定好<code>sprint</code>演示日期。</li>
<li>确定好时间地点,供举行每日<code>scrum</code>会议</li>
</ul>
<h2 id="为什么产品负责人必须参加"><a href="#为什么产品负责人必须参加" class="headerlink" title="为什么产品负责人必须参加"></a>为什么产品负责人必须参加</h2><p>有时候产品负责人会不太情愿跟团队一起花上几个小时制定<code>sprint</code>计划。“嘿,小伙子们,我想要的东西已经列下来了,我没时间参加你们的计划会议。”这可是个非常严重的问题。</p>
<p>为什么整个团队和产品负责人都必须要参加<code>sprint</code>计划会议?原因在于,每个故事都含有三个变量(范围、重要性、估算),它们两两之间都对彼此有着强烈依赖。</p>
<p>范围(scope)和重要性(importance)由产品负责人设置。估算(estimate)由团队设置。在 sprint 计划会议上,经过团队和产品负责人面对面的对话,这三个变量会逐步得到调整优化。</p>
<p>会议启动以后,产品负责人一般会先概括一下希望在这个<code>sprint</code>中达成的目标,还有他认为最重要的故事。接下来,团队从最重要的故事开始逐一讨论每个故事,一一估算时间。在这个过程中,他们会针对范围提出些重要问题:“‘删除用户’这个故事,需不需要遍历这个用户所有尚未执行的事务,把它们统统取消?”有时答复会让他们感到惊讶,促使他们调整估算。</p>
<p>在某些情况下,团队对故事做出的时间估算,跟产品负责人的想法不太一样。这可能会让他调整故事的重要性;或者修改故事的范围,导致团队重新估算,然后一连串诸如此类的后续反应。</p>
<p>这种直接的协作形式是 Scrum 的基础,也是所有敏捷软件开发的基础。</p>
<p>如果产品负责人还是坚持没时间参加怎么办?一般我会按顺序尝试下面的策略:</p>
<ul>
<li>试着让产品负责人理解,为什么他的直接参与事关项目成败,希望他可以改变念头。</li>
<li>试着在团队中找到某个人,让他在会议中充当产品负责人的代表。告诉产品负责人,“既然你没法来开会,我们这次会让 Jeff 代表你参加。他会替你在会议中行使权利,改变故事的优先级和范围。我建议,你最好在会议开始前尽可能跟他沟通到位。如果你不喜欢 Jeff 当代表,也可以推荐其他人,只要他能全程参加我们的会议就行。”</li>
<li>试着说服管理团队为我们分配新的产品负责人。</li>
<li>推迟 sprint 的启动日期,直到产品负责人找到时间参会为止。同时拒绝承诺任何交付。让团队每天都可以自由做他们最想做的事情。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Sprint&lt;/code&gt;计划会议非常关键,应该算是&lt;code&gt;Scrum&lt;/code&gt;中最重要的活动。要是它执行的不好,整个&lt;code&gt;sprint&lt;/code&gt;甚至都会被毁掉。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;举办&lt;cod
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
      <category term="敏捷" scheme="http://ljgabc.com/tags/%E6%95%8F%E6%8D%B7/"/>
    
  </entry>
  
  <entry>
    <title>敏捷开发之BackLOG</title>
    <link href="http://ljgabc.com/2015/01/30/2015-01-30-%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E4%B9%8BBackLOG/"/>
    <id>http://ljgabc.com/2015/01/30/2015-01-30-敏捷开发之BackLOG/</id>
    <published>2015-01-30T11:05:12.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>产品<code>Backlog</code>是<code>Scrum</code>的核心，也是一切的起源。</p>
</blockquote>
<p>##1 什么是Backlog</p>
<p><code>Backlog</code>是一个需求(故事、特性)组成的列表，并按照重要性进行了排序。他应该包含以下字段：</p>
<ul>
<li><code>ID</code> – 统一的标识符，自增的数字。</li>
<li><code>名称</code> – 简短的、描述性的需求(故事、特性)名。比如，“删除当前选中的文本”。它必须要含义明确，这样开发人员和产品负责人才能大致明白是什么东西，以跟其他需求(故事、特性)区分开。</li>
<li><code>重要性</code> – 产品负责人评出的一个数值，指示这个需求(故事、特性)有多重要。比如，10或者150.数值越高越重要。</li>
<li><code>初始估算</code> – 开发团队的初步估算完成该需求(故事、特性)所需的工作量。单位是一个“理想的人天”。<ul>
<li>不需要保证这个估值的绝对无误(只是根据经验的分析估算出来的)，而是要尽力保证相对的正确性。即，跟另外一个需求(故事、特性)相比，如果需要的时间是它的两倍，那么这里也应该是两倍才对(同一个开发人员的情况下)。</li>
</ul>
</li>
<li>如何演示(测试) – 大致描述一下在验收时，如何才能进行演示，本质就是一个简单的测试规范。“先这样做，然后那样做，就应该得到……的结果”<ul>
<li>如果使用TDD(测试驱动开发)，那么这段描述可以作为验收测试的伪码表示。</li>
</ul>
</li>
<li><code>注解</code> – 相关信息、解释说明和对其它资料的引用等等。一般都非常简短或没有。</li>
</ul>
<table border="2"><br>    <thead><br>        <tr><td colspan="6">一个Backlog的例子</td></tr><br>        <tr><br>            <td>ID</td><br>            <td>名称</td><br>            <td>重要性</td><br>            <td>初始估算</td><br>            <td>如何测试</td><br>            <td>注解</td><br>        </tr><br>    </thead><br>    <tbody><br>        <tr><br>            <td>1</td><br>            <td>移动鼠标到指定位置</td><br>            <td>100</td><br>            <td>2</td><br>            <td>通过JNI接口moveMouseTo(x,y),查看鼠标指针是否移动到了制定的位置</td><br>            <td></td><br>        </tr><br>        <tr><br>            <td>2</td><br>            <td>在鼠标当前所在位置模拟点击事件</td><br>            <td>80</td><br>            <td>1</td><br>            <td>通过JNI接口pressMouse(type),如果鼠标下面有按钮，应该会触发该按钮的onClick事件</td><br>            <td></td><br>        </tr><br>    <tbody><br></tbody></tbody></table>

<p>##2 Backlog的要求</p>
<blockquote>
<p>在<code>sprint</code>计划会议之前,要确保产品<code>backlog</code>的井然有序。</p>
</blockquote>
<p>在一个迭代周期开始的计划会议之前，backlog需要准备好，它代表以下几个意思：</p>
<ul>
<li>产品<code>backlog</code>必须存在。</li>
<li>只能有一个产品<code>backlog</code>和一个产品负责人(对于一个产品而言)。</li>
<li>所有重要的<code>backlog</code>条目都已经根据重要性被评过分,不同的重要程度对应不同的分数。<ul>
<li>其实,重要程度比较低的<code>backlog</code>条目,评分相同也没关系,因为它们在这次<code>sprint</code>计划会议上可能根本不会被提出来。</li>
<li>无论任何需求(故事、特性),只要产品负责人相信它会在这一个<code>sprint</code>实现,那它就应该被划分到一个特有的重要性层次。</li>
<li>分数只是用来根据重要性对<code>backlog</code>条目排序。假如<code>A</code>的分数是20,而<code>B</code>的分数是100,那仅仅是说明<code>B</code>比<code>A</code>重要而已,绝不意味着<code>B</code>比<code>A</code>重要五倍。如果<code>B</code>的分数是<code>21</code>而不是100,含义也是一样的!</li>
<li>最好在分数之间留出适当间隔,以防后面出现一个<code>C</code>,比<code>A</code>重要而不如<code>B</code>重要。当然我们也可以给<code>C</code>打一个 20.5 分,但这样看上去就很难看了,所以我们还是留出间隔来!</li>
</ul>
</li>
<li>产品负责人应当理解每个需求(故事、特性)的含义(通常需求都是由他来编写的,但是有的时候其他人也会添加一些请求,产品负责人对它们划分先后次序)。他不需要知道每个需求(故事、特性)具体是如何实现的,但是他要知道为什么这个需求(故事、特性)会在这里。</li>
</ul>
<p><strong>注意：</strong>产品负责人之外的人也可以向产品 backlog 中添加故事,但是他们不能说这个故事有多重要,这是产品负责人独有的权利。他们也不能添加时间估算,这是开发团队独有的权利。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;产品&lt;code&gt;Backlog&lt;/code&gt;是&lt;code&gt;Scrum&lt;/code&gt;的核心，也是一切的起源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;##1 什么是Backlog&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Backlog&lt;/code&gt;是一个需求(故
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
      <category term="敏捷" scheme="http://ljgabc.com/tags/%E6%95%8F%E6%8D%B7/"/>
    
  </entry>
  
  <entry>
    <title>Centos7安装Docker备忘</title>
    <link href="http://ljgabc.com/2015/01/10/2015-01-10-Centos7%E5%AE%89%E8%A3%85Docker%E5%A4%87%E5%BF%98/"/>
    <id>http://ljgabc.com/2015/01/10/2015-01-10-Centos7安装Docker备忘/</id>
    <published>2015-01-10T12:02:07.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<p>在Centos7上通过<code>yum install docker</code>后是不能直接使用docker的，还需要启动<code>docker</code>服务才可以。</p>
<p>通过以下两条命令启动<code>docker</code>服务并将其加入开机启动。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl start docker.service</div><div class="line">systemctl enable docker.service</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Centos7上通过&lt;code&gt;yum install docker&lt;/code&gt;后是不能直接使用docker的，还需要启动&lt;code&gt;docker&lt;/code&gt;服务才可以。&lt;/p&gt;
&lt;p&gt;通过以下两条命令启动&lt;code&gt;docker&lt;/code&gt;服务并将其加入开机启动。
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Docker" scheme="http://ljgabc.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>2015-01-01-2015新年好</title>
    <link href="http://ljgabc.com/2015/01/01/2015-01-01-2015%E6%96%B0%E5%B9%B4%E5%A5%BD/"/>
    <id>http://ljgabc.com/2015/01/01/2015-01-01-2015新年好/</id>
    <published>2015-01-01T02:01:22.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<p>各位2015新年快乐！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;各位2015新年快乐！&lt;/p&gt;

    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux LVM笔记</title>
    <link href="http://ljgabc.com/2014/12/24/2014-12-24-Linux-LVM%E7%AC%94%E8%AE%B0/"/>
    <id>http://ljgabc.com/2014/12/24/2014-12-24-Linux-LVM笔记/</id>
    <published>2014-12-24T13:06:43.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Happy Christmas Eve</p>
</blockquote>
<p>#1 LVM介绍<br>逻辑卷管理LVM是一个多才多艺的硬盘系统工具。无论在Linux或者其他类似的系统，都是非常的好用。传统分区使用固定大小分区，重新调整大小十分麻烦。但是，LVM可以创建和管理“逻辑”卷，而不是直接使用物理硬盘。可以让管理员弹性的管理逻辑卷的扩大缩小，操作简单，而不损坏已存储的数据。可以随意将新的硬盘添加到LVM，以直接扩展已经存在的逻辑卷。LVM并不需要重启就可以让内核知道分区的存在。</p>
<p>LVM使用分层结构，如下图所示。</p>
<p><img src="https://dn-ljgabc.qbox.me/image/0/6e/4762cd2620f3c59b4ba48c11b7336.jpg" alt=""></p>
<p>从上到下依次为：</p>
<ol>
<li>物理硬盘分区</li>
<li>建立在物理硬盘分区之上的物理卷(PV)</li>
<li>由一个或多个物理卷(PV)组成的一个卷组(VG)</li>
<li>基于卷组(VG)创建的逻辑卷(LV)</li>
</ol>
<p>逻辑卷(LV)就是我们最终使用的<code>分区</code>，挂载到<code>/</code>、<code>/home</code>等。</p>
<p>图中关键部分是逻辑卷(LV)不再依赖于实际的物理硬盘分区，而是依赖于抽象出的卷组(VG)。而卷组是可以跨分区甚至跨硬盘的。</p>
<p>在系统运行过程中，当一个分区<code>/</code>空间不足时(本质是对应的逻辑卷LV空间不足)：</p>
<ul>
<li>如果该LV对应的VG上有空间时，直接分配即可。</li>
<li>如果VG上已没有剩余空间,<ul>
<li>可以先缩小该VG上的其他LV，再增大<code>/</code>对应的LV;</li>
<li>或者在一块新硬盘上创建一个PV，加入到VG中，之后再扩大LV的大小。</li>
</ul>
</li>
</ul>
<p>#2 LVM命令</p>
<p>#2.0 硬盘分区</p>
<p>硬盘分区跟一般情况下的分区没有什么不同，只不过在选择分区类型时要指定为<code>8e</code>，即LVM对应的分区编码。</p>
<p>#2.1 物理卷(PV)<br>物理卷是建立在硬盘分区之上的。与物理卷相关的命令有：</p>
<ol>
<li>pvcreate<br>创建一个物理卷，如 <code>pvcreate /dev/sda1</code></li>
<li>pvremove<br>删除一个物理卷，如 <code>pvremove /dev/sda1</code></li>
<li>pvdisplay<br>查看物理卷情况。</li>
<li>pvresize<br>重新分配物理卷的大小。</li>
<li>pvmove<br>移动物理卷，如 <code>pvmode /dev/sda1 /dev/sda2</code></li>
<li>pvchange<br>更改物理卷的属性，如<code>pv change -x n /dev/sda1</code>(不能再分配)</li>
<li>pvs<br>打印物理卷信息，与pvdisplay类似。</li>
<li>pvck<br>检查物理卷的metadata属性。</li>
<li>pvscan<br>扫描所有硬盘上的物理卷。</li>
</ol>
<p>#2.2 卷组(VG)<br>卷组是一个或多个物理卷的集合，作为一块儿抽象的硬盘向上提供存储服务。与卷组相关的命令有：</p>
<ol>
<li>vgcreate<br>创建一个卷组，如 <code>vgcreate vg_name /dev/sda1 /dev/sda2</code>,使用两个PV创建一个VG</li>
<li>vgremove<br>删除一个卷组，如 <code>vgremove vg_name</code></li>
<li>vgdisplay<br>显示卷组信息。</li>
<li>vgextend<br>向卷组中添加物理卷，如 <code>vgextend vg_name /dev/sdb1</code></li>
<li>vgreduce<br>从卷组中删除物理卷，如 <code>vgreduce vg_name /dev/sdb1</code></li>
<li>vgmerge<br>合并两个卷组,如 <code>vgnerge vg_name my_vg</code>，将my_vg合并到vg_name</li>
<li>vgsplit<br>拆分卷组。</li>
<li>vgrename<br>卷组重命名。</li>
<li>vgchange<br>更改卷组属性。</li>
<li>vgck<br>检查卷组属性。</li>
<li>vgs<br>显示卷组信息。</li>
<li>vgscan<br>扫描硬盘上所有的卷组。</li>
<li>vgcfgbackup<br>备份卷组描述信息。</li>
<li>vgcfgrestore<br>回复卷组描述信息。</li>
<li>vgconvert<br>转换卷组信息格式，如 <code>vgconvert -M2 vg1</code>，从LVM1信息格式转换到LVM2.</li>
<li>vgexport<br>使卷组对系统不可见，便于做其他修改。</li>
<li>vgimport<br>重新使卷组对系统可见。</li>
<li>vgimportclone<br>不知。</li>
<li>vgmknodes<br>不知。</li>
</ol>
<p>#2.3 逻辑卷(LV)<br>逻辑卷是最终提供给用户使用的”分区”。与逻辑卷相关的命令有：</p>
<ol>
<li>lvcreate<br>创建逻辑卷，如 <code>lvcreate -n lv_name -L 10G vg_name</code></li>
<li>lvremove<br>删除逻辑卷，如 <code>lvremove vg_name/lv_name</code></li>
<li>lvdisplay<br>显示逻辑卷信息。</li>
<li>lvextend<br>扩展逻辑卷大小，如 <code>lvextend -L +5G vg_name/lv_name /dev/sdb1</code></li>
<li>lvresize<br>更改逻辑卷大小，如 <code>lvresize -L 15G vg_name</code></li>
<li>lvrename<br>逻辑卷重命名。</li>
<li>lvchange<br>修改逻辑卷属性。</li>
<li>lvconvert<br>转换逻辑卷类型(linear -&gt; mirror or snapshort)</li>
<li>lvreduce<br>缩小逻辑卷大小。</li>
<li>lvs<br>显示逻辑卷信息。</li>
<li>lvscan<br>扫描硬盘上所有的逻辑卷。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Happy Christmas Eve&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#1 LVM介绍&lt;br&gt;逻辑卷管理LVM是一个多才多艺的硬盘系统工具。无论在Linux或者其他类似的系统，都是非常的好用。传统分区使用固定大小分区，重新调整大小十分麻
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="LVM" scheme="http://ljgabc.com/tags/LVM/"/>
    
  </entry>
  
  <entry>
    <title>技术和管理的平衡[转]</title>
    <link href="http://ljgabc.com/2014/12/08/2014-12-08-%E6%8A%80%E6%9C%AF%E5%92%8C%E7%AE%A1%E7%90%86%E7%9A%84%E5%B9%B3%E8%A1%A1-%E8%BD%AC/"/>
    <id>http://ljgabc.com/2014/12/08/2014-12-08-技术和管理的平衡-转/</id>
    <published>2014-12-08T12:05:13.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>如何看待一线经理在技术和管理上的平衡？</p>
</blockquote>
<p>毛小天陷入了沉思。就像老冯说的，过去的两周，他的确在管理上花得时间太少，没有关心每个人手头的工作，以至于差一点因为忽视了水果公司的高优先级问题单而酿成大祸。正所谓「祸福无门，唯人所召」，如果不是自己疏懒，何以至此？所以，多花些精力在管理上，是十分必要的。</p>
<p>然而，自己是个技术经理，不是人事经理，如果技术不能服众，又何谈树立权威呢？如果讨论一个功能，自己在技术上并不了解，需要决策的时候该怎么办？</p>
<p>想来想去，毛小天觉得，一个技术经理，还是得立足于技术，脱离了技术去管理，就像没有基石的空中楼阁一样。至于二者的平衡嘛，自然是在带好团队，不出纰漏的基础上尽可能地提高自身的技术。具体时间上地分配比例，看看奇博士怎么回答吧。</p>
<p>周三，在约好的时间里，毛小天来到了奇博士的办公室。寒暄几句，还没等毛小天发问，奇博士先问上了：</p>
<blockquote>
<p>怎么样，看你渐渐进入状态了，有什么感悟么？比如说，当管理者有什么好处，又有什么坏处？</p>
<p>呃。。。好像没什么特别的好处。。。倒是信息来源多了，感觉自己是个圈内人，很多事情早一步知道；另外，视野宽了，看问题的角度也不一样了，更有大局观。坏处嘛，就是自己的时间感觉不够用了，各种各样的杂事太多，纷扰太多，以至于没有太多时间磨砺自己的技术。</p>
</blockquote>
<p>毛小天有意把话题往技术和管理的平衡上拉。果然，奇博士「中计」了。</p>
<blockquote>
<p>你觉得技术经理需要什么样的技术能力？</p>
<p>即使不是团队里技术能力最强的，也应该是处在上游吧。</p>
<p>那我问你，技术经理存在的意义是什么？</p>
<p>合理地配置资源，保证产品功能点或者项目目标按时，且高质量地完成？？</p>
<p>嗯，这里面技术能力有何作用？</p>
<p>管理者自己具备技术能力，才能甄别每个人的能力，将他们合理配置，并辅以合适的培训和指导。如果不懂技术，便无法有效地分配任务，和团队成员沟通，了解他们的状态，也无法有效地和其它团队合作。</p>
</blockquote>
<p>奇博士盯着毛小天，露出赞许的微笑。</p>
<blockquote>
<p>不错。不过管理者所需的技术能力和每个工程师所需的技术能力并不相同。随着团队的发展，需要你写代码的场合会越来越少，但你还是要花时间读团队每个人的代码。由于你能够投入到技术方面的精力越来越少，你必须做好心里准备：自己的技术很快便不是团队里最强的。此外，你代表着你的团队，所以你要把你最擅长的技术传授给团队，使其成为团队最擅长的；同时，团队最不擅长的技术你要找到人来弥补，如果找不到，你就必须亲自弥补。团队的问题就是你的问题，搞不定就是你的责任。</p>
</blockquote>
<p>毛小天小心地在心里记着奇博士所说的一字一句，忍不住问倒：</p>
<blockquote>
<p>读每个人的代码，你是指code review么？</p>
<p>非正式的code review也可以，不过我建议正式的code review交给相应的技术专家来完成，毕竟你无法非常仔细地寻找代码中的每一个潜在风险。如果这样做，你就不必干别的事了。我说的读每个人的代码，实际是观察的一种手段。作为一个管理者，你唯有通过不断观察深入了解一个人的工作，才能掌握他的能力，才能更好地做出评估。</p>
</blockquote>
<p>毛小天心里一震，又是<strong>观察</strong>！老冯几天前才刚刚给他上了一课。他觉得有必要对此了解更多，于是小心地问：</p>
<blockquote>
<p>能不能具体讲讲「观察」？</p>
<p>假设你是个销售经理，手下有三个销售。小明超额20%完成了年度任务；小强超额5%完成年度任务；而小红则刚刚好完成年度任务。如果只有这些信息，在三个人里面，你要给一个人发年终奖，还要裁掉一个人，你怎么选择？</p>
<p>我会给小明发奖金，裁掉小红。</p>
<p>如果我告诉你稍多一点信息：小明超额20%完成任务是因为他负责的华北区整个市场比预期有30%的增幅，竞争对手的增速比预期高40%；小强负责的西北区市场比预期萎缩了5%，小红负责的华南区市场比预期下滑20%，现在你该怎么选择？</p>
<p>嗯。。。我会给小强发奖金，因为实际上他做出了非凡的业绩；裁人嘛，难道裁小明？</p>
<p>如果小强是通过向代理商无节制地压货，把风险转嫁到下一年勉强做出的业绩，你又该如何选择？</p>
</blockquote>
<p>毛小天听得头都大了，三种情况，三个人被他裁了个遍。</p>
<blockquote>
<p>这是我编的案例，真实的销售业绩的计算要比这复杂。不过从这个案例里，我们可以看出，一个管理者掌握的第一手信息越多，越能做出接近正确的选择。第一手信息从何而来？很简单，自己深入到一线进行细致地观察。</p>
<p>观察是反馈的前提。通过仔细地观察，亲身实践，设身处地地思考，你才能真正了解你的团队成员，而只有在真正了解他们的基础上，你才能做出正确的判断。由此你能够给团队成员或者提供中肯的建议，或者及时地奖励。一般而言，大部分人都不会期望他的老板是个没有脾气的老好人，什么时候都说好话；反之，他们希望你真心对待自己，奖励有理有节，批评能够切中要害。</p>
<p>此外，仔细观察别人的行为对你自己也是一种帮助，说不定你能够从别人身上看到自己地影子，从而产生某种顿悟。</p>
<p>观察的方法有很多，一对一谈话，阅读对方的代码，参与到某个问题的具体讨论中，让对方给你解释某个bug的解决方案，召开定期的组会，仔细研究对方平时的一言一行，一举一动等等。这样会让员工感到他们的辛苦工作受到重视，从而产生尊重感。</p>
</blockquote>
<p>毛小天突然想到了已经离职的赵博士。赵博士以前深度参与过自己做过的一个很重要的功能。起初，他还有点觉得赵博士在干涉自己的工作，不太舒服；但开会的时候，赵博士总能提出各种各样他没有想到的问题，这让他渐渐折服。他的态度开始转变。那个历时小半年的功能做完后，他感觉自己对赵博士了解了很多，同时他也能感受到赵博士对自己的欣赏。</p>
<p>讲到这里，奇博士觉得自己已经讲得够多了，便转而问毛小天还有什么问题。毛小天正在回味呢，被这么一问，才想起自己此次想要聊的主要话题。问题到嘴边，他又收了回去。他有点想明白了，所谓的平衡，其实不是一个具体的数字，不是说花费在管理的时间60%，技术40%，或者别的比例这么简单的问题。而是随需而动，以符合团队利益为重。而且，管理者所需的技术能力主要不靠闷头在一边看书写代码来获得，而应该在和团队的互动中获得。他觉得先按照自己的这个想法来试着做，以后遇到困惑再请教。想到这里，他摇了摇头。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;如何看待一线经理在技术和管理上的平衡？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;毛小天陷入了沉思。就像老冯说的，过去的两周，他的确在管理上花得时间太少，没有关心每个人手头的工作，以至于差一点因为忽视了水果公司的高优先级问题单而酿成大祸。正所谓「祸
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>Android进入Recovery模式流程分析</title>
    <link href="http://ljgabc.com/2014/11/14/2014-11-14-Android%E8%BF%9B%E5%85%A5Recovery%E6%A8%A1%E5%BC%8F%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90/"/>
    <id>http://ljgabc.com/2014/11/14/2014-11-14-Android进入Recovery模式流程分析/</id>
    <published>2014-11-14T11:52:14.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h1><p>Recovery模式指的是一种可以对安卓机内部的数据或系统进行修改的模式，也叫工程模式。在这个模式下我们可以刷入新的安卓系统，或者对已有的系统进行备份或升级，也可以在此恢复出厂设置。在IMX6开发板上要进入Recovery模式，可以在关机时同时按下关机键+音量下进入。<br>Fastboot是一种比recovery更底层的刷机模式。就是使用USB数据线连接手机的一种刷机模式。相对于用Recovery模式卡刷来说，线刷更可靠，安全。在官方IMX6开发板上只能通过adb命令行进入（adb reboot bootloader），在此修改为在关机时同时按下关机键+音量下进入。</p>
<h1 id="2-Bootloader"><a href="#2-Bootloader" class="headerlink" title="2 Bootloader"></a>2 Bootloader</h1><h2 id="2-1-启动流程"><a href="#2-1-启动流程" class="headerlink" title="2.1 启动流程"></a>2.1 启动流程</h2><p>进入recovery模式，这个工作是由bootloader完成。IMX6开发板使用的uboot。uboot每次启动的时候都要执行<code>uboot/lib_arm/board.c</code>的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">void start_armboot(void) &#123;</div><div class="line"></div><div class="line">...</div><div class="line">/* 省略无关代码 */</div><div class="line"></div><div class="line">#ifdef CONFIG_ANDROID_RECOVERY</div><div class="line">  check_recovery_mode();    // 检查是否进入recovery模式</div><div class="line">#endif</div><div class="line"> </div><div class="line">#if defined(CONFIG_CMD_NET)</div><div class="line">  #if defined(CONFIG_NET_MULTI)</div><div class="line">    puts (&quot;Net:   &quot;);</div><div class="line">  #endif</div><div class="line">    eth_initialize(gd-&gt;bd);</div><div class="line">  #if defined(CONFIG_RESET_PHY_R)</div><div class="line">    debug (&quot;Reset Ethernet PHY\n&quot;);</div><div class="line">    reset_phy();</div><div class="line">  #endif</div><div class="line">#endif</div><div class="line">#ifdef CONFIG_FASTBOOT</div><div class="line">  check_fastboot_mode();    // 检查是否进入fastboot模式</div><div class="line">#endif</div><div class="line"></div><div class="line">/* main_loop() can return to retry autoboot, if so just run it again. */</div><div class="line">for (;;) &#123;</div><div class="line">  main_loop ();</div><div class="line">&#125;</div><div class="line"></div><div class="line">/* NOTREACHED - no way out of command loop except booting */</div></pre></td></tr></table></figure></p>
<p>可以看到进入recovery模式的关键是<code>check_recovery_mode();</code>函数;进入fastboot模式的关键是<code>check_fastboot_mode();</code>函数。而且进入recovery模式的优先级较高。</p>
<h2 id="2-2-检查是否进入recovery模式"><a href="#2-2-检查是否进入recovery模式" class="headerlink" title="2.2 检查是否进入recovery模式"></a>2.2 检查是否进入recovery模式</h2><p><code>check_recovery_mode()</code>位于<code>uboot/board/freescale/common/recovery.c</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/* export to lib_arm/board.c */</div><div class="line">void check_recovery_mode(void)</div><div class="line">&#123;</div><div class="line">    if (check_key_pressing())</div><div class="line">        setup_recovery_env();</div><div class="line">    else if (check_recovery_cmd_file()) &#123;</div><div class="line">        puts(&quot;Recovery command file founded!\n&quot;);</div><div class="line">        setup_recovery_env();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到有两种方法可以进入recovery模式。</p>
<h2 id="2-3-扫描按键"><a href="#2-3-扫描按键" class="headerlink" title="2.3 扫描按键"></a>2.3 扫描按键</h2><p><code>check_key_pressing()</code>函数也在<code>uboot/board/freescale/common/recovery.c</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">#define PRESSED_VOL_DOWN    0x01</div><div class="line">#define PRESSED_POWER       0x02</div><div class="line">#define RECOVERY_KEY_MASK (PRESSED_VOL_DOWN | PRESSED_POWER)</div><div class="line"></div><div class="line">inline int test_key(int value, struct kpp_key_info *ki)</div><div class="line">&#123;</div><div class="line">    return (ki-&gt;val == value) &amp;&amp; (ki-&gt;evt == KDepress);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int check_key_pressing(void)</div><div class="line">&#123;</div><div class="line">    struct kpp_key_info *key_info = NULL;</div><div class="line">    int state = 0, keys, i;</div><div class="line"></div><div class="line">    int ret = 0;</div><div class="line"></div><div class="line">    mxc_kpp_init();</div><div class="line">    /* due to glitch suppression circuit,</div><div class="line">       wait sometime to let all keys scanned. */</div><div class="line">    udelay(1000);</div><div class="line">    keys = mxc_kpp_getc(&amp;key_info);</div><div class="line"></div><div class="line">    printf(&quot;Detecting VOL_DOWN+POWER key for recovery(%d:%d) ...\n&quot;,</div><div class="line">        keys, keys ? key_info-&gt;val : 0);</div><div class="line">    if (keys &gt; 1) &#123;</div><div class="line">        for (i = 0; i &lt; keys; i++) &#123;</div><div class="line">            if (test_key(CONFIG_POWER_KEY, &amp;key_info[i]))</div><div class="line">                state |= PRESSED_POWER;</div><div class="line">            else if (test_key(CONFIG_VOL_DOWN_KEY, &amp;key_info[i]))</div><div class="line">                state |= PRESSED_VOL_DOWN;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if ((state &amp; RECOVERY_KEY_MASK) == RECOVERY_KEY_MASK)</div><div class="line">        ret = 1;</div><div class="line">    if (key_info)</div><div class="line">        free(key_info);</div><div class="line">    return ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过代码可以看出该函数是检测POWER键和音量下键，如果同时按下则返回1;否则，返回0.</p>
<h2 id="2-4-检查标志位和音量下"><a href="#2-4-检查标志位和音量下" class="headerlink" title="2.4 检查标志位和音量下"></a>2.4 检查标志位和音量下</h2><p><code>check_recovery_cmd_file()</code>函数位于<code>uboot/board/freescale/mx6q_sabresd/mx6q_sabresd.c</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">int check_recovery_cmd_file(void)</div><div class="line">&#123;</div><div class="line">    int button_pressed = 0; </div><div class="line">    int recovery_mode = 0; </div><div class="line"></div><div class="line">    recovery_mode = check_and_clean_recovery_flag();</div><div class="line"></div><div class="line">    /* Check Recovery Combo Button press or not. */</div><div class="line">    mxc_iomux_v3_setup_pad(MX6X_IOMUX(PAD_GPIO_5__GPIO_1_5));</div><div class="line"></div><div class="line">    gpio_direction_input(GPIO_VOL_DN_KEY);</div><div class="line"></div><div class="line">    if (gpio_get_value(GPIO_VOL_DN_KEY) == 0) &#123; /* VOL_DN key is low assert */</div><div class="line">        button_pressed = 1; </div><div class="line">        printf(&quot;Recovery key pressed\n&quot;);</div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    return recovery_mode || button_pressed;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>该函数也有两种方法返回1：一种是启动是VOL_DN按键被按下;另一种是通过<code>check_and_clean_recovery_flag()</code>函数返回1.</p>
<h2 id="2-5-检查并清空标志位"><a href="#2-5-检查并清空标志位" class="headerlink" title="2.5 检查并清空标志位"></a>2.5 检查并清空标志位</h2><p>该函数位于<code>uboot/cpu/arm_cortexa8/mx6/generic.c</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#define ANDROID_RECOVERY_BOOT  (1 &lt;&lt; 7)</div><div class="line">/* check if the recovery bit is set by kernel, it can be set by kernel</div><div class="line"> * issue a command &apos;# reboot recovery&apos; */</div><div class="line">int check_and_clean_recovery_flag(void)</div><div class="line">&#123;</div><div class="line">    int flag_set = 0; </div><div class="line">    u32 reg; </div><div class="line">    reg = readl(SNVS_BASE_ADDR + SNVS_LPGPR);</div><div class="line"></div><div class="line">    flag_set = !!(reg &amp; ANDROID_RECOVERY_BOOT);</div><div class="line"></div><div class="line">    /* clean it in case looping infinite here.... */</div><div class="line">    if (flag_set) &#123;</div><div class="line">        reg &amp;= ~ANDROID_RECOVERY_BOOT;</div><div class="line">        writel(reg, SNVS_BASE_ADDR + SNVS_LPGPR);</div><div class="line">    &#125;    </div><div class="line"></div><div class="line">    return flag_set;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看出，该函数通过读取<code>SNVS_BASE_ADDR+SNVS_LPGPR</code>寄存器的第7位来判断。如果是1,则将其置零并返回1.注释中可以看到，是kernel将其置1.</p>
<h2 id="2-6-进入recovery模式流程图"><a href="#2-6-进入recovery模式流程图" class="headerlink" title="2.6 进入recovery模式流程图"></a>2.6 进入recovery模式流程图</h2><p>至此，进入recovery模式的流程已完成，流程图如下：<br><img src="http://192.168.1.15/usr/uploads/2015/06/705603735.png" alt="流程图1"></p>
<h2 id="2-7-设置Recovery环境变量"><a href="#2-7-设置Recovery环境变量" class="headerlink" title="2.7 设置Recovery环境变量"></a>2.7 设置Recovery环境变量</h2><p>下面分析一下<code>setup_recovery_env()</code>，看一下设置Recovery环境究竟进行了哪些动作，该函数位于<code>uboot/board/freescale/common/recovery.c</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">extern struct reco_envs supported_reco_envs[];</div><div class="line"></div><div class="line">void setup_recovery_env(void)</div><div class="line">&#123;</div><div class="line">    char *env, *boot_cmd;</div><div class="line">    int bootdev = get_boot_device();</div><div class="line"></div><div class="line">    printf(&quot;recovery on bootdev: %d\n&quot;, bootdev);</div><div class="line">    boot_cmd = supported_reco_envs[bootdev].cmd;</div><div class="line"></div><div class="line">    if (boot_cmd == NULL) &#123;</div><div class="line">        printf(&quot;Unsupported bootup device for recovery: dev: %d\n&quot;, bootdev);</div><div class="line">        return;</div><div class="line">    &#125;   </div><div class="line"></div><div class="line">    printf(&quot;setup env for recovery..\n&quot;);</div><div class="line"></div><div class="line">    env = getenv(&quot;bootcmd_android_recovery&quot;);</div><div class="line">    if (!env)</div><div class="line">        setenv(&quot;bootcmd_android_recovery&quot;, boot_cmd);</div><div class="line">    setenv(&quot;bootcmd&quot;, &quot;run bootcmd_android_recovery&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>从函数中可知，当用户设置了<code>bootcmd_android_recovery</code>环境变量后，使用用户自定义的变量;否则，使用supported_reco_envs[bootdev].cmd作为默认值。<br>现在追踪一下默认值是什么，<code>get_boot_device();</code>函数位于<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">## 2.8 获取启动设备</div></pre></td></tr></table></figure></p>
<p>static inline void setup_boot_device(void)<br>{<br>    uint soc_sbmr = readl(SRC_BASE_ADDR + 0x4);<br>    uint bt_mem_ctl = (soc_sbmr &amp; 0x000000FF) &gt;&gt; 4 ;<br>    uint bt_mem_type = (soc_sbmr &amp; 0x00000008) &gt;&gt; 3;</p>
<pre><code>switch (bt_mem_ctl) {
case 0x0: 
    if (bt_mem_type)
        boot_dev = ONE_NAND_BOOT;
    else 
        boot_dev = WEIM_NOR_BOOT;
    break;
case 0x2: 
        boot_dev = SATA_BOOT;
    break;
case 0x3: 
    if (bt_mem_type)
        boot_dev = I2C_BOOT;
    else 
        boot_dev = SPI_NOR_BOOT;
    break;
case 0x4: 
case 0x5: 
    boot_dev = SD_BOOT;
    break;
case 0x6: 
case 0x7: 
    boot_dev = MMC_BOOT;
    break;
case 0x8 ... 0xf: 
    boot_dev = NAND_BOOT;
    break;
default:
    boot_dev = UNKNOWN_BOOT;
    break;
}    
</code></pre><p>}</p>
<p>enum boot_device get_boot_device(void)<br>{<br>    return boot_dev;<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">其中``SD_BOOT``等定义位于``uboot/include/asm-arm/arch-mx6/mx6.h``：</div></pre></td></tr></table></figure></p>
<p>enum boot_device {<br>    WEIM_NOR_BOOT,<br>    ONE_NAND_BOOT,<br>    PATA_BOOT,<br>    SATA_BOOT,<br>    I2C_BOOT,<br>    SPI_NOR_BOOT,<br>    SD_BOOT,<br>    MMC_BOOT,<br>    NAND_BOOT,<br>    UNKNOWN_BOOT,<br>    BOOT_DEV_NUM = UNKNOWN_BOOT,<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">因此，当使用SD卡启动时，``get_boot_device() == 6``;MMC启动时，``get_boot_device() == 7``.</div><div class="line">## 2.9 默认环境变量</div><div class="line">返回``setup_recovery_env()``函数中，``supported_reco_envs``的定义位于:``/uboot/cpu/arm_cortexa8/mx6/generic.c``:</div></pre></td></tr></table></figure></p>
<p>struct reco_envs supported_reco_envs[BOOT_DEV_NUM] = {<br>    {<br>        .cmd = CONFIG_ANDROID_RECOVERY_BOOTCMD_MMC,<br>        .args = CONFIG_ANDROID_RECOVERY_BOOTARGS_MMC,<br>    },<br>    {<br>        .cmd = NULL,<br>        .args = NULL,<br>    },<br>    {<br>        .cmd = NULL,<br>        .args = NULL,<br>    },<br>    {<br>        .cmd = NULL,<br>        .args = NULL,<br>    },<br>    {<br>        .cmd = CONFIG_ANDROID_RECOVERY_BOOTCMD_MMC,<br>        .args = CONFIG_ANDROID_RECOVERY_BOOTARGS_MMC,<br>    },<br>    {<br>        .cmd = CONFIG_ANDROID_RECOVERY_BOOTCMD_MMC,<br>        .args = CONFIG_ANDROID_RECOVERY_BOOTARGS_MMC,<br>    },<br>    {<br>        .cmd = CONFIG_ANDROID_RECOVERY_BOOTCMD_SD,<br>        .args = CONFIG_ANDROID_RECOVERY_BOOTARGS_MMC,<br>    },<br>    {<br>        .cmd = CONFIG_ANDROID_RECOVERY_BOOTCMD_MMC,<br>        .args = CONFIG_ANDROID_RECOVERY_BOOTARGS_MMC,<br>    },   </p>
<p>#ifdef CONFIG_CMD_NAND<br>    {<br>        .cmd = CONFIG_ANDROID_RECOVERY_BOOTCMD_NAND,<br>        .args = CONFIG_ANDROID_RECOVERY_BOOTARGS_NAND,<br>    },   </p>
<p>#else<br>    {<br>        .cmd = NULL,<br>        .args = NULL,<br>    },   </p>
<p>#endif<br>};<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">可以看出，从SD卡启动时，cmd返回``CONFIG_ANDROID_RECOVERY_BOOTCMD_SD``，该宏定义位于``include/configs/mx6q_sabresd_android.h``：</div></pre></td></tr></table></figure></p>
<p>#define CONFIG_ANDROID_RECOVERY_BOOTCMD_MMC  \<br>    “booti mmc3 recovery”</p>
<p>#define CONFIG_ANDROID_RECOVERY_BOOTCMD_SD  \<br>    “booti mmc2 recovery”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">## 2.10 设置Recovery环境流程图</div><div class="line">设置Recovery启动环境的流程图如下所示：</div><div class="line">![流程图2](http://192.168.1.15/usr/uploads/2015/06/579893692.png)</div><div class="line"></div><div class="line"># 3 内核</div><div class="line">在uboot中，启动时会检查SNVS_LPGPR[7]是否为1。如果是则将其清空并进入Recovery模式。</div><div class="line">## 3.1 SNVS_LGPR读写</div><div class="line">SNVS(Secure Non-Volatile Storage, 安全非易失存储)是IMX6中的一部分非易失的存储器，即使系统掉电也可以保存。正好适合用来防治这个标志位。在IMX6的datasheet中关于该位的介绍如下：</div><div class="line">&gt; The SNVS _LP General Purpose Register provides a 32 bit read write register, which can</div><div class="line">be used by any application for retaining 32 bit data during a power-down mode.</div><div class="line"></div><div class="line">SNVS_LPGPR[7]是由kernel在需要时置1的，代码位于``kernel/arch/arm/mach-mx6/system.c``：</div></pre></td></tr></table></figure></p>
<p>#define ANDROID_RECOVERY_BOOT  (1 &lt;&lt; 7)</p>
<p>#define ANDROID_FASTBOOT_BOOT  (1 &lt;&lt; 8)<br>void do_switch_recovery(void)<br>{<br>    u32 reg;</p>
<pre><code>reg = __raw_readl(MX6Q_SNVS_BASE_ADDR + SNVS_LPGPR);
reg |= ANDROID_RECOVERY_BOOT;
__raw_writel(reg, MX6Q_SNVS_BASE_ADDR + SNVS_LPGPR);
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">从函数可以看出，调用时会将SNVS_LPGPR[7]置1.</div><div class="line">## 3.2 重启流程</div><div class="line">当用户输入reboot命令重启时，会使用系统调用``sys_reboot``，位于``kernel/kernel/sys.c``：</div></pre></td></tr></table></figure></p>
<p>/*</p>
<ul>
<li>Reboot system call: for obvious reasons only root may call it,</li>
<li>and even root needs to set up some magic numbers in the registers</li>
<li>so that some mistake won’t make this reboot the whole machine.</li>
<li>You can also set the meaning of the ctrl-alt-del-key here.<br>*</li>
<li><p>reboot doesn’t sync: do that yourself before calling this.<br>*/<br>SYSCALL_DEFINE4(reboot, int, magic1, int, magic2, unsigned int, cmd,</p>
<pre><code>void __user *, arg)
</code></pre><p>{<br> char buffer[256];<br> int ret = 0;</p>
<p> /<em> We only trust the superuser with rebooting the system. </em>/<br> if (!capable(CAP_SYS_BOOT))</p>
<pre><code>return -EPERM;
</code></pre><p> /<em> For safety, we require “magic” arguments. </em>/<br> if (magic1 != LINUX_REBOOT_MAGIC1 ||</p>
<pre><code>(magic2 != LINUX_REBOOT_MAGIC2 &amp;&amp;
            magic2 != LINUX_REBOOT_MAGIC2A &amp;&amp;
    magic2 != LINUX_REBOOT_MAGIC2B &amp;&amp;
            magic2 != LINUX_REBOOT_MAGIC2C))
return -EINVAL;
</code></pre><p> /* Instead of trying to make the power_off code look like</p>
<ul>
<li><p>halt when pm_power_off is not set do it the easy way.<br>*/<br>if ((cmd == LINUX_REBOOT_CMD_POWER_OFF) &amp;&amp; !pm_power_off)<br> cmd = LINUX_REBOOT_CMD_HALT;</p>
<p>mutex_lock(&amp;reboot_mutex);<br>switch (cmd) {<br>case LINUX_REBOOT_CMD_RESTART:<br> kernel_restart(NULL);<br> break;</p>
<p>case LINUX_REBOOT_CMD_CAD_ON:<br> C_A_D = 1;<br> break;</p>
<p>case LINUX_REBOOT_CMD_CAD_OFF:<br> C_A_D = 0;<br> break;</p>
<p>case LINUX_REBOOT_CMD_HALT:<br> kernel_halt();<br> do_exit(0);<br> panic(“cannot halt”);</p>
<p>case LINUX_REBOOT_CMD_POWER_OFF:<br> kernel_power_off();<br> do_exit(0);<br> break;</p>
<p>case LINUX_REBOOT_CMD_RESTART2:<br> if (strncpy_from_user(&amp;buffer[0], arg, sizeof(buffer) - 1) &lt; 0) {</p>
<pre><code>ret = -EFAULT;
break;
</code></pre><p> }<br> buffer[sizeof(buffer) - 1] = ‘\0’;</p>
<p> kernel_restart(buffer);<br> break;</p>
</li>
</ul>
</li>
</ul>
<p>#ifdef CONFIG_KEXEC<br>    case LINUX_REBOOT_CMD_KEXEC:<br>        ret = kernel_kexec();<br>        break;</p>
<p>#endif</p>
<p>#ifdef CONFIG_HIBERNATION<br>    case LINUX_REBOOT_CMD_SW_SUSPEND:<br>        ret = hibernate();<br>        break;</p>
<p>#endif</p>
<pre><code>default:
    ret = -EINVAL;
    break;
}
mutex_unlock(&amp;reboot_mutex);
return ret;
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">从函数可以看出，当用户输入reboot recovery时，会调用``kernel_restart(&quot;recovery&quot;)``.</div><div class="line">``kernel_restart``又调用``machine_restart()``：</div></pre></td></tr></table></figure></p>
<p>/**</p>
<ul>
<li>kernel_restart - reboot the system</li>
<li>@cmd: pointer to buffer containing command to execute for restart</li>
<li>or %NULL<br>*</li>
<li>Shutdown everything and perform a clean reboot.</li>
<li>This is not safe to call in interrupt context.<br><em>/<br>void kernel_restart(char </em>cmd)<br>{<br>kernel_restart_prepare(cmd);<br>if (!cmd)<pre><code>printk(KERN_EMERG &quot;Restarting system.\n&quot;);
</code></pre>else <pre><code>printk(KERN_EMERG &quot;Restarting system with command &apos;%s&apos;.\n&quot;, cmd);
</code></pre>kmsg_dump(KMSG_DUMP_RESTART);<br>machine_restart(cmd);<br>}<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">``kernel_restart()``调用``machine_restart``,位于``kernel/arch/arm/kernel/process.c``:</div></pre></td></tr></table></figure>
</li>
</ul>
<p>void arm_machine_restart(char mode, const char <em>cmd)<br>{<br>    /</em> Flush the console to make sure all the relevant messages make it</p>
<pre><code> * out to the console drivers */
arm_machine_flush_console();

/* Disable interrupts first */
local_irq_disable();
local_fiq_disable();

/*  
 * Tell the mm system that we are going to reboot -
 * we may need it to insert some 1:1 mappings so that
 * soft boot works.
 */
setup_mm_for_reboot(mode);

/* Clean and invalidate caches */
flush_cache_all();

/* Turn off caching */
cpu_proc_fin();

/* Push out any further dirty data, and ensure cache is empty */
flush_cache_all();

/*  
 * Now call the architecture specific reboot code.
 */
arch_reset(mode, cmd);

/*  
 * Whoops - the architecture was unable to reboot.
 * Tell the user!
 */
mdelay(1000);
printk(&quot;Reboot failed -- System halted\n&quot;);
while (1);
</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在这里调用了``arch_reset(mode, cmd=“recovery”)``，位于``kernel/arch/arm/plat-mxc/system.c``:</div></pre></td></tr></table></figure></p>
<p>static void arch_reset_special_mode(char mode, const char *cmd)<br>{<br>    if (strcmp(cmd, “download”) == 0)<br>        do_switch_mfgmode();<br>    else if (strcmp(cmd, “recovery”) == 0)<br>        do_switch_recovery();<br>    else if (strcmp(cmd, “fastboot”) == 0)<br>        do_switch_fastboot();<br>}</p>
<p>/*</p>
<ul>
<li><p>Reset the system. It is called by machine_restart().<br><em>/<br>void arch_reset(char mode, const char </em>cmd)<br>{<br> unsigned int wcr_enable;</p>
<p> arch_reset_special_mode(mode, cmd);</p>
<p> …<br> /<em> 省略无关代码 </em>/<br>}<br><code>`
在这里，终于调用到了</code>do_switch_recovery()``，将SNVS_LGPR[7]置为1.</p>
<h2 id="3-3-调用关系"><a href="#3-3-调用关系" class="headerlink" title="3.3 调用关系"></a>3.3 调用关系</h2><p><img src="http://192.168.1.15/usr/uploads/2015/06/2967304704.png" alt="流程图3"></p>
</li>
</ul>
<p>完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1 介绍&quot;&gt;&lt;/a&gt;1 介绍&lt;/h1&gt;&lt;p&gt;Recovery模式指的是一种可以对安卓机内部的数据或系统进行修改的模式，也叫工程模式。在这个模式下我们可以刷入新的安卓系统
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
      <category term="Recovery" scheme="http://ljgabc.com/tags/Recovery/"/>
    
  </entry>
  
  <entry>
    <title>Linux内核设计的艺术笔记</title>
    <link href="http://ljgabc.com/2014/07/28/2014-07-28-Linux%E5%86%85%E6%A0%B8%E8%AE%BE%E8%AE%A1%E7%9A%84%E8%89%BA%E6%9C%AF%E7%AC%94%E8%AE%B0/"/>
    <id>http://ljgabc.com/2014/07/28/2014-07-28-Linux内核设计的艺术笔记/</id>
    <published>2014-07-28T14:03:52.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<p>#1 从开机到main函数</p>
<p>##1.1 启动BIOS<br><strong>x86</strong>上电进入16位实模式，CS:IP指向0xFFFF0地址，此地址为BIOS的地址空间。BIOS在完成硬件自测后，会在内存中建立中断向量表和中断服务程序。</p>
<p><strong>BIOS</strong>程序在内存最开始的位置(0x0)用1KB的空间(0x0~0x3ff)构建中断向量表，在紧挨着之后的256字节空间构建BIOS数据区（0x400~0x4ff），并在大约57KB之后的位置(0xe05b)加载8k左右的与中断向量表对应的若干中断服务程序。</p>
<p><strong>中</strong>断向量表中有256个中断向量，每个中断向量占用4字节，其中两字节是CS，两字节是IP。每个中断向量都指向一个具体的中断服务程序。</p>
<p>##1.2 加载内核到内存<br>分成三步：</p>
<p>###1.2.1 利用BIOS中断int 0x19，把第一扇区bootsect的内容加载到内存;<br>在BIOS将软盘设置为启动设备后，BIOS做完自检后，会向CPU发送一个int 0x19中断;int 0x19中断在中断向量表中的内容是0x0E6F2;对应的中断服务程序的功能是：</p>
<blockquote>
<p>找到软盘，将软盘第一扇区的内容（程序，512B）加载到内存中的0x07c00地址</p>
</blockquote>
<p>在linux 0.11版本中，这个位置防治的就是bootsect程序。</p>
<p>###1.2.2 bootsect将setup加载到内存<br><strong>在</strong>加载setup之前，bootsect先将自身加载到内存中的新位置。Linux此时对内存的规划如下：<br>BOOTSEG = 0x07c0<br>INITSET = 0x9000<br>SETUPSEG = 0x9020<br>SETUPLEN = 4<br>SYSSEG = 0x1000<br>ENDSEG = SYSSEG + SYSSIZE</p>
<p>ROOT_DEV = 0x306</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">entry start</div><div class="line">start:</div><div class="line">    mov ax, #BOOTSEG</div><div class="line">    mov ds, ax</div><div class="line">    mov ax, #INITSEG</div><div class="line">    mov es, ax</div><div class="line">    mov cx, #256</div><div class="line">    sub si, si</div><div class="line">    sub di, di</div><div class="line">    rep movw    // 将DS:SI的一字节复制到ES:DI，之后SI+=2、DI+=2， 一共复制cx次</div><div class="line">    jmpi go, INITSEG    // CS=INITSEG, IP=&amp;go</div><div class="line">go: mov ax, cs</div><div class="line">    mov ds, ax</div><div class="line">    mov es, ax</div><div class="line">    mov ss, ax</div><div class="line">    mov sp, #0xff00 // SP = ss:sp = 0x9ff00</div></pre></td></tr></table></figure>
<p><strong>接</strong>下来，bootsect将setup程序拷贝到内存，要借助BIOS提供的int 0x13中断向量来完成。int 0x13中断向量类似与DMA操作，需要事先指定要拷贝的扇区，加载的内存，程序的大小等。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">load_setup:</div><div class="line">    mov dx, #0x0000                 // 第一个磁盘</div><div class="line">    mov cs, #0x0002                 // 第二个扇区</div><div class="line">    mov bx, #0x0200                 // 拷贝到 CS:bx = 0x90200</div><div class="line">    mov ax, #0x0200 + SETUPLEN      // 拷贝4个扇区</div><div class="line">    int 0x13                        // 调用</div><div class="line">    jnc ok_load_setup</div></pre></td></tr></table></figure></p>
<p>将地一个软盘第二个扇区开始的4个扇区（即setup对应的扇区）拷贝到内存的0x90200处。不难看出，bootsect位于0x9000处，长512字节，即0x9000~0x901ff，因此，setup紧挨着bootsect程序，是连在一起的。</p>
<p>###1.2.3 bootsect将system加载到内存<br><strong>bootsect</strong>载入system程序仍然使用的是int 0x13中断。从第一个磁盘的第六个扇区开始，拷贝240个扇区到内存的0x10000往后的约120K的空间。此处耗时较长，为了防止加载期间用户误认为是机器故障而执行不恰当的操作，linux在屏幕上显示了一行信息”Loading system …”，以提示用户计算机此时正在加载操作系统。<br>之后，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jmpi 0, SETUPSEG</div></pre></td></tr></table></figure></p>
<p>跳转到setup程序开始执行。</p>
<p>待续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#1 从开机到main函数&lt;/p&gt;
&lt;p&gt;##1.1 启动BIOS&lt;br&gt;&lt;strong&gt;x86&lt;/strong&gt;上电进入16位实模式，CS:IP指向0xFFFF0地址，此地址为BIOS的地址空间。BIOS在完成硬件自测后，会在内存中建立中断向量表和中断服务程序。&lt;/p&gt;

    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="内核" scheme="http://ljgabc.com/tags/%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>Android广播用法简介</title>
    <link href="http://ljgabc.com/2014/03/20/2014-03-20-Android%E5%B9%BF%E6%92%AD%E7%94%A8%E6%B3%95%E7%AE%80%E4%BB%8B/"/>
    <id>http://ljgabc.com/2014/03/20/2014-03-20-Android广播用法简介/</id>
    <published>2014-03-20T10:56:54.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<p>#1 什么是广播<br>广播类似于设计模式中的观察者模式，主要用于进程（不同的类、模块、层次）间的消息或事件传递。广播发起者不用关心哪些模块会接收消息以及他们的动作，只需要发出消息即可；接收方不知道信息的发起者，只需要定义好当接收到广播后需要做的事情。</p>
<p>#2 广播的种类</p>
<ul>
<li>普通广播<br>  这种广播可以依次传递给各个接收器去处理。</li>
<li>有序广播<br>  这种广播在接收器端的处理顺序是按照接收器的不同优先级来区分的，高优先级的接收器会优先截获这个消息，并且可以将这个消息删除。</li>
<li>粘性消息<br>  粘性消息在发送后就一直存在于系统的消息容器里面，等待对应的处理器去处理，如果暂时没有接收器处理这个消息则一直在消息容器里面处于等待状态。</li>
<li>注意：普通广播和粘性消息不可以被截获，而有序广播是可以被截获的，</li>
</ul>
<p>#1 接收方</p>
<p>##1.1 注册广播接收器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> BroadcastReceiver myBroadcastReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;    </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;  </div><div class="line">        String action = intent.getAction();  </div><div class="line">        <span class="keyword">if</span> (isOrderedBroadcast()) &#123;  </div><div class="line">            <span class="comment">// 收到一个有序广播</span></div><div class="line">            <span class="keyword">if</span> (action.equals(<span class="string">"myAction"</span>)) &#123;  </div><div class="line">                <span class="comment">// 广播指定的动作是"myAction"</span></div><div class="line">                </div><div class="line">                String cmd = intent.getStringExtra(<span class="string">"cmd"</span>);  </div><div class="line">                <span class="comment">// 该Action附带的cmd字段内容是：</span></div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(cmd.equals(<span class="string">"hide"</span>))&#123;  </div><div class="line">                    <span class="comment">// 广播附带hide消息 </span></div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(cmd.equals(<span class="string">"show"</span>))&#123;  </div><div class="line">                    <span class="comment">// 广播附带show消息  </span></div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">this</span>.abortBroadcast();</div><div class="line">                <span class="comment">// 截断该广播</span></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// 收到错误的广播</span></div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// 这不是一个有序广播</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>##1.2 关联广播和接收器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">IntentFilter myFilter = <span class="keyword">new</span> IntentFilter();  </div><div class="line">myFilter.addAction(<span class="string">"myAction"</span>);  </div><div class="line">context.registerReceiver(myBroadcastReceiver, myFilter);  </div><div class="line"><span class="comment">// 该接收器只关心myAction类型的广播</span></div></pre></td></tr></table></figure></p>
<p>#2 发送方<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Intent intent=<span class="keyword">new</span> Intent();  </div><div class="line">intent.setAction(<span class="string">"myAction"</span>);  </div><div class="line">intent.putExtra(<span class="string">"cmd"</span>,<span class="string">"hide"</span>);  </div><div class="line"></div><div class="line"><span class="keyword">this</span>.sendBroadcast(intent); <span class="comment">// 发送普通广播</span></div><div class="line"><span class="keyword">this</span>.sendOrderedBroadcast(intent,<span class="keyword">null</span>);  <span class="comment">//发送有序广播</span></div><div class="line"><span class="keyword">this</span>.sendStickyBroadcast(intent);   <span class="comment">// 发送粘性广播</span></div></pre></td></tr></table></figure></p>
<p>完。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#1 什么是广播&lt;br&gt;广播类似于设计模式中的观察者模式，主要用于进程（不同的类、模块、层次）间的消息或事件传递。广播发起者不用关心哪些模块会接收消息以及他们的动作，只需要发出消息即可；接收方不知道信息的发起者，只需要定义好当接收到广播后需要做的事情。&lt;/p&gt;
&lt;p&gt;#2 
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
      <category term="广播" scheme="http://ljgabc.com/tags/%E5%B9%BF%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>Stanford University</title>
    <link href="http://ljgabc.com/2014/03/09/2014-03-09-Stanford-University/"/>
    <id>http://ljgabc.com/2014/03/09/2014-03-09-Stanford-University/</id>
    <published>2014-03-09T15:46:07.015Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<p>今天来到了Stanford University，参观的国外的第一所大学。中午吃完饭从Saratoga出发，乘57换乘522到大学门口下的。</p>
<p>国外的大学果然开发，连个门都木有，怎么合影。。。。</p>
<p>根据Google Map找到了Vistor Center，要了张校园地图。然后就沿着主干道往里走。先到了Hoover Tower，可惜我到的时候人家正好关门了（下午4点关门），只在外面拍了几张照片。据说站在塔顶可以俯视整个学校，可惜了。</p>
<p>下一站就是大教堂了。真的很大，不过也很可惜，里面正在做弥撒，也没进去。。。。</p>
<p>最后一站就是bookstore了，在里面买了几张明信片，可惜木有卖邮票的。。。</p>
<p><img src="/images/2014-03-09/IMG_20140309_154447.jpg" alt="Stanford University"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来到了Stanford University，参观的国外的第一所大学。中午吃完饭从Saratoga出发，乘57换乘522到大学门口下的。&lt;/p&gt;
&lt;p&gt;国外的大学果然开发，连个门都木有，怎么合影。。。。&lt;/p&gt;
&lt;p&gt;根据Google Map找到了Vistor Cent
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>西海岸</title>
    <link href="http://ljgabc.com/2014/03/08/2014-03-08-%E8%A5%BF%E6%B5%B7%E5%B2%B8/"/>
    <id>http://ljgabc.com/2014/03/08/2014-03-08-西海岸/</id>
    <published>2014-03-08T15:12:01.000Z</published>
    <updated>2016-11-20T14:29:41.200Z</updated>
    
    <content type="html"><![CDATA[<p>今天周末，跑到圣塔科鲁兹沙滩看海去了。</p>
<p>从San Jose坐23路到DownTown，转17路高速直达Santa Cruz（圣塔科鲁兹），到终点站下车，才$4，很便宜。下车后沿着路向南走就可以了，走大概10分钟就能看到一个很大的游乐场，游乐场另一边就是海滩.</p>
<p><img src="/images/2014-03-08/IMG_20140308_155127.jpg" alt="Santa Cruz"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天周末，跑到圣塔科鲁兹沙滩看海去了。&lt;/p&gt;
&lt;p&gt;从San Jose坐23路到DownTown，转17路高速直达Santa Cruz（圣塔科鲁兹），到终点站下车，才$4，很便宜。下车后沿着路向南走就可以了，走大概10分钟就能看到一个很大的游乐场，游乐场另一边就是海滩.&lt;
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
      <category term="摄影" scheme="http://ljgabc.com/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="旅行" scheme="http://ljgabc.com/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>美国生活</title>
    <link href="http://ljgabc.com/2014/03/04/2014-03-04-%E7%BE%8E%E5%9B%BD%E7%94%9F%E6%B4%BB/"/>
    <id>http://ljgabc.com/2014/03/04/2014-03-04-美国生活/</id>
    <published>2014-03-04T06:26:10.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>来美国一周多了，时差还是没有倒过来，每天夜里2点准时醒，真叫人无奈。。。 </p>
<p>作晚按照惯例又醒了，好的是，这次倒没有一直到天亮都每睡着，起来到客厅上了会儿网，4点多又回去睡了，一觉到9点~~</p>
<p>说一下在这边的感受吧</p>
<p>1 人少、车多</p>
<p>我们虽然说没有住在市中心，但这里起码是大名鼎鼎的IT圣地——硅谷啊，人也太少了。。。</p>
<p>在大街上走，基本看不到人影，除了飞奔在路上的车里的。美国人民习惯了出门就开车，基本没有走路的。（市中心的街上有，我们这算是郊区，但比起国内，人确实少多了）</p>
<p>街上没有小商小贩，因为没有人在街上走，都是开车。。。。</p>
<p>2 空气好</p>
<p>虽然深圳也是沿海城市，但跟这里比起来，空气还是差一些</p>
<p>3 楼矮</p>
<p>基本没有高层，我住这附近3层算很高的了，基本都是1、2层的，连办公的地方都只有两层。。。</p>
<p>美国的house基本都是带院的小别墅，国内的估计只能叫公寓了。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来美国一周多了，时差还是没有倒过来，每天夜里2点准时醒，真叫人无奈。。。 &lt;/p&gt;
&lt;p&gt;作晚按照惯例又醒了，好的是，这次倒没有一直到天亮都每睡着，起来到客厅上了会儿网，4点多又回去睡了，一觉到9点~~&lt;/p&gt;
&lt;p&gt;说一下在这边的感受吧&lt;/p&gt;
&lt;p&gt;1 人少、车多&lt;/p
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
      <category term="旅游" scheme="http://ljgabc.com/tags/%E6%97%85%E6%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>探访Google总部</title>
    <link href="http://ljgabc.com/2014/03/02/2014-03-02-%E6%8E%A2%E8%AE%BFGoogle%E6%80%BB%E9%83%A8/"/>
    <id>http://ljgabc.com/2014/03/02/2014-03-02-探访Google总部/</id>
    <published>2014-03-02T14:26:10.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>今天高中同学来San Jose(圣何塞)找我叙旧，一起吃完午饭，时间还早，就让她开车带我们去位于Mountain View(山景城)的Google总部逛了一圈。</p>
<p>由于是周六，Google里面没有人上班，我们就在园区里逛了一圈，不然如果有认识的人，还可以带你进去参观一下。Google素以为员工提供轻松自由的工作环境著称，这次有机会到这里参观，才真正体会到这一点。</p>
<p>园区内随处可见的谷歌自行车，只要是员工就能骑，虽然我们不是员工，也体验了一把~</p>
<p><img src="/images/2014-03-02/IMG_20140302_153109.jpg" alt="Google"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天高中同学来San Jose(圣何塞)找我叙旧，一起吃完午饭，时间还早，就让她开车带我们去位于Mountain View(山景城)的Google总部逛了一圈。&lt;/p&gt;
&lt;p&gt;由于是周六，Google里面没有人上班，我们就在园区里逛了一圈，不然如果有认识的人，还可以带你进去
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
      <category term="摄影" scheme="http://ljgabc.com/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="旅行" scheme="http://ljgabc.com/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>使用C++扩展NODEJS</title>
    <link href="http://ljgabc.com/2014/02/23/2014-02-23-%E4%BD%BF%E7%94%A8C-%E6%89%A9%E5%B1%95NODEJS/"/>
    <id>http://ljgabc.com/2014/02/23/2014-02-23-使用C-扩展NODEJS/</id>
    <published>2014-02-23T14:56:54.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>目的：使用c/c++控制硬件，nodejs做web后端，实现网络设备</p>
</blockquote>
<p>使用<code>C/C++</code>来扩展<code>NodeJs</code>是非常容易的，像几乎所有的教程一下，我们先来个HelloWorld：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// helloworld.cpp</div><div class="line"></div><div class="line">#include &lt;node.h&gt;    //首先引入node头文件</div><div class="line"></div><div class="line">using namespace v8;  //使用V8和，node命名空间</div><div class="line">using namespace node;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 这个就是我们要扩展到NodeJs的c函数了，函数的原型一定得是</div><div class="line"> * Handle&lt;Value&gt; function_name(const Arguments&amp; args);</div><div class="line"> * 里面就可以使用C++写各种底层操作了</div><div class="line"> */</div><div class="line">Handle&lt;Value&gt; sayHelloWorld(const Arguments&amp; args)&#123;</div><div class="line">    HandleScope scope;</div><div class="line">    printf(&quot;Hello World!\n&quot;); //打印一个“Hello World!”</div><div class="line">    return scope.Close(Undefined()); //返回undefined</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 初始化函数，将需要导出的方法绑定到js对象上</div><div class="line"> * 类似 export.XXX = function()&#123;&#125;;</div><div class="line"> */</div><div class="line">void init(Handle&lt;Object&gt; target) &#123;</div><div class="line">    NODE_SET_METHOD(target, &quot;say&quot;, sayHelloWorld);</div><div class="line">&#125;</div><div class="line"></div><div class="line">NODE_MODULE(helloworld, init); //Node require的时候会执行的函数，整个模块的入口</div></pre></td></tr></table></figure>
<p>有了C文件，怎么编译呢？<code>NodeJs</code>提供了<code>node-gyp</code>作为模块的编译工具，使用起来也非常简单，所需要的仅仅只有一个<code>Json</code>格式的<code>binding.gyp</code>文件<strong>（里面的注释只是为了说明参数含义，但是会破坏<code>Json</code>结构，实际使用的时候需要去掉）</strong>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//binding.gyp</div><div class="line">&#123;</div><div class="line">    &quot;targets&quot;: [&#123;</div><div class="line">        &quot;target_name&quot;: &quot;helloworld&quot;, //模块名称</div><div class="line">        &quot;sources&quot;: [</div><div class="line">            &quot;helloworld.cpp&quot;  //源代码列表</div><div class="line">        ]</div><div class="line">    &#125;]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>好了，我们所需要的就是这些了。接下来就是编译了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">node-gyp configure #生成Makefile等依赖文件</div><div class="line">node-gyp build #编译模块</div></pre></td></tr></table></figure></p>
<p>如果你够幸运的话，应该能在当前目录下的<code>build/Release/helloworld.node</code>找到生成的模块。<br>写个简单的脚本测试一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// test_helloworld.js</div><div class="line">var helloworld = require(&quot;./build/Release/helloworld.node&quot;);</div><div class="line">helloworld.say();</div></pre></td></tr></table></figure></p>
<p>运行一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node test_helloworld.js</div></pre></td></tr></table></figure></p>
<p>如果没有错的话，应该能看到控制台输出<code>“Hello World!”</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;目的：使用c/c++控制硬件，nodejs做web后端，实现网络设备&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用&lt;code&gt;C/C++&lt;/code&gt;来扩展&lt;code&gt;NodeJs&lt;/code&gt;是非常容易的，像几乎所有的教程一下，我们先来个Hel
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="nodejs" scheme="http://ljgabc.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>整理照片</title>
    <link href="http://ljgabc.com/2014/02/22/2014-02-22-%E6%95%B4%E7%90%86%E7%85%A7%E7%89%87/"/>
    <id>http://ljgabc.com/2014/02/22/2014-02-22-整理照片/</id>
    <published>2014-02-22T02:29:10.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>马上去美国了，整理电脑才发现去年9月在哈尔滨拍的照片，还有中间好多照片，一直都没有整理，真是越来越懒了。</p>
<p>以前拍完照片回来，总是想着第一时间发微博、朋友圈等，现在也没兴趣了，所有照片都存在自己电脑上，权当是一份记忆吧。</p>
<p>附上两张太阳岛的照片～</p>
<ul>
<li><p>路标<br><img src="/images/2014-02-22/IMGP3758.JPG" alt="路标.JPG"></p>
</li>
<li><p>山楂树<br><img src="/images/2014-02-22/IMGP3780.JPG" alt="山楂树.JPG"></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;马上去美国了，整理电脑才发现去年9月在哈尔滨拍的照片，还有中间好多照片，一直都没有整理，真是越来越懒了。&lt;/p&gt;
&lt;p&gt;以前拍完照片回来，总是想着第一时间发微博、朋友圈等，现在也没兴趣了，所有照片都存在自己电脑上，权当是一份记忆吧。&lt;/p&gt;
&lt;p&gt;附上两张太阳岛的照片～&lt;/
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
      <category term="摄影" scheme="http://ljgabc.com/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="旅行" scheme="http://ljgabc.com/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Android下ndk程序性能分析工具GPROF</title>
    <link href="http://ljgabc.com/2014/02/20/2014-02-20-Android%E4%B8%8Bndk%E7%A8%8B%E5%BA%8F%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7GPROF/"/>
    <id>http://ljgabc.com/2014/02/20/2014-02-20-Android下ndk程序性能分析工具GPROF/</id>
    <published>2014-02-20T06:50:10.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>由于oprofile在imx6上bug多多，很不好用，因此又找到了新的性能测试工具gprof。</p>
<p>已经有人将其移至到android平台，可以用来测试ndk程序的性能，见<a href="https://code.google.com/p/android-ndk-profiler/" target="_blank" rel="external">android-ndk-profiler</a></p>
<p>#使用步骤</p>
<p>1 下载程序，源码在jni目录，编译 </p>
<p>2 编译和链接自己的程序时时加上 -pg选项</p>
<p>3 在自己的程序中添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// start dump</div><div class="line">monstartup(&quot;your_lib.so&quot;);</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">// stop dump</div><div class="line">moncleanup();</div></pre></td></tr></table></figure></p>
<p>4 运行程序，默认生成/sdcard/gmon.out，里面保存了dump的记录</p>
<p>5 将gmon.out下载到本地，使用arm-linux-androideabi-gprof工具分析</p>
<p>/path/to/arm-linux-androideabi-gprof your_lib.so gmon.out</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于oprofile在imx6上bug多多，很不好用，因此又找到了新的性能测试工具gprof。&lt;/p&gt;
&lt;p&gt;已经有人将其移至到android平台，可以用来测试ndk程序的性能，见&lt;a href=&quot;https://code.google.com/p/android-ndk-
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
      <category term="gprof" scheme="http://ljgabc.com/tags/gprof/"/>
    
      <category term="ndk" scheme="http://ljgabc.com/tags/ndk/"/>
    
  </entry>
  
  <entry>
    <title>颐和园</title>
    <link href="http://ljgabc.com/2014/02/15/2014-02-15-%E5%BF%86%E9%A2%90%E5%92%8C%E5%9B%AD%E9%A3%8E%E6%99%AF/"/>
    <id>http://ljgabc.com/2014/02/15/2014-02-15-忆颐和园风景/</id>
    <published>2014-02-15T08:13:10.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>2012年11月和几个同事好友游颐和园的照片，当时也算秋高气爽了，风景宜人。</p>
<p>#万寿山<br><img src="/images/2014-02-15/wanshoushan.jpg" alt="万寿山"></p>
<p>#十七孔桥<br><img src="/images/2014-02-15/shiqikongqiao.jpg" alt="十七孔桥"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2012年11月和几个同事好友游颐和园的照片，当时也算秋高气爽了，风景宜人。&lt;/p&gt;
&lt;p&gt;#万寿山&lt;br&gt;&lt;img src=&quot;/images/2014-02-15/wanshoushan.jpg&quot; alt=&quot;万寿山&quot;&gt;&lt;/p&gt;
&lt;p&gt;#十七孔桥&lt;br&gt;&lt;img src=&quot;
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
      <category term="摄影" scheme="http://ljgabc.com/tags/%E6%91%84%E5%BD%B1/"/>
    
      <category term="旅行" scheme="http://ljgabc.com/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>Android在应用程序中选择图片</title>
    <link href="http://ljgabc.com/2014/02/14/2014-02-14-Android%E5%9C%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E4%B8%AD%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87/"/>
    <id>http://ljgabc.com/2014/02/14/2014-02-14-Android在应用程序中选择图片/</id>
    <published>2014-02-14T08:43:10.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>在Android应用程序中打开系统的图片浏览器，并选择一张图片</p>
<h2 id="打开浏览图片"><a href="#打开浏览图片" class="headerlink" title="打开浏览图片"></a>打开浏览图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Intent pickIntent = new Intent(); </div><div class="line">pickIntent.setType(&quot;image/*&quot;); </div><div class="line">pickIntent.setAction(Intent.ACTION_GET_CONTENT); </div><div class="line">      </div><div class="line">startActivityForResult(Intent.createChooser(pickIntent, &quot;Select Picture&quot;), 0);</div></pre></td></tr></table></figure>
<h2 id="获取选择的图片路径"><a href="#获取选择的图片路径" class="headerlink" title="获取选择的图片路径"></a>获取选择的图片路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">        if (resultCode == Activity.RESULT_OK) &#123;</div><div class="line">            Uri uri = data.getData();</div><div class="line">            Cursor cursor = this.getContentResolver().query(uri, null, null, null, null);</div><div class="line">            cursor.moveToFirst();</div><div class="line">            String path =  cursor.getString(1);  </div><div class="line">            Log.i(&quot;Image&quot;, &quot;filepath: &quot; + path)</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Android应用程序中打开系统的图片浏览器，并选择一张图片&lt;/p&gt;
&lt;h2 id=&quot;打开浏览图片&quot;&gt;&lt;a href=&quot;#打开浏览图片&quot; class=&quot;headerlink&quot; title=&quot;打开浏览图片&quot;&gt;&lt;/a&gt;打开浏览图片&lt;/h2&gt;&lt;figure class=&quot;hig
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>Android防止命令行休眠方法</title>
    <link href="http://ljgabc.com/2014/02/11/2014-02-11-Android%E9%98%B2%E6%AD%A2%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%BC%91%E7%9C%A0%E6%96%B9%E6%B3%95/"/>
    <id>http://ljgabc.com/2014/02/11/2014-02-11-Android防止命令行休眠方法/</id>
    <published>2014-02-11T07:53:20.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下Android suspend时会把console也suspend，之后从串口上都看不到任何信息，也无法继续输入命令调试。为了使Android在suspend时保持console可用，可以在kernel启动参数里面加上no_console_suspend，这样console将不会随着Android进入休眠模式。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;默认情况下Android suspend时会把console也suspend，之后从串口上都看不到任何信息，也无法继续输入命令调试。为了使Android在suspend时保持console可用，可以在kernel启动参数里面加上no_console_suspend，这样co
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
      <category term="休眠" scheme="http://ljgabc.com/tags/%E4%BC%91%E7%9C%A0/"/>
    
  </entry>
  
  <entry>
    <title>为什么工程师应该养成写作的习惯(转)</title>
    <link href="http://ljgabc.com/2014/02/03/2014-02-03-%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B7%A5%E7%A8%8B%E5%B8%88%E5%BA%94%E8%AF%A5%E5%85%BB%E6%88%90%E5%86%99%E4%BD%9C%E7%9A%84%E4%B9%A0%E6%83%AF/"/>
    <id>http://ljgabc.com/2014/02/03/2014-02-03-为什么工程师应该养成写作的习惯/</id>
    <published>2014-02-03T15:05:09.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>在学校里，有“文科生”和“理科生”的区分，学习内容不同，思维方式也有差异。我是一名理科生，大学里我的专业是计算机科学，毕业后我的工作是软件工程师。在这个过程中，我发现文理科之间的鸿沟始终无法弥合。我见到的很多工程师害怕写文章，而文科生看到代码就头疼。</p>
<p>我认为，程序员应该养成写作的习惯。因为写文章会锻炼许多对于编程十分有益的技能。</p>
<p><strong>写文章和写代码最核心的共同之处在于它们都需要清晰思考的能力。</strong>顶尖的工程师往往也是优秀的写作者，他们的文章和代码一样富有逻辑性，行文流畅、优雅。</p>
<p>文章和代码有很多相似之处：二者都是从一个空白的页面开始，把一个想法最终变成完整的产品，推向特定的受众；写文章和写代码都需要你把一系列有逻辑的语句封装进一个个模块中，这些模块可以是函数也可以是文章的段落；好代码与好文章一样都需要言简意赅，不然就会浪费 CPU 资源或人的精力。</p>
<p>当某个产品快要完工时，工程师会像作品快要发表的作家一样焦虑不安。和写文章一样，软件永远不会有彻底完成的时候，工程师需要花更多时间优化代码、开发新功能或者重做某个部分，因为他们担心发布的作品没有展现出自己最好的一面。</p>
<p><strong>工程师应该写作因为现在开发协作变得越来越重要。</strong>开源项目可以得到来自世界各地人民的参与。开发和运营一个产品常常需要大量工程师（Google Maps 有 1100 个全职员工！）。不论是 GitHub 评论、代码注释，还是技术文档都需要清晰准确的文字。良好的写作能力方便了人们之间的交流，使得项目更好地运行下去。</p>
<p>可能你觉得有些项目不太需要交流协作，但是写一些关于软件的内容通常对于学习和更进一步的讨论有着促进作用。现在，我们不再需要通过 RFC 文档或技术手册中学习了，因为网上有其他工程师写的教程。此外，我们还能够从 Hacker News 评论、推特和各种博客中学到很多内容。</p>
<p>提到博客，再来说两句。好的写作需要时间。我们一开始写出来的文字可能不怎么样，这时就需要再花点时间，多修改几遍，润色一下。如果你觉得自己太忙了没时间写博客，不知道写什么或者担心你的观点被公开记录日后留下把柄，你应该花上点时间读一读 Steve Yegge 的《你应该写博客》（You Should Write Blogs）这篇文章。即便其中的观点不能说服你，我相信在阅读之后你也会有所收获。</p>
<p><strong>工程师需要写作，因为他们可能会享受写作的过程。</strong>很多工程师都期待自己开发的产品能够“产生影响”，给人们的生活带来改变。实际上，通过写文章，你也能够对人们“产生影响”，譬如说关于管理的博文可以帮助他人激励自己的团队，教授编程的内容可能会引起一个学生学习计算机科学的兴趣，关于职业规划的文章则可以帮助毕业生找到新的职业方向。</p>
<p><strong>即使没人读你的文章，写作的过程也是有益无害。</strong>它帮助你理清思路，明确对于某个问题的看法，加强或削弱你的某种观点。把凌乱的想法汇聚成精简的文字非常有价值。</p>
<p>总之，写作有利于提高软件开发的水平，同时更方便开发过程中的协作，即使对一个理科生来说，也是一件非常值得做的事。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在学校里，有“文科生”和“理科生”的区分，学习内容不同，思维方式也有差异。我是一名理科生，大学里我的专业是计算机科学，毕业后我的工作是软件工程师。在这个过程中，我发现文理科之间的鸿沟始终无法弥合。我见到的很多工程师害怕写文章，而文科生看到代码就头疼。&lt;/p&gt;
&lt;p&gt;我认为，
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>大马哈鱼</title>
    <link href="http://ljgabc.com/2014/01/25/2014-01-25-%E7%85%8E%E5%A4%A7%E9%A9%AC%E5%93%88%E9%B1%BC/"/>
    <id>http://ljgabc.com/2014/01/25/2014-01-25-煎大马哈鱼/</id>
    <published>2014-01-25T03:50:40.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>同学从哈尔滨给带的大马哈鱼，腌制好的，直接煎着吃就行</p>
<h2 id="准将下锅"><a href="#准将下锅" class="headerlink" title="准将下锅"></a>准将下锅</h2><p>上面抹了一些面粉</p>
<p><img src="/images/2014-01-25/IMG_20140125_115857.jpg" alt="Image Title"></p>
<h2 id="出锅"><a href="#出锅" class="headerlink" title="出锅"></a>出锅</h2><p><img src="/images/2014-01-25/IMG_20140125_122026.jpg" alt="Image Title"></p>
<h2 id="白粥配大马哈鱼"><a href="#白粥配大马哈鱼" class="headerlink" title="白粥配大马哈鱼"></a>白粥配大马哈鱼</h2><p><img src="/images/2014-01-25/IMG_20140125_122933.jpg" alt="Image Title"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;同学从哈尔滨给带的大马哈鱼，腌制好的，直接煎着吃就行&lt;/p&gt;
&lt;h2 id=&quot;准将下锅&quot;&gt;&lt;a href=&quot;#准将下锅&quot; class=&quot;headerlink&quot; title=&quot;准将下锅&quot;&gt;&lt;/a&gt;准将下锅&lt;/h2&gt;&lt;p&gt;上面抹了一些面粉&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/i
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
      <category term="美食" scheme="http://ljgabc.com/tags/%E7%BE%8E%E9%A3%9F/"/>
    
  </entry>
  
  <entry>
    <title>2014-01-21-修改Android设备中USB设备的默认权限</title>
    <link href="http://ljgabc.com/2014/01/21/2014-01-21-%E4%BF%AE%E6%94%B9Android%E8%AE%BE%E5%A4%87%E4%B8%ADUSB%E8%AE%BE%E5%A4%87%E7%9A%84%E9%BB%98%E8%AE%A4%E6%9D%83%E9%99%90/"/>
    <id>http://ljgabc.com/2014/01/21/2014-01-21-修改Android设备中USB设备的默认权限/</id>
    <published>2014-01-21T13:06:40.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>在Android设备中，有时想简单粗暴地将所有usb设备的权限设置成777（这样任何应用都不用权限就可以使用USB设备了），方法如下：</p>
<p>修改源码中<code>$(ANDROID_SRC)/system/core/rootdir/ueventd.rc</code>，将<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/bus/usb/*            0660   root       usb</div></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/dev/bus/usb/*            0777   root       usb</div></pre></td></tr></table></figure></p>
<p>即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Android设备中，有时想简单粗暴地将所有usb设备的权限设置成777（这样任何应用都不用权限就可以使用USB设备了），方法如下：&lt;/p&gt;
&lt;p&gt;修改源码中&lt;code&gt;$(ANDROID_SRC)/system/core/rootdir/ueventd.rc&lt;/code
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
      <category term="USB" scheme="http://ljgabc.com/tags/USB/"/>
    
  </entry>
  
  <entry>
    <title>移植OProfile到Android</title>
    <link href="http://ljgabc.com/2014/01/18/2014-01-18-%E7%A7%BB%E6%A4%8DOProfile%E5%88%B0Android/"/>
    <id>http://ljgabc.com/2014/01/18/2014-01-18-移植OProfile到Android/</id>
    <published>2014-01-18T13:44:40.000Z</published>
    <updated>2016-11-20T14:29:41.199Z</updated>
    
    <content type="html"><![CDATA[<p>1 第一次编译popt</p>
<p><em>下载popt-1.14，编译安装</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ac_cv_va_copy=yes ./configure --with-kernel-support --target=arm-linux-gnueabi --host=arm-linux-gnueabi --enable-install-libfd --prefix=/home/lijg/oprofile/popt</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<p><em>下载binutils-2.20，编译安装</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./configure --with-kernel-support --target=arm-linux-gnueabi --host=arm-linux-gnueabi --enable-install-libbfd --prefix=/home/lijg/oprofile/binutils --disable-nls --enable-install-libiberty --enable-shared</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<p><em>下载最新的oprofile,编译安装</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./configure --with-kernel-support --target=arm-linux-gnueabi --host=arm-linux-gnueabi --with-binutils=/home/lijg/oprofile/binutils --prefix=/home/lijg/oprofile</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure></p>
<p>此时，通过file查看生成的opreport等文件，发现还是通过动态链接库生成的，不是静态的，在Android下不好使用，需要将其生成静态二进制程序</p>
<p>2 重新编译oprofile</p>
<p>以ophelp为例，通过file查看ophelp，看到是<em>dynamically linked (uses shared libs)</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/oprofile-0.9.9/utils/</div><div class="line">file ophelp</div><div class="line">    &lt;font color=&quot;gray&quot;&gt;ophelp: ELF 32-bit LSB executable, ARM, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.31, BuildID[sha1]=0x0d1e63861273943a2c92bd61a3d6ce92163f9088, not stripped&lt;/font&gt;</div></pre></td></tr></table></figure></p>
<p>将ophelp删除，在utils目录执行make，最后一行link，可以看到生成ophelp的命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rm ophelp</div><div class="line">make</div><div class="line">    &lt;font color=&quot;gray&quot;&gt;/bin/sh ../libtool --tag=CC   --mode=link arm-linux-gnueabi-gcc -W -Wall -fno-common -Wdeclaration-after-statement -g -O2 -L/data/oprofile/lib -Xlinker -R -Xlinker /data/oprofile/lib  -o ophelp ophelp.o ../libop/libop.a ../libutil/libutil.a -lpopt -liberty -ldl&lt;/font&gt;</div><div class="line">    &lt;font color=&quot;gray&quot;&gt;libtool: link: arm-linux-gnueabi-gcc -W -Wall -fno-common -Wdeclaration-after-statement -g -O2 -Wl,-R -Wl,/data/oprofile/lib -o ophelp ophelp.o  -L/data/oprofile/lib ../libop/libop.a ../libutil/libutil.a /data/oprofile/lib/libpopt.so -liberty -ldl -Wl,-rpath -Wl,/data/oprofile/lib -Wl,-rpath -Wl,/data/oprofile/lib&lt;/font&gt;</div></pre></td></tr></table></figure></p>
<p>将最后一样手动改为静态编译（去掉所有的链接到libpopt.so libiberty.so libbfd.so的语句，改为使用libpopt.a libiberty.a libbfd.a），最后再加上–static<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arm-linux-gnueabi-gcc -W -Wall -fno-common -Wdeclaration-after-statement -g -O2 -Wl,-R -Wl,/data/oprofile/lib -o ophelp ophelp.o  ../libop/libop.a ../libutil/libutil.a /data/oprofile/lib/libpopt.a /data/oprofile/lib/libiberty.a -ldl -Wl,-rpath -Wl,/data/oprofile/lib -Wl,-rpath -Wl,/data/oprofile/lib --static</div></pre></td></tr></table></figure></p>
<p>查看生成的文件，看到是statically linked, 在Android可以直接使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">file ophelp</div><div class="line">    &lt;font color=&quot;gray&quot;&gt;ophelp: ELF 32-bit LSB executable, ARM, version 1 (SYSV), statically linked, for GNU/Linux 2.6.31, BuildID[sha1]=0xe78959fba10954b8bc68de2e32bb09ba3678a19a, not stripped&lt;/font&gt;</div></pre></td></tr></table></figure></p>
<p>按照同样的方法，重新编译op-check-perfevents, oprofiled，opannotate, oparchive, opgprof, opreport, operf, opimport, opjitconv，代码如下</p>
<p><em>op-check-perfevents</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/oprofile-0.9.9/utils/</div><div class="line">rm op-check-perfevents</div><div class="line">arm-linux-gnueabi-gcc -W -Wall -fno-common -Wdeclaration-after-statement -g -O2 -Wl,-R -Wl,/data/oprofile/lib -o op-check-perfevents op_check_perfevents-op_perf_events_checker.o  /data/oprofile/lib/libpopt.a /data/oprofile/lib/libiberty.a -ldl -Wl,-rpath -Wl,/data/oprofile/lib -Wl,-rpath -Wl,/data/oprofile/lib --static</div></pre></td></tr></table></figure></p>
<p><em>oprofiled</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/oprofile-0.9.9/daemon/</div><div class="line">rm oprofiled</div><div class="line">arm-linux-gnueabi-gcc -W -Wall -fno-common -Wdeclaration-after-statement -fno-omit-frame-pointer -g -O2 -o oprofiled init.o oprofiled.o opd_stats.o opd_pipe.o opd_sfile.o opd_kernel.o opd_trans.o opd_cookie.o opd_events.o opd_mangling.o opd_perfmon.o opd_anon.o opd_spu.o opd_extended.o opd_ibs.o opd_ibs_trans.o ../libabi/libabi.a ../libdb/libodb.a ../libop/libop.a ../libutil/libutil.a /data/oprofile/lib/libpopt.a /data/oprofile/lib/libiberty.a -ldl --static</div></pre></td></tr></table></figure></p>
<p><em>opannotate</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/oprofile-0.9.9/pp/</div><div class="line">rm opannotate</div><div class="line">arm-linux-gnueabi-g++ -W -Wall -fno-common -ftemplate-depth-50 -g -O2 -Wl,-R -Wl,/data/oprofile/lib -o opannotate opannotate.o opannotate_options.o common_option.o  -L/data/oprofile/lib ../libpp/libpp.a ../libopt++/libopt++.a ../libregex/libop_regex.a ../libutil++/libutil++.a ../libop/libop.a ../libutil/libutil.a ../libdb/libodb.a /data/oprofile/lib/libpopt.a /data/oprofile/lib/libbfd.a /data/oprofile/lib/libiberty.a -ldl --static</div></pre></td></tr></table></figure></p>
<p><em>oparchive</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/oprofile-0.9.9/pp/</div><div class="line">rm oparchive</div><div class="line">arm-linux-gnueabi-g++ -W -Wall -fno-common -ftemplate-depth-50 -g -O2 -Wl,-R -Wl,/data/oprofile/lib -o oparchive oparchive.o oparchive_options.o common_option.o  -L/data/oprofile/lib ../libpp/libpp.a ../libopt++/libopt++.a ../libregex/libop_regex.a ../libutil++/libutil++.a ../libop/libop.a ../libutil/libutil.a ../libdb/libodb.a /data/oprofile/lib/libpopt.a /data/oprofile/lib/libbfd.a /data/oprofile/lib/libiberty.a -ldl --static</div></pre></td></tr></table></figure></p>
<p><em>opgprof</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/oprofile-0.9.9/pp/</div><div class="line">rm opgprof</div><div class="line">arm-linux-gnueabi-g++ -W -Wall -fno-common -ftemplate-depth-50 -g -O2 -Wl,-R -Wl,/data/oprofile/lib -o opgprof opgprof.o opgprof_options.o common_option.o  -L/data/oprofile/lib ../libpp/libpp.a ../libopt++/libopt++.a ../libregex/libop_regex.a ../libutil++/libutil++.a ../libop/libop.a ../libutil/libutil.a ../libdb/libodb.a /data/oprofile/lib/libpopt.a /data/oprofile/lib/libbfd.a /data/oprofile/lib/libiberty.a -ldl --static</div></pre></td></tr></table></figure></p>
<p><em>opreport</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/oprofile-0.9.9/pp/</div><div class="line">rm opreport</div><div class="line">arm-linux-gnueabi-g++ -W -Wall -fno-common -ftemplate-depth-50 -g -O2 -Wl,-R -Wl,/data/oprofile/lib -o opreport opreport.o opreport_options.o common_option.o  -L/data/oprofile/lib ../libpp/libpp.a ../libopt++/libopt++.a ../libregex/libop_regex.a ../libutil++/libutil++.a ../libop/libop.a ../libutil/libutil.a ../libdb/libodb.a /data/oprofile/lib/libpopt.a /data/oprofile/lib/libbfd.a /data/oprofile/lib/libiberty.a -ldl --static</div></pre></td></tr></table></figure></p>
<p><em>operf</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/oprofile-0.9.9/pe_profiling/</div><div class="line">rm operf</div><div class="line">arm-linux-gnueabi-g++ -W -Wall -fno-common -ftemplate-depth-50 -g -O2 -Wl,-R -Wl,/data/oprofile/lib -o operf operf.o  -L/data/oprofile/lib ../libperf_events/libperf_events.a ../libutil++/libutil++.a ../libdb/libodb.a ../libop/libop.a ../libutil/libutil.a ../libabi/libabi.a /data/oprofile/lib/libiberty.a -ldl --static</div></pre></td></tr></table></figure></p>
<p><em>opimport</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/oprofile-0.9.9/libabi/</div><div class="line">rm opimport</div><div class="line">arm-linux-gnueabi-g++ -W -Wall -fno-common -ftemplate-depth-50 -g -O2 -Wl,-R -Wl,/data/oprofile/lib -o opimport opimport.o  -L/data/oprofile/lib libabi.a ../libdb/libodb.a ../libopt++/libopt++.a ../libutil++/libutil++.a ../libutil/libutil.a /data/oprofile/lib/libpopt.a /data/oprofile/lib/libiberty.a -ldl --static</div></pre></td></tr></table></figure></p>
<p><em>opjitconv</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/oprofile-0.9.9/opjitconv/</div><div class="line">rm opjitconv</div><div class="line">arm-linux-gnueabi-gcc -W -Wall -fno-common -Wdeclaration-after-statement -g -O2 -Wl,-R -Wl,/data/oprofile/lib -o opjitconv opjitconv.o conversion.o parse_dump.o jitsymbol.o create_bfd.o debug_line.o  ../libutil/libutil.a /data/oprofile/lib/libbfd.a /data/oprofile/lib/libiberty.a -ldl -Wl,-rpath -Wl,/data/oprofile/lib -Wl,-rpath -Wl,/data/oprofile/lib --static</div></pre></td></tr></table></figure></p>
<p>3 最后附上生成的静态可执行文件<br><a href="/_attachment/oprofilestatic.tar/bz2">oprofile-static-0.9.9</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 第一次编译popt&lt;/p&gt;
&lt;p&gt;&lt;em&gt;下载popt-1.14，编译安装&lt;/em&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/d
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
      <category term="Oprofile" scheme="http://ljgabc.com/tags/Oprofile/"/>
    
      <category term="性能" scheme="http://ljgabc.com/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>Android布局中插入水平横线</title>
    <link href="http://ljgabc.com/2014/01/03/2014-01-03-Android%E5%B8%83%E5%B1%80%E4%B8%AD%E6%8F%92%E5%85%A5%E6%B0%B4%E5%B9%B3%E6%A8%AA%E7%BA%BF/"/>
    <id>http://ljgabc.com/2014/01/03/2014-01-03-Android布局中插入水平横线/</id>
    <published>2014-01-03T15:17:40.000Z</published>
    <updated>2016-11-20T14:29:41.198Z</updated>
    
    <content type="html"><![CDATA[<p>有时想在Android界面中插入一条水平横线来分割不同的内容，可以使用以下方法实现。</p>
<p>在Layout中插入以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;View</div><div class="line">    android:layout_height=&quot;1px&quot;</div><div class="line">    android:background=&quot;#FFFFFF&quot;</div><div class="line">    android:layout_width=&quot;fill_parent&quot;/&gt;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时想在Android界面中插入一条水平横线来分割不同的内容，可以使用以下方法实现。&lt;/p&gt;
&lt;p&gt;在Layout中插入以下代码&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;d
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
      <category term="布局" scheme="http://ljgabc.com/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>装饰模式</title>
    <link href="http://ljgabc.com/2014/01/02/2014-01-02-%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ljgabc.com/2014/01/02/2014-01-02-装饰模式/</id>
    <published>2014-01-02T15:24:51.000Z</published>
    <updated>2016-11-20T14:29:41.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>装饰模式(Decorator),动态地给一个对象添加一些额外的职责(功能)；就增加功能来说，装饰模式比生成子类更为灵活。</p>
</blockquote>
<p>装饰模式是为已有功能动态地添加更多功能的一种方式。当系统需要新功能的时候，如果向旧的类中添加新的代码，这些新加的代码通常装饰了原有类的核心职责或功能，在主类中加入了新的字段、方法和逻辑，从而增加了主类的复杂度。而<strong>这些新加入的东西仅仅是为了满足一些只在某种特定情况下才会执行的特殊行为的需要</strong>。</p>
<p>装饰模式为上述情况提供了一个非常好的解决方案，它把每个要装饰的功能放在单独的类中，并让这个类包装它所要装饰的对象，因此，当需要执行特殊行为时，客户代码就可以在运行时根据需要有选择地、按顺序地使用装饰功能包装对象。</p>
<p>优点：把类中的装饰功能从类中搬移出去，这样可以简化原有类，有效地把类的核心职责和装饰功能区分开了。而且可以去除相关类中重复的装饰逻辑。</p>
<p>结构图：</p>
<p><img src="/images/2014-01-03/decorator.png" alt="Image Title"></p>
<p>代码：</p>
<ul>
<li><p>Component类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">abstract class Component &#123;</div><div class="line">    public abstract void Operation();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ConcreteComponent类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class ConcreteComponent : Component &#123;</div><div class="line">    public override void Operation() &#123;</div><div class="line">        // 具体对象的操作</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Decorator类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">abstract class Decorator : Component &#123;</div><div class="line">    protected Component component;</div><div class="line">    </div><div class="line">    // 设置Component</div><div class="line">    public void SetComponent(Component component) &#123;</div><div class="line">        this.component = component;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 重写Operation</div><div class="line">    public override void Operation() &#123;</div><div class="line">        if (component != null) &#123;</div><div class="line">            component.Operation();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ConcreteDecoratorA 具体装饰类A</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class ConcreteDecoratorA : Decorator &#123; </div><div class="line">    public override void Operation() &#123;</div><div class="line">        // 执行原有功能</div><div class="line">        base.Operation();</div><div class="line">        </div><div class="line">        // 在这里添加新功能</div><div class="line">        funcA();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ConcreteDecoratorB 具体装饰类B</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class ConcreteDecoratorB : Decorator &#123; </div><div class="line">    public override void Operation() &#123;</div><div class="line">        // 执行原有功能</div><div class="line">        base.Operation();</div><div class="line">        </div><div class="line">        // 在这里添加新功能</div><div class="line">        funcB();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>客户端代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">static void Main(string[] args) &#123;</div><div class="line">    // 原始Component类，只具有基本功能</div><div class="line">    ConcereteComponent c = new ConcereteComponent();</div><div class="line">    </div><div class="line">    // 装饰类A和B，分别添加A功能和B功能</div><div class="line">    ConcreteDecoratorA d1 = new ConcreteDecoratorA();</div><div class="line">    ConcreteDecoratorB d2 = new ConcreteDecoratorB();</div><div class="line"></div><div class="line">    d1.setComponent(c); // 给C添加A功能</div><div class="line">    d2.setComponent(d1);    //在上述基础上再添加B功能</div><div class="line">    </div><div class="line">    // 执行功能</div><div class="line">    d2.Operation();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>如果只有一个ConcreteComponent类而没有抽象的Component类，那么Decorator类可以是ConcreteComponent类的一个子类。同样道理，如果只有一个ConcreteDecorator类，那么就没有必要建立一个单独的Decorator类，而可以把Decorator和ConcreteDecorator的责任合成一个类。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;装饰模式(Decorator),动态地给一个对象添加一些额外的职责(功能)；就增加功能来说，装饰模式比生成子类更为灵活。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;装饰模式是为已有功能动态地添加更多功能的一种方式。当系统需要新功能的时候，如果向旧的
    
    </summary>
    
      <category term="软件" scheme="http://ljgabc.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="设计模式" scheme="http://ljgabc.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://ljgabc.com/2014/01/02/2014-01-02-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ljgabc.com/2014/01/02/2014-01-02-代理模式/</id>
    <published>2014-01-02T15:20:10.000Z</published>
    <updated>2016-11-20T14:29:41.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>代理模式(Proxy)，为其他对象提供一种代理以控制对这个对象的访问。隐藏真实对象。</p>
</blockquote>
<p>结构图：</p>
<p><img src="/images/2014-01-03/proxy_mode.png" alt="Image Title"></p>
<p>实例代码：</p>
<ul>
<li><p>Subject类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">abstract class Subject &#123;</div><div class="line">    public abstract void Request();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>RealSubject类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">class RealSubject : Subject &#123;</div><div class="line">    public override void Request() &#123;</div><div class="line">        // 真实操作</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Proxy类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class Porxy : Subject &#123;</div><div class="line">    RealSubject realsubject;</div><div class="line">    public override void Request() &#123;</div><div class="line">        if (realsubject == null) &#123;</div><div class="line">            realsubject = new RealSubject();</div><div class="line">        &#125;</div><div class="line">        realsubject.Request();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>客户端代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static void Main(string[] args) &#123;</div><div class="line">    Proxy proxy = new Proxy();</div><div class="line">    proxy.Request();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>代理模式的应用</strong></p>
<ol>
<li>远程代理，为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同的地址空间的事实。</li>
<li>虚拟代理，根据需要创建开销很大的对象。通过它来存放实例化需要很长时间的真实对象。</li>
<li>安全代理，用来控制真实对象的访问权限。</li>
<li>只能指引，当调用真实的对象时，代理处理另外的一些事情。</li>
</ol>
<blockquote>
<p><strong>代理模式其实就是在访问对象是引入一定程度的间接性，因为这种间接性，可以附加多种用途。</strong></p>
<p><strong>装饰模式其实也可以算是一种代理模式，多个装饰相当于多层代理</strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;代理模式(Proxy)，为其他对象提供一种代理以控制对这个对象的访问。隐藏真实对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结构图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2014-01-03/proxy_mode.png&quot; alt
    
    </summary>
    
      <category term="软件" scheme="http://ljgabc.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="设计模式" scheme="http://ljgabc.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2014-01-01-恭贺2014</title>
    <link href="http://ljgabc.com/2014/01/01/2014-01-01-%E6%81%AD%E8%B4%BA2014/"/>
    <id>http://ljgabc.com/2014/01/01/2014-01-01-恭贺2014/</id>
    <published>2014-01-01T14:47:31.000Z</published>
    <updated>2016-11-20T14:29:41.198Z</updated>
    
    <content type="html"><![CDATA[<p>2014,我来了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2014,我来了！&lt;/p&gt;

    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>简单工厂模式</title>
    <link href="http://ljgabc.com/2013/12/31/2013-12-31-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ljgabc.com/2013/12/31/2013-12-31-简单工厂模式/</id>
    <published>2013-12-31T15:26:48.000Z</published>
    <updated>2016-11-20T14:29:41.198Z</updated>
    
    <content type="html"><![CDATA[<p>实例代码(摘自《大话设计模式》)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class OperationFactory &#123;</div><div class="line">    public static Operation createOperation(string operate) &#123;</div><div class="line">        Operation oper = null;</div><div class="line">        switch(operate) &#123;</div><div class="line">            case &quot;+&quot;:</div><div class="line">                oper = new OperationAdd();</div><div class="line">                break;</div><div class="line">            case &quot;-&quot;:</div><div class="line">                oper = new OperationSub();</div><div class="line">                break;</div><div class="line">            case &quot;*&quot;:</div><div class="line">                oper = new OperationMul();</div><div class="line">                break;</div><div class="line">            case &quot;/&quot;:</div><div class="line">                oper = new OperationDiv();</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return oper;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过简单工厂模式+多态，实现根据不同的需求(输入)，选择不同的算法(例化不同的类)来处理数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实例代码(摘自《大话设计模式》)&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;
    
    </summary>
    
      <category term="软件" scheme="http://ljgabc.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="设计模式" scheme="http://ljgabc.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>策略模式</title>
    <link href="http://ljgabc.com/2013/12/31/2013-12-31-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ljgabc.com/2013/12/31/2013-12-31-策略模式/</id>
    <published>2013-12-31T15:26:48.000Z</published>
    <updated>2016-11-20T14:29:41.198Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>面向对象编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象的抽象集合才是类。</p>
</blockquote>
<p>实例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">class Context &#123;</div><div class="line">    Operation oper = null;</div><div class="line">    public Context(string operate) &#123;</div><div class="line">        switch (operate) &#123;</div><div class="line">            case &quot;+&quot;:</div><div class="line">                OperationAdd oper0 = new OperationAdd();</div><div class="line">                oper = oper0;</div><div class="line">                break;</div><div class="line">            case &quot;+&quot;:</div><div class="line">                OperationAdd oper1 = new OperationSub();</div><div class="line">                oper = oper1;</div><div class="line">                break;</div><div class="line">            case &quot;+&quot;:</div><div class="line">                OperationAdd oper2 = new OperationMul();</div><div class="line">                oper = oper2;</div><div class="line">                break;</div><div class="line">            case &quot;+&quot;:</div><div class="line">                OperationAdd oper3 = new OperationDiv();</div><div class="line">                oper = oper3;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public double GetResult(double A, double B) &#123;</div><div class="line">        return oper.GetResult(A, B);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>策略模式与工厂模式差不多。区别是：</p>
<ul>
<li><p>使用简单工厂模式时的调用方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 客户需要知道Operation和OperationFactory两个类</div><div class="line">Operation oper =  OperationFactory.createOperation(&quot;+&quot;);</div><div class="line">result = oper.GetResult(A, B);</div></pre></td></tr></table></figure>
</li>
<li><p>使用策略与简单工厂结合模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 只有Context对客户可见</div><div class="line">Context con = new Context(&quot;+&quot;);</div><div class="line">result = con.GetResult(A, B);</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<blockquote>
<p>  策略模式是一种定义一系列算法的方法，从概念上来看，所有这些算法完成的都是相同的工作，只是实现不同，它可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。</p>
<p>  策略模式的Strategy类层次为Context定义了一些列的可供重用的算法或行为。继承有助于析取出这些算法中的公共功能（算法基类）。</p>
<p>  另外，使用策略模式简化了单元测试，应为每个算法都有自己的类，可以通过自己的接口单独测试。</p>
<p>  当不同的行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的Strategy类中，可以在使用这些行为的类中消除条件语句。</p>
<p>  策略模式就是用来封装算法的，但在实践中，可以用它来疯砸黄几乎任何类型的规则，只要在分析过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。</p>
<p>  在基本的策略模式中，选择所用具体实现的职责有客户端对象承担，并转给策略模式的Context对象；而策略模式与简单工厂模式结合后，选择具体实现的职责也可以有Context来承担，这就最大化地减轻了客户端的职责。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;面向对象编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象的抽象集合才是类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实例代码：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab
    
    </summary>
    
      <category term="软件" scheme="http://ljgabc.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="设计模式" scheme="http://ljgabc.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>2013-12-26-修改hosts文件访问google(备忘)</title>
    <link href="http://ljgabc.com/2013/12/26/2013-12-26-%E4%BF%AE%E6%94%B9hosts%E6%96%87%E4%BB%B6%E8%AE%BF%E9%97%AEgoogle-%E5%A4%87%E5%BF%98/"/>
    <id>http://ljgabc.com/2013/12/26/2013-12-26-修改hosts文件访问google-备忘/</id>
    <published>2013-12-26T09:09:00.000Z</published>
    <updated>2016-11-20T14:29:41.198Z</updated>
    
    <content type="html"><![CDATA[<p>下载Android代码经常连不到google，将以下代码加入/etc/hosts中，解决网址不能访问问题<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">#code.google.com </div><div class="line">173.194.72.102 google.com</div><div class="line"></div><div class="line"># Download</div><div class="line">173.194.72.102 dl.google.com</div><div class="line">173.194.72.136 dl-ssl.google.com</div><div class="line"></div><div class="line">#Groups</div><div class="line">74.125.31.101  groups.google.com</div><div class="line"></div><div class="line">#Google URL Shortener</div><div class="line">74.125.31.113  goo.gl</div><div class="line"></div><div class="line">#Google App Engine</div><div class="line">74.125.235.206 appengine.google.com</div><div class="line"></div><div class="line">#Android Developer</div><div class="line">74.125.235.200 developer.android.com</div><div class="line"></div><div class="line">#for download android source</div><div class="line">74.125.31.82 www.googlesource.com</div><div class="line">74.125.31.82 android.googlesource.com</div><div class="line">203.208.46.172 cache.pack.google.com</div><div class="line">59.24.3.173 cache.pack.google.com</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下载Android代码经常连不到google，将以下代码加入/etc/hosts中，解决网址不能访问问题&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;li
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>各个设计模式的作用(摘录)</title>
    <link href="http://ljgabc.com/2013/12/07/2013-12-07-%E5%90%84%E4%B8%AA%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BD%9C%E7%94%A8-%E6%91%98%E5%BD%95/"/>
    <id>http://ljgabc.com/2013/12/07/2013-12-07-各个设计模式的作用-摘录/</id>
    <published>2013-12-07T04:08:40.000Z</published>
    <updated>2016-11-20T14:29:41.198Z</updated>
    
    <content type="html"><![CDATA[<p>以为文字摘录自<a href="http://baike.baidu.com/view/5964024.htm" target="_blank" rel="external">《设计模式：可复用面向对象软件的基础》</a>一书。</p>
<ol>
<li><strong>Abstract Factory</strong> 提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</li>
</ol>
<ul>
<li><p><strong>Adapter</strong> 将一个类的接口转换成客户希望的另一个接口。<code>Adapter</code>模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p>
</li>
<li><p><strong>Builder</strong> 将一个复杂对象的构建和它的表示分离，使得同样的构建过程可以创建不同的表示。</p>
</li>
<li><p><strong>Chain of Responsibility</strong> 为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</p>
</li>
<li><p><strong>Command</strong> 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</p>
</li>
<li><p><strong>Composite</strong> 将对象组合成树形结构以表示“部分-整体”的层次结构。<code>Composite</code>使客户对单个对象和复合对象的使用具有一致性。</p>
</li>
<li><p><strong>Decorator</strong> 动态地给一个对象添加一些额外的职责。就扩展功能而言，<code>Decorator</code>模式比生成子类方式更为灵活。</p>
</li>
<li><p><strong>Facade</strong> 为子系统中的一组接口提供一个一致的界面，<code>Facade</code>模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p>
</li>
<li><p><strong>Factory Method</strong> 定义一个用于创建对象的接口，让子类决定将哪一个类实例化。 <code>Factory Method</code>使一个类的实例化延迟到其子类。</p>
</li>
<li><p><strong>Flyweight</strong> 运用共享技术有效地支持大量细粒度的对象。</p>
</li>
<li><p><strong>Interpteter</strong> 给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</p>
</li>
<li><p><strong>Iterator</strong> 提供一种方法顺序访问一个聚合对象中的各个元素，而又不需暴露该对象的内部表示。</p>
</li>
<li><p><strong>Mediator</strong> 用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p>
</li>
<li><p><strong>Memento</strong> 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。</p>
</li>
<li><p><strong>Observer</strong> 定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。</p>
</li>
<li><p><strong>Prototype</strong> 用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。</p>
</li>
<li><p><strong>Proxy</strong> 为其他对象提供一个代理以控制这个对象的访问。</p>
</li>
<li><p><strong>Singleton</strong> 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p>
</li>
<li><p><strong>State</strong> 允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。</p>
</li>
<li><p><strong>Strategy</strong> 定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户。</p>
</li>
<li><p><strong>Template Method</strong> 定义一个操作中的算法骨架，而将一些步骤延迟到子类中。<code>Template Method</code>使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
</li>
<li><p><strong>Visitor</strong> 表示一个作用与某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以为文字摘录自&lt;a href=&quot;http://baike.baidu.com/view/5964024.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《设计模式：可复用面向对象软件的基础》&lt;/a&gt;一书。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;A
    
    </summary>
    
      <category term="软件" scheme="http://ljgabc.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="设计模式" scheme="http://ljgabc.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式应用</title>
    <link href="http://ljgabc.com/2013/11/26/2013-11-26-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BA%94%E7%94%A8/"/>
    <id>http://ljgabc.com/2013/11/26/2013-11-26-设计模式应用/</id>
    <published>2013-11-26T04:07:12.000Z</published>
    <updated>2016-11-20T14:29:41.198Z</updated>
    
    <content type="html"><![CDATA[<p>以为文字摘录自<a href="http://baike.baidu.com/view/5964024.htm" target="_blank" rel="external">《设计模式：可复用面向对象软件的基础》</a>一书。</p>
<ol>
<li><p><strong>通过显示地指定一个类来创建对象</strong><br>在创建对象时指定类名将使你受特定实现的约束而不是特定接口的约束。这会使未来的变化更复杂。要避免这种情况，应该间接地创建对象。</p>
<p>设计模式：<code>Abstract Factory</code>， <code>Factory Method</code>， <code>Prototype</code></p>
</li>
</ol>
<ol>
<li><p><strong>对特殊操作的依赖</strong><br>当你为请求指定一个特殊的操作时，完成该请求的方式就固定下来了。为避免把请求代码写死，你将可以在编译时刻或运行时刻很方便地改变响应请求的方法。</p>
<p>设计模式：<code>Chain of Resposibility</code>， <code>Command</code></p>
</li>
</ol>
<ol>
<li><p><strong>对硬件和软件平台的依赖</strong><br>外部的操作系统接口和应用编程接口(API)在不同的软硬件平台上是不同的。依赖于特定平台的软件将很难移植到其他平台上，甚至都很难跟上本地平台的更新。所以设计系统时限制其平台的相关性就很重要了。</p>
<p>设计模式：<code>Abstract Factory</code>， <code>Bridge</code></p>
</li>
</ol>
<ol>
<li><p><strong>对对象表示或实现的依赖</strong><br>知道对象怎样表示、保存、定位或实现的客户在对象发生变化时可能也需要变化。对客户隐藏这些信息能阻止连锁变化。</p>
<p>设计模式：<code>Abstract Factory</code>， <code>Bridge</code>， <code>Memento</code>， <code>Proxy</code></p>
</li>
</ol>
<ol>
<li><p><strong>算法依赖</strong><br>算法在开发和复用时常常被扩展、优化和替代。依赖于某个特定算法的对象在算法发生变化时不得不变化。因此有可能发生变化的算法应该被孤立起来。</p>
<p>设计模式：<code>Builder</code>， <code>Iterator</code>， <code>Strategy</code>， <code>Template Method</code>， <code>Visitor</code></p>
</li>
</ol>
<ol>
<li><p><strong>紧耦合</strong><br>紧耦合的类很难独立地被复用，因为它们是互相依赖的。紧耦合产生单块的系统，要改变或删掉一个类，你必须理解和改变其他许多类。这样的系统是一个很难学习、移植和维护的米集体。</p>
<p>松散耦合提高了一个类本身被复用的可能性，并且系统更易于学习、移植、修改和扩展。设计模式使用抽象耦合和分层技术来提高系统的松散耦合性。</p>
<p>设计模式：<code>Abstract Factory</code>， <code>Command</code>， <code>Facade</code>， <code>Mediator</code>， <code>Observer</code>， <code>Chain of Responsibility</code></p>
</li>
</ol>
<ol>
<li><p><strong>通过生成子类来扩充功能</strong><br>通常很难通过定义子类来定制对象。每一个新类都有固定的实现开销(初始化、终止处理等)。定义子类还需要对父类有深入的了解。如，重定义一个操作可能需要重定义其他操作。一个被重定义的操作可能需要调用继承下来的操作。并且子类方法会导致类爆炸，因为即使对于一个简单的扩充，你也不得不引入许多新的子类。</p>
<p>一般的对象组合技术和具体的委托技术，是继承之外组合对象行为的另一种灵活方法。新的功能可以通过以新的方式组合已有对象，而不是通过定义已存在类的子类的方式加到应用中去。另一方面，许多使用对象组合会使设计难于理解。许多设计模式产生的设计中，你可以定义一个子类，且将它的实例和已存在实例进行组合来引入定制的功能。</p>
<p>设计模式：<code>Bridge</code>， <code>Chain of Responsibility</code>， <code>Composite</code>， <code>Decorator</code>， <code>Observer</code>， <code>Strategy</code></p>
</li>
</ol>
<ol>
<li><p><strong>不能方便地对类进行修改</strong><br>有时你不得不改变一个难以修改的类。也许你需要源代码而又没有(对于商业类库就有这种情况)，或者可能对类的任何改变会要求修改许多已存在的其他子类。设计模式提供在这些情况下对类进行修改的方法。</p>
<p>设计模式：<code>Adapter</code>， <code>Decorator</code>， <code>Visitor</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以为文字摘录自&lt;a href=&quot;http://baike.baidu.com/view/5964024.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《设计模式：可复用面向对象软件的基础》&lt;/a&gt;一书。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;stron
    
    </summary>
    
      <category term="软件" scheme="http://ljgabc.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="设计模式" scheme="http://ljgabc.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习笔记</title>
    <link href="http://ljgabc.com/2013/10/26/2013-10-26-CSS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://ljgabc.com/2013/10/26/2013-10-26-CSS学习笔记/</id>
    <published>2013-10-26T04:06:48.000Z</published>
    <updated>2016-11-20T14:29:41.198Z</updated>
    
    <content type="html"><![CDATA[<p>本文是读<a href="http://zh.learnlayout.com/" target="_blank" rel="external">《学习CSS布局》</a>的摘要、备忘。</p>
<p>#1. display属性<br><code>display</code>是CSS中最重要的用于控制布局的属性。每个元素都有一个默认的<code>display</code>值，这与元素的类型有关。对于大多数元素它们的默认值通常是<code>block</code>或<code>inline</code>。一个<code>block</code>元素通常被叫做块级元素。一个<code>inline</code>元素通常被叫做行内元素。</p>
<ul>
<li>block</li>
</ul>
<p><code>div</code>是一个标准的块级元素。一个块级元素会新开始一行并且尽可能撑满容器。其他常用的块级元素包括<code>p</code>、<code>form</code>和HTML5中的新元素：<code>header</code>、<code>footer</code>、<code>section</code>等等。</p>
<ul>
<li>inline</li>
</ul>
<p><code>span</code>是一个标准的行内元素。一个行内元素可以在段落中<code>&lt;span&gt;</code>像这样<code>&lt;/span&gt;</code>包裹一些文字而不会打乱段落的布局。<code>a</code>元素是最常用的行内元素，它可以被用作链接。</p>
<ul>
<li>none</li>
</ul>
<p>另一个常用的<code>display</code>值是<code>none</code>。一些特殊元素的默认<code>display</code>值是它，例如<code>script</code>。<code>display:none</code>通常被<code>JavaScript</code>用来在不删除元素的情况下隐藏或显示元素。</p>
<p>它和<code>visibility</code>属性不一样。把<code>display</code>设置成<code>none</code>不会保留元素本该显示的空间，但是<code>visibility:hidden;</code>还会保留。</p>
<ul>
<li>其他 display 值</li>
</ul>
<p>还有很多的更有意思的<code>display</code>值，例如<code>list-item</code>和<code>table</code>。这里有一份详细的列表。之后我们会讨论下<code>inline-block</code>和<code>flex</code>。</p>
<ul>
<li>额外加分点</li>
</ul>
<p>就像我之前讨论过的，每个元素都有一个默认的<code>display</code>类型。不过你可以随时随地的重写它！虽然“人工制造”一个行内元素可能看起来很难以理解，不过你可以把有特定语义的元素改成行内元素。常见的例子是：把<code>li</code>元素修改成<code>inline</code>，制作成水平菜单。</p>
<p>#2. margin: auto<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#main &#123;</div><div class="line">  width: 600px;</div><div class="line">  margin: 0 auto; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>设置块级元素的<code>width</code>可以阻止它从左到右撑满容器。然后你就可以设置左右外边距为 auto 来使其水平居中。元素会占据你所指定的宽度，然后剩余的宽度会一分为二成为左右外边距。</p>
<p>唯一的问题是，当浏览器窗口比元素的宽度还要窄时，浏览器会显示一个水平滚动条来容纳页面。让我们再来改进下这个方案…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#main &#123;</div><div class="line">  max-width: 600px;</div><div class="line">  margin: 0 auto; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这种情况下使用<code>max-width</code>替代<code>width</code>可以使浏览器更好地处理小窗口的情况。这点在移动设备上显得尤为重要，调整下浏览器窗口大小检查下吧！</p>
<p>顺便提下，所有的主流浏览器包括IE7+在内都支持<code>max-width</code>，所以放心大胆的用吧。</p>
<p>#3. 盒模型</p>
<p>在我们讨论宽度的时候，我们应该讲下与它相关的一个重点知识：盒模型。当你设置了元素的宽度，实际展现的元素却能够超出你的设置：因为元素的边框和内边距会撑开元素。看下面的例子，两个相同宽度的元素显示的实际宽度却不一样。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.simple &#123;</div><div class="line">  width: 500px;</div><div class="line">  margin: 20px auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fancy &#123;</div><div class="line">  width: 500px;</div><div class="line">  margin: 20px auto;</div><div class="line">  padding: 50px;</div><div class="line">  border-width: 10px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以前有一个代代相传的解决方案是数学。CSS开发者需要用比他们实际想要的宽度小一点的宽度，需要减去内边距和边框的宽度。值得庆幸地是你不需要再这么做了…</p>
<p>#4. box-sizing<br>经过了一代又一代人们意识到数学不好玩，所以他们新增了一个叫做<code>box-sizing</code>的CSS属性。当你设置一个元素为<code>box-sizing:border-box;</code>时，此元素的内边距和边框不再会增加它的宽度。这里有一个与前一页相同的例子，唯一的区别是两个元素都设置了<code>box-sizing:border-box;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">.simple &#123;</div><div class="line">  width: 500px;</div><div class="line">  margin: 20px auto;</div><div class="line">  -webkit-box-sizing: border-box;</div><div class="line">     -moz-box-sizing: border-box;</div><div class="line">          box-sizing: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line">.fancy &#123;</div><div class="line">  width: 500px;</div><div class="line">  margin: 20px auto;</div><div class="line">  padding: 50px;</div><div class="line">  border: solid blue 10px;</div><div class="line">  -webkit-box-sizing: border-box;</div><div class="line">     -moz-box-sizing: border-box;</div><div class="line">          box-sizing: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>既然没有比这更好的方法，一些CSS开发者想要页面上所有的元素都有如此表现。所以开发者们把以下CSS代码放在他们页面上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line">  -webkit-box-sizing: border-box;</div><div class="line">     -moz-box-sizing: border-box;</div><div class="line">          box-sizing: border-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样可以确保所有的元素都会用这种更直观的方式排版。</p>
<p>既然<code>box-sizing</code>是个很新的属性，目前你还应该像我之前在例子中那样使用<code>-webkit-</code>和<code>-moz-</code>前缀。这可以启用特定浏览器实验中的特性。同时记住它是支持IE8+。</p>
<p>#5. position</p>
<p>为了制作更多复杂的布局，我们需要讨论下<code>position</code>属性。它有一大堆的值，名字还都特抽象，别提有多难记了。让我们先一个个的过一遍，不过你最好还是把这页放到书签里。</p>
<ul>
<li>static<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.static &#123;</div><div class="line">  position: static;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>static</code>是默认值。任意<code>position:static;</code>的元素不会被特殊的定位。一个<code>static</code>元素表示它不会被“positioned”，一个<code>position</code>属性被设置为其他值的元素表示它会被“positioned”。</p>
<ul>
<li>relative<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">.relative1 &#123;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">.relative2 &#123;</div><div class="line">  position: relative;</div><div class="line">  top: -20px;</div><div class="line">  left: 20px;</div><div class="line">  background-color: white;</div><div class="line">  width: 500px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>relative</code>表现的和<code>static</code>一样，除非你添加了一些额外的属性。</p>
<p>在一个相对定位（<code>position</code>属性的值为<code>relative</code>）的元素上设置<code>top</code>、<code>right</code>、<code>bottom</code>和<code>left</code>属性会使其偏离其正常位置。其他的元素则不会调整位置来弥补它偏离后剩下的空隙。</p>
<ul>
<li>fixed<br>一个固定定位（<code>position</code>属性的值为<code>fixed</code>）元素会相对于视窗来定位，这意味着即便页面滚动，它还是会停留在相同的位置。和<code>relative</code>一样，<code>top</code>、<code>right</code>、<code>bottom</code>和<code>left</code>属性都可用。</li>
</ul>
<p>我相信你已经注意到页面右下角的固定定位元素。你现在可以仔细看看它，这里有它所使用的CSS：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">.fixed &#123;</div><div class="line">  position: fixed;</div><div class="line">  bottom: 0;</div><div class="line">  right: 0;</div><div class="line">  width: 200px;</div><div class="line">  background-color: white;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个固定定位元素不会保留它原本在页面应有的空隙。</p>
<p>令人惊讶地是移动浏览器对 fixed 的支持很差。这里有相应的解决方案.</p>
<ul>
<li>absolute<br><code>absolute</code>是最棘手的<code>position</code>值。<code>absolute</code>与<code>fixed</code>的表现类似，除了它不是相对于视窗而是相对于最近的“positioned”祖先元素。如果绝对定位（<code>position</code>属性的值为<code>absolute</code>）的元素没有“positioned”祖先元素，那么它是相对于文档的<code>body</code>元素，并且它会随着页面滚动而移动。记住一个“positioned”元素是指<code>position</code>值不是<code>static</code>的元素。</li>
</ul>
<p>这里有一个简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.relative &#123;</div><div class="line">  position: relative;</div><div class="line">  width: 600px;</div><div class="line">  height: 400px;</div><div class="line">&#125;</div><div class="line">.absolute &#123;</div><div class="line">  position: absolute;</div><div class="line">  top: 120px;</div><div class="line">  right: 0;</div><div class="line">  width: 300px;</div><div class="line">  height: 200px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>relative元素是相对定位的。如果它是<code>position:static;</code>，那么它的绝对定位子元素会跳过它直接相对于<code>body</code>元素定位。</p>
<p>absolute元素是绝对定位的。它相对于它的父元素定位。</p>
<p>这部分比较难理解，但它是创造优秀布局所必需的知识。下一页我们会使用<code>position</code>做更具体的例子。</p>
<p>#6. position例子</p>
<p>通过具体的例子可以帮助我们更好地理解“position”。下面是一个真正的页面布局。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  position: relative;</div><div class="line">&#125;</div><div class="line">nav &#123;</div><div class="line">  position: absolute;</div><div class="line">  left: 0px;</div><div class="line">  width: 200px;</div><div class="line">&#125;</div><div class="line">section &#123;</div><div class="line">  /* position is static by default */</div><div class="line">  margin-left: 200px;</div><div class="line">&#125;</div><div class="line">footer &#123;</div><div class="line">  position: fixed;</div><div class="line">  bottom: 0;</div><div class="line">  left: 0;</div><div class="line">  height: 70px;</div><div class="line">  background-color: white;</div><div class="line">  width: 100%;</div><div class="line">&#125;</div><div class="line">body &#123;</div><div class="line">  margin-bottom: 120px;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;container&quot;&gt;</div><div class="line">  &lt;nav&gt;</div><div class="line">      &lt;ul&gt;</div><div class="line">        &lt;li&gt;Home&lt;/li&gt;</div><div class="line">        &lt;li&gt;Taco Menu&lt;/li&gt;</div><div class="line">        &lt;li&gt;Draft List&lt;/li&gt;</div><div class="line">        &lt;li&gt;Hours&lt;/li&gt;</div><div class="line">        &lt;li&gt;Directions&lt;/li&gt;</div><div class="line">        &lt;li&gt;Contact&lt;/li&gt;</div><div class="line">      &lt;/ul&gt;</div><div class="line">  &lt;/nav&gt;</div><div class="line">  &lt;section&gt;</div><div class="line">     &lt;p&gt;section的margin-left样式确保了有足够的空间容纳nav元素。&lt;/p&gt;</div><div class="line">  &lt;/section&gt;</div><div class="line">  &lt;footer&gt;</div><div class="line">    &lt;p&gt;如果你使用了一个固定定位的页眉或页脚，确保有足够的空间来显示它们！我在body上面加了margin-bottom。&lt;/p&gt;</div><div class="line">  &lt;/footer&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>这个例子在容器比<code>nav</code>元素高的时候可以正常工作。如果容器比<code>nav</code>元素低，那么<code>nav</code>会溢出到容器的外面。之后我们会讨论下其他布局技术，它们都各有优劣。</p>
<p>#7. float<br>另一个布局中常用的CSS属性是<code>float</code>。<code>float</code>可用于实现文字环绕图片，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">img &#123;</div><div class="line">  float: right;</div><div class="line">  margin: 0 0 1em 1em;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>#8. clear<br><code>clear</code>属性被用于控制浮动。比较下面两个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;div class=&quot;box&quot;&gt;...&lt;/div&gt;</div><div class="line">&lt;section&gt;...&lt;/section&gt;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  float: left;</div><div class="line">  width: 200px;</div><div class="line">  height: 100px;</div><div class="line">  margin: 1em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在这个例子中，<code>section</code>元素实际上是在<code>div</code>之后的（译注：DOM结构上）。然而<code>div</code>元素是浮动到左边的，于是<code>section</code>中的文字就围绕了<code>div</code>，并且<code>section</code>元素包围了整个元素。如果我们想让<code>section</code>显示在浮动元素之后呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  float: left;</div><div class="line">  width: 200px;</div><div class="line">  height: 100px;</div><div class="line">  margin: 1em;</div><div class="line">&#125;</div><div class="line">.after-box &#123;</div><div class="line">  clear: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用<code>clear</code>我们就可以将这个段落移动到浮动元素<code>div</code>下面。你需要用<code>left</code>值才能清除元素的向左浮动。你还可以用<code>right</code>或<code>both</code>来清除向右浮动或同时清除向左向右浮动。</p>
<p>#9. 清除浮动（clearfix hack）<br>在使用浮动的时候经常会遇到一个古怪的事情：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">img &#123;</div><div class="line">  float: right;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不……这个图片比包含它的元素还高，而且它是浮动的，于是它就溢出到了容器外面！</p>
<p>见证奇迹的时刻到了！有一种比较丑陋的方法可以解决这个问题，它叫做清除浮动（clearfix hack）.</p>
<p>让我们加入一些新的CSS样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.clearfix &#123;</div><div class="line">  overflow: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个可以在现代浏览器上工作。如果你想要支持IE6，你就需要再加入如下样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">.clearfix &#123;</div><div class="line">  overflow: auto;</div><div class="line">  zoom: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>有些独特的浏览器需要“额外的关照”。清除浮动这谭水很深很深，但是这个简单的解决方案已经可以在今天所有的主要浏览器上工作。</p>
<p>#10. 浮动布局例子<br>完全使用<code>float</code>来实现页面的布局是很常见的。这里有一个我之前用<code>position</code>实现的布局例子，这次我使用<code>float</code>实现了它。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">nav &#123;</div><div class="line">  float: left;</div><div class="line">  width: 200px;</div><div class="line">&#125;</div><div class="line">section &#123;</div><div class="line">  margin-left: 200px;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个例子和之前那个外观一模一样。请注意我们在容器上做了“清除浮动”。原本在这个例子中是不需要的，但是当<code>nav</code>比非浮动的内容还要高时就需要了。</p>
<p>#11. 百分比宽度<br>百分比是一种相对于包含块的计量单位。它对图片很有用：如下我们实现了图片宽度始终是容器宽度的50%。把页面缩小看下效果！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">article img &#123;</div><div class="line">  float: right;</div><div class="line">  width: 50%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你甚至还能同时使用<code>min-width</code>和<code>max-width</code>来限制图片的最大或最小宽度！</p>
<ul>
<li>百分比宽度布局</li>
</ul>
<p>你可以用百分比做布局，但是这需要更多的工作。在下面的例子中，当窗口宽度很窄时<code>nav</code>的内容会以一种不太友好的方式被包裹起来。总而言之，选一种最合适你的内容的方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">nav &#123;</div><div class="line">  float: left;</div><div class="line">  width: 25%;</div><div class="line">&#125;</div><div class="line">section &#123;</div><div class="line">  margin-left: 25%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当布局很窄时，<code>nav</code>就会被挤扁。更糟糕的是，你不能在<code>nav</code>上使用<code>min-width</code>来修复这个问题，因为右边的那列是不会遵守它的。</p>
<p>#12. 媒体查询<br>“响应式设计（Responsive Design）”是一种让网站针对不同的浏览器和设备“响应”不同显示效果的策略，这样可以让网站在任何情况下显示的很棒！</p>
<p>媒体查询是做此事所需的最强大的工具。让我们使用百分比宽度来布局，然后在浏览器变窄到无法容纳侧边栏中的菜单时，把布局显示成一列：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@media screen and (min-width:600px) &#123;</div><div class="line">  nav &#123;</div><div class="line">    float: left;</div><div class="line">    width: 25%;</div><div class="line">  &#125;</div><div class="line">  section &#123;</div><div class="line">    margin-left: 25%;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (max-width:599px) &#123;</div><div class="line">  nav li &#123;</div><div class="line">    display: inline;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当你调整浏览器窗口大小时，布局比以前更酷了！</p>
<p>现在我们的布局在移动浏览器上也显示的很棒。这里有一些同样使用了媒体查询的著名站点。在MDN文档中你还可以学到更多有关媒体查询的知识。</p>
<ul>
<li>额外加分点</li>
</ul>
<p>使用<code>meta viewport</code>之后可以让你的布局在移动浏览器上显示的更好。</p>
<p>#13. inline-block<br>你可以创建很多网格来铺满浏览器。在过去很长的一段时间内使用<code>float</code>是一种选择，但是使用<code>inline-block</code> 会更简单。让我们看下使用这两种方法的例子：</p>
<ul>
<li>困难的方式（使用浮动）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  float: left;</div><div class="line">  width: 200px;</div><div class="line">  height: 100px;</div><div class="line">  margin: 1em;</div><div class="line">&#125;</div><div class="line">.after-box &#123;</div><div class="line">  clear: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我在使用 clear，所以我不会浮动到上面那堆盒子的旁边。</p>
<ul>
<li>容易的方式（使用 inline-block）</li>
</ul>
<p>你可以用<code>display</code>属性的值<code>inline-block</code>来实现相同效果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box2 &#123;</div><div class="line">  display: inline-block;</div><div class="line">  width: 200px;</div><div class="line">  height: 100px;</div><div class="line">  margin: 1em;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这次我可没有用 clear 。太棒了！</p>
<p>你得做些额外工作来让IE6和IE7支持<code>inline-block</code>。有些时候人们谈到<code>inline-block</code>会触发叫做<code>hasLayout</code>的东西，你只需要知道那是用来支持旧浏览器的。如果你对此很感兴趣，可以在前面那个链接中找到更详细的信息。否则我们就继续下去吧。</p>
<p>#14. inline-block 布局<br>你可以使用 inline-block 来布局。有一些事情需要你牢记：</p>
<ul>
<li><code>vertical-align</code>属性会影响到<code>inline-block</code>元素，你可能会把它的值设置为<code>top</code>。</li>
<li>你需要设置每一列的宽度</li>
<li>如果HTML源代码中元素之间有空格，那么列与列之间会产生空隙</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">nav &#123;</div><div class="line">  display: inline-block;</div><div class="line">  vertical-align: top;</div><div class="line">  width: 25%;</div><div class="line">&#125;</div><div class="line">.column &#123;</div><div class="line">  display: inline-block;</div><div class="line">  vertical-align: top;</div><div class="line">  width: 75%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>#15. column<br>这里有一系列新的CSS属性，可以帮助你很轻松的实现文字的多列布局。让我们瞧瞧：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">.three-column &#123;</div><div class="line">  padding: 1em;</div><div class="line">  -moz-column-count: 3;</div><div class="line">  -moz-column-gap: 1em;</div><div class="line">  -webkit-column-count: 3;</div><div class="line">  -webkit-column-gap: 1em;</div><div class="line">  column-count: 3;</div><div class="line">  column-gap: 1em;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>CSS<code>columns</code>是很新的标准，所以你需要使用前缀，并且它不被IE9及以下和Opera Mini支持。还有许多和<code>cloumn</code>相关的属性，点击这里了解更多。否则让我们讨论下一个主题。</p>
<p>#16. flexbox<br>新的<code>flexbox</code>布局模式被用来重新定义CSS中的布局方式。很遗憾的是最近规范变动过多，导致各个浏览器对它的实现也有所不同。不过我仍旧想要分享一些例子，来让你知道即将发生的改变。这些例子目前只能在支持<code>flexbox</code>的Chrome浏览器中运行，基于最新的标准。</p>
<p>网上有不少过时的<code>flexbox</code>资料。 如果你想要了解更多有关<code>flexbox</code>的内容，从这里学习如何辨别一份资料是否过时。我已经写了一份关于最新标准的详细文章。</p>
<p>使用<code>flexbox</code>你还可以做的更多；这里只是一些让你了解概念的例子：</p>
<ul>
<li>使用<code>Flexbox</code>的简单布局</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  display: -webkit-flex;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line">nav &#123;</div><div class="line">  width: 200px;</div><div class="line">&#125;</div><div class="line">.flex-column &#123;</div><div class="line">  -webkit-flex: 1;</div><div class="line">          flex: 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>使用<code>Flexbox</code>的牛逼布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">.container &#123;</div><div class="line">  display: -webkit-flex;</div><div class="line">  display: flex;</div><div class="line">&#125;</div><div class="line">.initial &#123;</div><div class="line">  -webkit-flex: initial;</div><div class="line">          flex: initial;</div><div class="line">  width: 200px;</div><div class="line">  min-width: 100px;</div><div class="line">&#125;</div><div class="line">.none &#123;</div><div class="line">  -webkit-flex: none;</div><div class="line">          flex: none;</div><div class="line">  width: 200px;</div><div class="line">&#125;</div><div class="line">.flex1 &#123;</div><div class="line">  -webkit-flex: 1;</div><div class="line">          flex: 1;</div><div class="line">&#125;</div><div class="line">.flex2 &#123;</div><div class="line">  -webkit-flex: 2;</div><div class="line">          flex: 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用 Flexbox 的居中布局</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.vertical-container &#123;</div><div class="line">  display: -webkit-flex;</div><div class="line">  display: flex;</div><div class="line">  height: 300px;</div><div class="line">&#125;</div><div class="line">.vertically-centered &#123;</div><div class="line">  margin: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>CSS里总算是有了一种简单的垂直居中布局的方法了！</p>
<p>#17. css框架<br>因为 CSS 布局很难使用，所以催生了不少 CSS 框架来帮助开发者。如果你想看看那么这里有一些。只有在框架的功能契合你的需求时，使用框架才是个好主意。掌握CSS的工作方式是无可替代的。</p>
<ul>
<li><a href="http://www.blueprintcss.org" target="_blank" rel="external">blueprintcss</a></li>
<li><a href="http://www.unsemantic.com" target="_blank" rel="external">unsemantic</a></li>
<li><a href="http://bluetrip.org" target="_blank" rel="external">bluetrip</a></li>
<li><a href="http://elasticss.com" target="_blank" rel="external">elasticss</a></li>
<li><a href="http://twitter.github.com/bootstrap" target="_blank" rel="external">bootstrap</a></li>
<li><a href="http://gumbyframework.com" target="_blank" rel="external">gumby</a></li>
<li><a href="http://susy.oddbird.net" target="_blank" rel="external">susy</a></li>
<li><a href="http://foundation.zurb.com" target="_blank" rel="external">foundation</a></li>
<li><a href="http://imperavi.com/kube" target="_blank" rel="external">kube</a></li>
<li><a href="http://groundworkcss.github.com" target="_blank" rel="external">groundwork</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是读&lt;a href=&quot;http://zh.learnlayout.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《学习CSS布局》&lt;/a&gt;的摘要、备忘。&lt;/p&gt;
&lt;p&gt;#1. display属性&lt;br&gt;&lt;code&gt;display&lt;/code&gt;
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
      <category term="CSS" scheme="http://ljgabc.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>蛇口渔港</title>
    <link href="http://ljgabc.com/2013/10/15/2013-10-15-%E8%9B%87%E5%8F%A3%E6%B8%94%E6%B8%AF/"/>
    <id>http://ljgabc.com/2013/10/15/2013-10-15-蛇口渔港/</id>
    <published>2013-10-15T02:11:04.000Z</published>
    <updated>2016-11-20T14:29:41.197Z</updated>
    
    <content type="html"><![CDATA[<p>自从8月份以来都没有出去过了，正好赶上今天周末天气也不错，想着相机再不用就该发霉了，就出去溜达了一圈。知道蛇口渔港还是在心声社区上看的，看着帖子里面海边一排渔民在卖海鲜，还挺不错的。</p>
<p>出发前查了下地方，在地铁东角头附近，那就选地铁出行吧。</p>
<p>在蛇口线东角头站下车，从A出口出来（后来发现从B出口出来走金世纪路也很方便）沿着湾厦路向南走，这里有两个城中村：渔一、渔二，看来以前是渔民的村子，应该离渔港不远了。</p>
<p>沿着湾厦路走大概500米穿过两个城中村后来到一条横着的路—望海路，听名字就知道是沿着海岸修的，风景应该不错。有很多骑行的，等红绿灯的2分钟里面大概有10几个过去。</p>
<p>过了红绿灯继续走就100米就能看到一个海湾和一栋大楼</p>
<p><img src="/images/2013-10-15/8180ccba72808b91c33d04b64e474.JPG" alt="渔人码头"></p>
<p>沿着路继续走大概150米，在渔人码头那栋楼后面就是海了，海边确实有不少渔人在卖海鲜</p>
<p><img src="/images/2013-10-15/8daee289f5b6647f777815219c373.JPG" alt="海边"></p>
<p>这个不知道叫什么，很漂亮，随手拍下来了~</p>
<p><img src="/images/2013-10-15/1380dfacedb82416dc0960662936b.JPG" alt="海鲜"></p>
<p>海面上停着不少渔船，海风很腥</p>
<p><img src="/images/2013-10-15/90c289fccb1c623a37900f05ecedc.JPG" alt="渔船"></p>
<p>沿着海边向东（向左）是个长廊，有不少人在这里钓鱼，有个老外拿着迷你三脚架不知道在拍神马？</p>
<p><img src="/images/2013-10-15/7d809ca6ea8282d849dd25984bd49.JPG" alt="钓鱼"></p>
<p>继续往前走就能到灯塔下面了</p>
<p><img src="/images/2013-10-15/c83f85981ea7477609808f8eeee9a.JPG" alt="灯塔"></p>
<p>路标</p>
<p><img src="/images/2013-10-15/e6eca2e4e2e477fcf6bdf45497a54.JPG" alt="路标"></p>
<p>继续往前走还有个草坪，好多老外带着孩子在踢足球、橄榄球之类的。 感觉这些老外好爽啊，周末可以放下工作陪孩子玩。像我们这样的程序猿周末只能加加班，孩子也只能送到各种培训班了。。。（那些把孩子送到培训班的，估计有很大一部分原因是父母没时间陪吧）</p>
<p>逛完草坪就没什么可看的了，从草坪那边可以出来到望海路，然后向右走到金世纪路坐地铁去。在半路碰到一个小伙子在练习山地车前仰和后仰，看得出来也是很喜欢骑行的，经常在望海路上骑着玩，说风景很不错。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从8月份以来都没有出去过了，正好赶上今天周末天气也不错，想着相机再不用就该发霉了，就出去溜达了一圈。知道蛇口渔港还是在心声社区上看的，看着帖子里面海边一排渔民在卖海鲜，还挺不错的。&lt;/p&gt;
&lt;p&gt;出发前查了下地方，在地铁东角头附近，那就选地铁出行吧。&lt;/p&gt;
&lt;p&gt;在蛇口
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
      <category term="摄影" scheme="http://ljgabc.com/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记3</title>
    <link href="http://ljgabc.com/2013/09/28/2013-09-28-Python%E7%AC%94%E8%AE%B03/"/>
    <id>http://ljgabc.com/2013/09/28/2013-09-28-Python笔记3/</id>
    <published>2013-09-28T04:05:48.000Z</published>
    <updated>2016-11-20T14:29:41.197Z</updated>
    
    <content type="html"><![CDATA[<p>#4. 控制语句</p>
<ul>
<li><p><strong>if/elif/else</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">number = 23</div><div class="line">guess = int(input(&apos;Enter an integer : &apos;))</div><div class="line">if guess == number:</div><div class="line">    print(&apos;Congratulations, you guessed it.&apos;) # New block starts here</div><div class="line">    print(&apos;(but you do not win any prizes!)&apos;) # New block ends here</div><div class="line">elif guess &lt; number:</div><div class="line">    print(&apos;No, it is a little higher than that&apos;) # Another block</div><div class="line">    # You can do whatever you want in a block ...</div><div class="line">else:</div><div class="line">    print(&apos;No, it is a little lower than that&apos;)</div><div class="line">    # you must have guessed &gt; number to reach here</div><div class="line"></div><div class="line">print(&apos;Done&apos;)</div><div class="line"># This last statement is always executed, after the if statement is executed</div></pre></td></tr></table></figure>
</li>
<li><p><strong>while</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">number = 23</div><div class="line">running = True</div><div class="line">while running:</div><div class="line">    guess = int(input(&apos;Enter an integer : &apos;))</div><div class="line">    if guess == number:</div><div class="line">        print(&apos;Congratulations, you guessed it.&apos;)</div><div class="line">        running = False # this causes the while loop to stop</div><div class="line">    elif guess &lt; number:</div><div class="line">        print(&apos;No, it is a little higher than that.&apos;)</div><div class="line">    else:</div><div class="line">        print(&apos;No, it is a little lower than that.&apos;)</div><div class="line">else:</div><div class="line">    print(&apos;The while loop is over.&apos;)</div><div class="line">    # Do anything else you want to do here</div><div class="line">print(&apos;Done&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p><strong>for</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">for i in range(1, 5):</div><div class="line">    print(i)</div><div class="line">else:</div><div class="line">    print(&apos;The for loop is over&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p><strong>break</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">while True:</div><div class="line">    s = input(&apos;Enter something : &apos;)</div><div class="line">    if s == &apos;quit&apos;:</div><div class="line">        break</div><div class="line">    print(&apos;Length of the string is&apos;, len(s))</div><div class="line">print(&apos;Done&apos;)</div></pre></td></tr></table></figure>
</li>
<li><p><strong>continue</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">while True:</div><div class="line">    s = input(&apos;Enter something : &apos;)</div><div class="line">    if s == &apos;quit&apos;:</div><div class="line">        break</div><div class="line">    if len(s) &lt; 3:</div><div class="line">        print(&apos;Too small&apos;)</div><div class="line">        continue</div><div class="line">    print(&apos;Input is of sufficient length&apos;)</div><div class="line">    # Do other kinds of processing here...</div></pre></td></tr></table></figure>
</li>
</ul>
<p>#5. 函数</p>
<ul>
<li><p>使用def定义函数，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">def sayHello():</div><div class="line">    print(&apos;Hello World!&apos;) # block belonging to the function</div><div class="line">    # End of function #</div><div class="line"></div><div class="line">sayHello() # call the function</div><div class="line">sayHello() # call the function again</div></pre></td></tr></table></figure>
</li>
<li><p>函数参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">def printMax(a, b):</div><div class="line">    if a &gt; b:</div><div class="line">        print(a, &apos;is maximum&apos;)</div><div class="line">    elif a == b:</div><div class="line">        print(a, &apos;is equal to&apos;, b)</div><div class="line">    else:</div><div class="line">        print(b, &apos;is maximum&apos;)</div><div class="line"></div><div class="line">printMax(3,4) # directly give literal values</div><div class="line">x = 5</div><div class="line">y = 7</div><div class="line">printMax(x, y) # give variables as arguments</div></pre></td></tr></table></figure>
</li>
<li><p>本地变量</p>
</li>
</ul>
<p><strong>所有函数中的变量都是局部变量，与外部同名变量无关</strong></p>
<ul>
<li><p>全局变量必须用global修饰，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">x = 50</div><div class="line">def func():</div><div class="line">    global x</div><div class="line">    print(&apos;x is&apos;, x)</div><div class="line">    x = 2</div><div class="line">    print(&apos;Changed global x to&apos;, x)</div><div class="line">    </div><div class="line">func()</div><div class="line">print(&apos;Value of x is&apos;, x)</div></pre></td></tr></table></figure>
</li>
<li><p>参数默认值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">def say(message, times = 1):</div><div class="line">    print(message * times)</div><div class="line"></div><div class="line">say(&apos;Hello&apos;)</div><div class="line">say(&apos;World&apos;, 5)</div></pre></td></tr></table></figure>
</li>
</ul>
<p><b>有默认值的参数后面不可以有无默认值的参数，如<code>def func(a=5, b)</code></b></p>
<ul>
<li><p>关键词参数<br>有很多参数时，可以通过指定参数名的方法传递参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">def func(a, b=5, c=10):</div><div class="line">    print(&apos;a is&apos;, a, &apos;and b is&apos;, b, &apos;and c is&apos;, c)</div><div class="line"></div><div class="line">func(3, 7)</div><div class="line">func(25, c=24)</div><div class="line">func(c=50, a=100)</div></pre></td></tr></table></figure>
</li>
<li><p>可变参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">def total(initial=5, *numbers, **keywords):</div><div class="line">    count = initial</div><div class="line">    for number in numbers:</div><div class="line">        count += number</div><div class="line">    for key in keywords:</div><div class="line">        count += keywords[key]</div><div class="line">    return count</div><div class="line"></div><div class="line">print(total(10, 1, 2, 3, vegetables=50, fruits=100))</div></pre></td></tr></table></figure>
</li>
<li><p>返回值</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">def maximum(x, y):</div><div class="line">    if x &gt; y:</div><div class="line">        return x</div><div class="line">    elif x == y:</div><div class="line">        return &apos;The numbers are equal&apos;</div><div class="line">    else:</div><div class="line">        return y</div><div class="line"></div><div class="line">print(maximum(2, 3))</div></pre></td></tr></table></figure>
</li>
<li><p>pass<br>pass表示没有任何动作，相当于占位符</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">def someFunction():</div><div class="line">    pass</div></pre></td></tr></table></figure>
</li>
<li><p>DocStrings<br>python鼓励使用docstring对函数进行描述，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">def printMax(x, y):</div><div class="line">    &apos;&apos;&apos;Prints the maximum of two numbers.</div><div class="line">    The two values must be integers.&apos;&apos;&apos;</div><div class="line">    x = int(x) # convert to integers, if possible</div><div class="line">    y = int(y)</div><div class="line">    if x &gt; y:</div><div class="line">        print(x, &apos;is maximum&apos;)</div><div class="line">    else:</div><div class="line">        print(y, &apos;is maximum&apos;)</div><div class="line">        </div><div class="line">printMax(3, 5)</div><div class="line">print(printMax.__doc__)</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#4. 控制语句&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;if/elif/else&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记2</title>
    <link href="http://ljgabc.com/2013/09/12/2013-09-12-Python%E7%AC%94%E8%AE%B02/"/>
    <id>http://ljgabc.com/2013/09/12/2013-09-12-Python笔记2/</id>
    <published>2013-09-12T04:05:48.000Z</published>
    <updated>2016-11-20T14:29:41.197Z</updated>
    
    <content type="html"><![CDATA[<p>#2. 字符串</p>
<ul>
<li>python中，单引号‘和双引号“意义是一样的，没有任何区别,如</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">print &apos;Hello\nPython!&apos;</div><div class="line">print &quot;Hello\nPython!&quot;</div></pre></td></tr></table></figure>
<ul>
<li><p>三引号“”“ 或 ‘’‘都可以用来描述多行字符串，一般多用于doc</p>
</li>
<li><p>Python中字符串不可更改（常量）</p>
</li>
<li><p>用format方法构造字符串</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line">age = 20</div><div class="line">name = &apos;Swaroop&apos;</div><div class="line"># 也可以把0、1去掉</div><div class="line">print(&apos;&#123;0&#125; was &#123;1&#125; years old when he wrote this book&apos;.format(name, age))</div><div class="line">print(&apos;Why is &#123;0&#125; playing with that python?&apos;.format(name))</div></pre></td></tr></table></figure>
</li>
<li><p>默认情况下print会自动换行，如想不换行，可以在参数中加上end=””,如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line"># 不知道是不是python3才有的</div><div class="line">print(&quot;a&quot;, end=&quot;&quot;)</div><div class="line">print(&quot;b&quot;)</div></pre></td></tr></table></figure>
</li>
<li><p>元字符串，不解析任何转移字符，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line">print r&quot;abc\ndef&quot;</div><div class="line">print R&apos;abc\ndef&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>#3. 运算符</p>
<table><br><tr><td>运算符</td><td>含义</td></tr><br><tr><td><code>+</code>、<code>-</code>、<code><em></em></code>、<code>/</code></td><td>加、减、乘、除</td></tr><br><tr><td><code>*</code></td><td>乘方</td></tr><br><tr><td><code>//</code></td><td>整除(<code>13 // 3 = 4</code>)</td></tr><br><tr><td><code>%</code></td><td>求余(<code>13 % 3 = 1</code>, <code>-25.5 % 2.25 = 1.5</code>)</td></tr><br><tr><td><code>&lt;&lt;</code>、<code>&gt;&gt;</code></td><td>左移、右移</td></tr><br><tr><td><code>&amp;</code>、<code>|</code>、<code>^</code></td><td>按位与、或、异或</td></tr><br><tr><td><code>~</code></td><td><code>~x = -(x+1)</code></td></tr><br><tr><td><code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>==</code>、<code>!=</code></td><td>小于、大于、小于等于、大于等于、等于、不等于</td></tr><br><tr><td><code>not</code>、<code>and</code>、<code>or</code></td><td>逻辑与、或、非</td></tr><br></table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#2. 字符串&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;python中，单引号‘和双引号“意义是一样的，没有任何区别,如&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div 
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记1</title>
    <link href="http://ljgabc.com/2013/09/03/2013-09-03-Python%E7%AC%94%E8%AE%B01/"/>
    <id>http://ljgabc.com/2013/09/03/2013-09-03-Python笔记1/</id>
    <published>2013-09-03T01:04:48.000Z</published>
    <updated>2016-11-20T14:29:41.197Z</updated>
    
    <content type="html"><![CDATA[<p>#0. 处理UTF-8<br>默认情况下python是不能处理中文，想要处理中文必须使用utf-8编码，如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/python</div><div class="line"># -*- coding: utf-8 -*- </div><div class="line"></div><div class="line">print &quot;中文打印&quot;</div></pre></td></tr></table></figure></p>
<p>#1. 注释</p>
<ul>
<li><p>python只有单行注释，使用#号，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 这里是注释</div><div class="line"># 打印提示信息</div><div class="line">print &quot;Comment Example.&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>如果需要多行注释，可以使用定义多行文本的方法，如</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;&apos;&apos;</div><div class="line">这里是注释</div><div class="line">打印提示信息</div><div class="line">&apos;&apos;&apos;</div><div class="line">print &quot;Comment Example.&quot;</div></pre></td></tr></table></figure>
</li>
<li><p>添加注释的原则:</p>
</li>
</ul>
<p><strong>Code tells you how, comments should tell why.</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#0. 处理UTF-8&lt;br&gt;默认情况下python是不能处理中文，想要处理中文必须使用utf-8编码，如&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="Python" scheme="http://ljgabc.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>USB3.0笔记</title>
    <link href="http://ljgabc.com/2013/08/23/2013-08-23-USB3-0%E7%AC%94%E8%AE%B0/"/>
    <id>http://ljgabc.com/2013/08/23/2013-08-23-USB3-0笔记/</id>
    <published>2013-08-23T09:00:48.000Z</published>
    <updated>2016-11-20T14:29:41.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Slave-FIFO"><a href="#Slave-FIFO" class="headerlink" title="Slave FIFO"></a>Slave FIFO</h2><p>One popular implementation of GPIF II is the slave FIFO interface.<br>Slave FIFO只是GPIF II的一种实现形式。</p>
<p>###1 GPIF<br>The GPIF II has the following features:</p>
<ul>
<li>Functions as master or slave / 可作为主设备或从设备</li>
<li>Offers 256 firmware programmable states / 提供256个可编程状态</li>
<li>Supports 8-bit, 16-bit, and 32-bit parallel data bus  / 支持8位、16位和32位并行总线</li>
<li>Enables interface frequencies up to 100 MHz / 支持接口频率最高100MHz</li>
<li>Supports 14 configurable control pins when 32-bit data bus is used; all control pins can be either input/output or bidirectional / 使用32位数据总线时支持14个可配置控制信号线；每个信号线都可以作为输入、输出或双向</li>
<li>Supports 16 configurable control pins when 16/8 data bus is used; all control pins can be either input/output or bidirectional / 使用8位或16位数据总线时，支持16个可配置控制信号线；每个信号线都可以作为输入、输出或双向</li>
</ul>
<p>###2 SDK<br>安装FX3 SDK后，可以在以下位置找到GPIF II descriptors for asynchronous slave FIFO and synchronous slave FIFO interfaces</p>
<ul>
<li>$(FX3SDK)/firmware/slavefifo/slfifoasync/cyfxslfifogpifdscr.c</li>
<li>$(FX3SDK)/firmware/slavefifo/slfifosync/cyfxslfifogpifdscr.c</li>
</ul>
<p>其中包含了16位和32位的slave FIFO实现，通过<code>CY_FX_SLFIFO_GPIF_16_32BIT_CONF_SELEC</code>选择（在cyfxslfifoasync.h和cyfxslfifosync.h中定义）。<code>CY_FX_SLFIFO_GPIF_16_32BIT_CONF_SELEC</code>为1时选择32位模式，为0时选择16位模式。</p>
<p>###3 PINMAP</p>
<table><br>    <tr><br>        <td><b>PIN</b></td><br>        <td><b>Async FIFO #16</b></td><br>        <td><b>Sync FIFO #16</b></td><br>        <td><b>Async FIFO #32</b></td><br>        <td><b>Sync FIFO #32</b></td><br>    </tr><br>    <tr><br>        <td>GPIO[17]</td><br>        <td>SLCS#</td><br>        <td>SLCS#</td><br>        <td>SLCS#</td><br>        <td>SLCS#</td><br>    </tr><br>    <tr><br>        <td>GPIO[18]</td><br>        <td>SLWR#</td><br>        <td>SLWR#</td><br>        <td>SLWR#</td><br>        <td>SLWR#</td><br>    </tr><br>    <tr><br>        <td>GPIO[19]</td><br>        <td>SLOE#</td><br>        <td>SLOE#</td><br>        <td>SLOE#</td><br>        <td>SLOE#</td><br>    </tr><br>    <tr><br>        <td>GPIO[20]</td><br>        <td>SLRD#</td><br>        <td>SLRD#</td><br>        <td>SLRD#</td><br>        <td>SLRD#</td><br>    </tr><br>    <tr><br>        <td>GPIO[21]</td><br>        <td>FLAGA</td><br>        <td>FLAGA</td><br>        <td>FLAGA</td><br>        <td>FLAGA</td><br>    </tr><br>    <tr><br>        <td>GPIO[22]</td><br>        <td>FLAGB</td><br>        <td>FLAGB</td><br>        <td>FLAGB</td><br>        <td>FLAGB</td><br>    </tr><br>    <tr><br>        <td>GPIO[24]</td><br>        <td>PKTEND#</td><br>        <td>PKTEND#</td><br>        <td>PKTEND#</td><br>        <td>PKTEND#</td><br>    </tr><br>    <tr><br>        <td>GPIO[28]</td><br>        <td>A1</td><br>        <td>A1</td><br>        <td>A1</td><br>        <td>A1</td><br>    </tr><br>    <tr><br>        <td>GPIO[29]</td><br>        <td>A0</td><br>        <td>A0</td><br>        <td>A0</td><br>        <td>A0</td><br>    </tr><br>    <tr><br>        <td>GPIO[0:15]</td><br>        <td>DQ[0:15]</td><br>        <td>DQ[0:15]</td><br>        <td>DQ[0:15]</td><br>        <td>DQ[0:15]</td><br>    </tr><br>    <tr><br>        <td>GPIO[16]</td><br>        <td>NC</td><br>        <td>PCLK</td><br>        <td>NC</td><br>        <td>PCLK</td><br>    </tr><br>    <tr><br>        <td>GPIO[33:44]</td><br>        <td>GPIO</td><br>        <td>GPIO</td><br>        <td>DQ[16:27]</td><br>        <td>DQ[16:27]</td><br>    </tr><br>    <tr><br>        <td>GPIO[45]</td><br>        <td>GPIO</td><br>        <td>GPIO</td><br>        <td>GPIO</td><br>        <td>GPIO</td><br>    </tr><br>    <tr><br>        <td>GPIO[46]</td><br>        <td>GPIO/UART_RTS</td><br>        <td>GPIO/UART_RTS</td><br>        <td>DQ28</td><br>        <td>DQ28</td><br>    </tr><br>    <tr><br>        <td>GPIO[47]</td><br>        <td>GPIO/UART_CTS</td><br>        <td>GPIO/UART_CTS</td><br>        <td>DQ29</td><br>        <td>DQ29</td><br>    </tr><br>    <tr><br>        <td>GPIO[48]</td><br>        <td>GPIO/UART_TX</td><br>        <td>GPIO/UART_TX</td><br>        <td>DQ30</td><br>        <td>DQ30</td><br>    </tr><br>    <tr><br>        <td>GPIO[49]</td><br>        <td>GPIO/UART_RX</td><br>        <td>GPIO/UART_RX</td><br>        <td>DQ31</td><br>        <td>DQ31</td><br>    </tr><br>    <tr><br>        <td>GPIO[50]</td><br>        <td>GPIO/I2S_CLK</td><br>        <td>GPIO/I2S_CLK</td><br>        <td>GPIO/I2S_CLK</td><br>        <td>GPIO/I2S_CLK</td><br>    </tr><br>    <tr><br>        <td>GPIO[51]</td><br>        <td>GPIO/I2S_SD</td><br>        <td>GPIO/I2S_SD</td><br>        <td>GPIO/I2S_SD</td><br>        <td>GPIO/I2S_SD</td><br>    </tr><br>    <tr><br>        <td>GPIO[52]</td><br>        <td>GPIO/I2S_WS</td><br>        <td>GPIO/I2S_WS</td><br>        <td>GPIO/I2S_WS</td><br>        <td>GPIO/I2S_WS</td><br>    </tr><br>    <tr><br>        <td>GPIO[53]</td><br>        <td>GPIO/SPI_SCK/UART_RTS</td><br>        <td>GPIO/SPI_SCK/UART_RTS</td><br>        <td>GPIO/UART_RTS</td><br>        <td>GPIO/UART_RTS</td><br>    </tr><br>    <tr><br>        <td>GPIO[54]</td><br>        <td>GPIO/SPI_SSN/UART_RTS</td><br>        <td>GPIO/SPI_SSN/UART_RTS</td><br>        <td>GPIO/UART_RTS</td><br>        <td>GPIO/UART_RTS</td><br>    </tr><br>    <tr><br>        <td>GPIO[55]</td><br>        <td>GPIO/SPI_MISO/UART_TX</td><br>        <td>GPIO/SPI_MISO/UART_TX</td><br>        <td>GPIO/UART_TX</td><br>        <td>GPIO/UART_TX</td><br>    </tr><br>    <tr><br>        <td>GPIO[56]</td><br>        <td>GPIO/SPI_MOSI/UART_RX</td><br>        <td>GPIO/SPI_MOSI/UART_RX</td><br>        <td>GPIO/UART_RX</td><br>        <td>GPIO/UART_RX</td><br>    </tr><br>    <tr><br>        <td>GPIO[57]</td><br>        <td>GPIO/I2S_MCLK</td><br>        <td>GPIO/I2S_MCLK</td><br>        <td>GPIO/I2S_MCLK</td><br>        <td>GPIO/I2S_MCLK</td><br>    </tr><br></table>

<p>###4  Diagram</p>
<ul>
<li>Asynchronous Slave FIFO Interface Diagram</li>
</ul>
<p><img src="/images/2013/Dec/async_fifo.png" alt="async_fifo"></p>
<ul>
<li>Synchronous Slave FIFO Interface Diagram</li>
</ul>
<p><img src="/images/2013/Dec/sync_fifo-1.png" alt="sync_fifo"></p>
<p>###5 Access Sequence</p>
<ul>
<li>allow single-cycle or burst date access</li>
<li>external device presents 2-bit address on FIFO ADDR lines</li>
<li>external device asserts the read or write strobes</li>
<li>FX3 asserts the FLAG signals to indicate empty or full conditions of the buffer</li>
</ul>
<p>####5.1 Asynchronous Slave FIFO Read Sequence</p>
<ul>
<li>FIFO address is stable and the SLCS# signal is asserted.</li>
<li>SLOE# is asserted. This results in the data bus being driven.</li>
<li>SLRD# is asserted.</li>
<li>Data from the FIFO is driven on assertion of SLRD#. This data is valid after a propagation delay of tRDO from the falling edge of SLRD#.</li>
<li>FIFO pointer is incremented on deassertion of SLRD#.</li>
</ul>
<p>The same sequence of events is also shown for a burst read.</p>
<p><strong>Note</strong> In burst read mode, during SLOE# assertion, the data bus is in a driven state (data driven is from previously addressed FIFO). On assertion of SLRD#, data from the FIFO is driven on the data bus (SLOE# must also be asserted), and the FIFO pointer is incremented on deassertion of SLRD#.</p>
<p><strong>FLAG Usage:</strong> The FLAG signals are monitored by the external processor for flow control. FLAG signals are outputs from EZ-USB FX3 that may be configured to show empty/full/partial status for a dedicated thread or for the current thread being addressed.</p>
<p>####5.2 Asynchronous Slave FIFO Write Sequence</p>
<ul>
<li>FIFO address is driven and SLCS# is asserted.</li>
<li>SLWR# is asserted. SLCS# must be asserted with SLWR# or before SLWR# is asserted.</li>
<li>Data must be present on the bus tWRS before the de-asserting edge of SLWR#.</li>
<li>De-assertion of SLWR# causes the data to be written from the data bus to the FIFO and then FIFO pointer is incremented.</li>
<li>The FIFO flag is updated after tWFLG from the de-asserting edge of SLWR.</li>
</ul>
<p>The same sequence of events is shown for a burst write.</p>
<p><strong>Note</strong> In the burst write mode, after SLWR# deassertion, the data is written to the FIFO, and then the FIFO pointer is incremented. In the previous diagram, 4 bytes are written to the FIFO.</p>
<p><strong>Short Packet:</strong> A short packet can be committed to the USB host by using PKTEND#. The external device or processor should be designed to assert the PKTEND# along with the last word of data and SLWR# pulse corresponding to the last word. The FIFOADDR lines have to be held constant during the PKTEND# assertion.</p>
<p><strong>Zero Length Packet:</strong> The external device/processor can signal a Zero Length Packet (ZLP), simply by asserting PKTEND#, without asserting SLWR#. SLCS# and address must be driven as shown in the previous timing diagram.</p>
<p><strong>FLAG Usage:</strong> The FLAG signals are monitored by the external processor for flow control. These signals are outputs from EZ-USB FX3 that may be configured to show empty/full/partial status for a dedicated thread or the current thread being addressed.</p>
<p>####5.3 Synchronous Slave FIFO Read Sequence</p>
<p><img src="/images/2013/Dec/SyncRead-1.png" alt="SyncRead"></p>
<ul>
<li>FIFO address is stable and SLCS# is asserted.</li>
<li>SLOE# is asserted. SLOE# is an output enable only whose sole function is to drive the data bus.</li>
<li>SLRD# is asserted.</li>
</ul>
<p>The FIFO pointer is updated on the rising edge of the PCLK, while SLRD# is asserted. This action starts the propagation of data from the newly addressed FIFO to the data bus. After a propagation delay of tCO (measured from the rising edge of PCLK), the new data value is present. N is the first data value read from the FIFO. To drive the data bus, SLOE# must also be asserted.</p>
<p>The same sequence of events is shown for a burst read.</p>
<p><strong>Note</strong> For burst mode, the SLRD# and SLOE# are left asserted during the entire duration of the read. When SLOE# is asserted, the data bus is driven (with data from the previously addressed FIFO). For each subsequent rising edge of PCLK, while the SLRD# is asserted, the FIFO pointer is incremented and the next data value is placed on the data bus.</p>
<p><strong>FLAG Usage:</strong> The FLAG signals are monitored by the external processor for flow control. FLAG signals are outputs from EZ-USB FX3 that may be configured to show empty/full/partial status for a dedicated thread or the current thread being addressed.</p>
<p>####5.4 Synchronous Slave FIFO Write Sequence</p>
<p><img src="/images/2013/Dec/SyncWrite-1.png" alt="SyncWrite"></p>
<ul>
<li>FIFO address is stable and the signal SLCS# is asserted.</li>
<li>External master/peripheral outputs the data onto the data bus.</li>
<li>SLWR# is asserted.</li>
<li>While the SLWR# is asserted, data is written to the FIFO and on the rising edge of the PCLK, the FIFO pointer is incremented.</li>
<li>The FIFO flag is updated after a delay of tWFLG from the rising edge of the clock.</li>
</ul>
<p>The same sequence of events also is shown for a burst write.</p>
<p><strong>Note</strong> For the burst mode, SLWR# and SLCS# are left asserted for the entire duration of the burst write. In the burst write mode, after the SLWR# is asserted, the value on the data bus is written into the FIFO on every rising edge of PCLK. The FIFO pointer is updated on each rising edge of PCLK.</p>
<p><strong>Short Packet:</strong> A short packet can be committed to the USB host by using the PKTEND#. The external device/processor should be designed to assert the PKTEND# along with the last word of data and SLWR# pulse corresponding to the last word. The FIFOADDR lines must be held constant during the PKTEND# assertion.</p>
<p><strong>Note</strong> The minimum size of a burst write access should be three words. If fewer than three words are needed, those words should be written as single-cycle accesses. </p>
<p><strong>Zero Length Packet:</strong> The external device/processor can signal a Zero Length Packet (ZLP) by asserting PKTEND#, without asserting SLWR#. SLCS# and address must be driven as shown in Figure 8. FLAG Usage: The FLAG signals are monitored by the external processor for flow control. FLAG signals are outputs from the EZ-USB FX3 device that may be configured to show empty/full/partial status for a dedicated thread or the current thread being addressed.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Slave-FIFO&quot;&gt;&lt;a href=&quot;#Slave-FIFO&quot; class=&quot;headerlink&quot; title=&quot;Slave FIFO&quot;&gt;&lt;/a&gt;Slave FIFO&lt;/h2&gt;&lt;p&gt;One popular implementation of GPIF II 
    
    </summary>
    
      <category term="硬件" scheme="http://ljgabc.com/categories/%E7%A1%AC%E4%BB%B6/"/>
    
    
      <category term="USB" scheme="http://ljgabc.com/tags/USB/"/>
    
  </entry>
  
  <entry>
    <title>切换界面的另一种方法</title>
    <link href="http://ljgabc.com/2013/06/02/2013-06-02-%E5%88%87%E6%8D%A2%E7%95%8C%E9%9D%A2%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <id>http://ljgabc.com/2013/06/02/2013-06-02-切换界面的另一种方法/</id>
    <published>2013-06-02T08:56:48.000Z</published>
    <updated>2016-11-20T14:29:41.197Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇文章《用<code>intent</code>切换<code>activity</code>》学习了使用<code>Intent</code>切换<code>Activity</code>实现启动界面的一种方法。如果只是切换显示的话，还可以用<code>setContentView</code>方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void setContentView (View view, ViewGroup.LayoutParams params)</div></pre></td></tr></table></figure></p>
<p>Set the activity content to an explicit view. This view is placed directly into the activity’s view hierarchy. It can itself be a complex view hierarchy.</p>
<p><strong>代码:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">package com.ljgabc.switchactivity;</div><div class="line"></div><div class="line">import android.os.Bundle;</div><div class="line">import android.os.Handler;</div><div class="line">import android.app.Activity;</div><div class="line">import android.content.Intent;</div><div class="line">import android.view.Window;</div><div class="line">import android.view.WindowManager;</div><div class="line"></div><div class="line">public class SplashActivity extends Activity &#123;</div><div class="line"></div><div class="line">    final private int SPLASH_TIME = 2000;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        </div><div class="line">        /*</div><div class="line">         * 设置全屏</div><div class="line">         */</div><div class="line">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN ,      </div><div class="line">                WindowManager.LayoutParams.FLAG_FULLSCREEN);</div><div class="line">        </div><div class="line">        /*</div><div class="line">         * 设置隐藏标题栏</div><div class="line">         */</div><div class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">        </div><div class="line">        /*</div><div class="line">         * 2秒后跳转到主界面</div><div class="line">         */</div><div class="line">        new Handler().postDelayed(new Runnable() &#123;</div><div class="line">            public void run() &#123;</div><div class="line">                launchMainActivity();</div><div class="line">            &#125;</div><div class="line">        &#125;, SPLASH_TIME);</div><div class="line">        </div><div class="line">        setContentView(R.layout.activity_splash);</div><div class="line">    &#125;   </div><div class="line">    </div><div class="line">    /*</div><div class="line">     * 利用Intent切换到主Activity</div><div class="line">     */</div><div class="line">    private void launchMainActivity() &#123;</div><div class="line">         /*</div><div class="line">         * 设置全屏</div><div class="line">         */</div><div class="line">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN ,      </div><div class="line">                WindowManager.LayoutParams.FLAG_FORCE_NOT_FULLSCREEN);</div><div class="line"></div><div class="line">        /*</div><div class="line">         * 切换当前Activity的layout</div><div class="line">         */</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要改变在<code>launchMainActivity()</code>这个函数。</p>
<p><strong>使用Intent切换Activity和使用setContentView的区别如下:</strong></p>
<ul>
<li>前者是在不同的Activity之间切换，切换时当前Activity会被压栈;后者只有一个Activity。</li>
<li>前者如果跳转前的Activity没有退出的话，切换后的Activity结束后，前一个Activity会恢复显示，常见的就是通过返回键返回上一个界面；后者由于只有一个Activity，不能通过返回键返回，返回键会结束当前Activity，所有的界面都结束了。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇文章《用&lt;code&gt;intent&lt;/code&gt;切换&lt;code&gt;activity&lt;/code&gt;》学习了使用&lt;code&gt;Intent&lt;/code&gt;切换&lt;code&gt;Activity&lt;/code&gt;实现启动界面的一种方法。如果只是切换显示的话，还可以用&lt;code&gt;setCont
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>用观察者模式实现C++函数回调</title>
    <link href="http://ljgabc.com/2013/04/17/2013-04-17-%E7%94%A8%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0C-%E5%87%BD%E6%95%B0%E5%9B%9E%E8%B0%83/"/>
    <id>http://ljgabc.com/2013/04/17/2013-04-17-用观察者模式实现C-函数回调/</id>
    <published>2013-04-17T03:44:48.000Z</published>
    <updated>2016-11-20T14:29:41.197Z</updated>
    
    <content type="html"><![CDATA[<p>设计模式之观察者模式，基本概念我就不说了，可以参考百度百科<br><a href="http://baike.baidu.com/view/1854779.htm" target="_blank" rel="external">观察者模式</a>。</p>
<p>这个模式应该是最常用的模式之一了，以前用的回调函数其实也可以看作是观察者模式的一种实现。以下是我的部分代码，放到这里备忘。可以替代回调函数。</p>
<ul>
<li><p>被观察者/消息发布者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">#ifndef __SUBJECT_H__</div><div class="line">#define __SUBJECT_H__</div><div class="line"></div><div class="line">#include &lt;map&gt;</div><div class="line">#include &lt;list&gt;</div><div class="line">#include &quot;Observer.h&quot;</div><div class="line">// 被观察者，信息发布者，主题</div><div class="line">class Subject</div><div class="line">&#123;</div><div class="line">public:</div><div class="line">    Subject() &#123;</div><div class="line">    &#125;</div><div class="line">    ~Subject() &#123;</div><div class="line">    &#125; </div><div class="line">    </div><div class="line">    /*</div><div class="line">     * 注册/添加观察者</div><div class="line">     */</div><div class="line">    void Attach(Observer *observer) &#123;</div><div class="line">      m_observers[0].push_back(observer);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">    /*</div><div class="line">     * 有多个事件时，用index区分不同的事件</div><div class="line">     */</div><div class="line">    void Attach(Observer *observer, int index=0) &#123;</div><div class="line">      m_observers[index].push_back(observer);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    /*</div><div class="line">     * 移除观察者</div><div class="line">     */</div><div class="line">    void Remove(Observer *observer) &#123;</div><div class="line">        if (m_observers.find(0) != m_observers.end()) &#123;</div><div class="line">            m_observers[0].remove(observer);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    void Remove(Observer *observer, int index=0) &#123;</div><div class="line">        if (m_observers.find(index) != m_observers.end()) &#123;</div><div class="line">        m_observers[index].remove(observer);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    /*</div><div class="line">     * 通知观察者</div><div class="line">     */</div><div class="line">    void Notify() &#123;</div><div class="line">        if (m_observers.find(0) != m_observers.end()) &#123;</div><div class="line">            std::list&lt;Observer*&gt;::iterator iter = m_observers[0].begin();</div><div class="line">            for(; iter != m_observers[0].end(); iter++) &#123;</div><div class="line">                (*iter)-&gt;Update();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    void Notify(int index) &#123;</div><div class="line">        if (m_observers.find(index) != m_observers.end()) &#123;</div><div class="line">            std::list&lt;Observer*&gt;::iterator iter = m_observers[index].begin();</div><div class="line">            for(; iter != m_observers[index].end(); iter++) &#123;</div><div class="line">                (*iter)-&gt;Update();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">protected:</div><div class="line">    int m_bIndex;</div><div class="line">private:</div><div class="line">    /*</div><div class="line">     * 观察者列表</div><div class="line">     */</div><div class="line">    std::map&lt;int, std::list&lt;Observer*&gt; &gt; m_observers;</div><div class="line">&#125;;</div><div class="line">#define INSERT_CALLBACK(index)  Notify(index)</div><div class="line">#endif</div></pre></td></tr></table></figure>
</li>
<li><p>观察者/回调函数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#ifndef __OBSERVER_H__</div><div class="line">#define __OBSERVER_H__</div><div class="line">//观察者  </div><div class="line">class Observer    </div><div class="line">&#123;  </div><div class="line">public:  </div><div class="line">      Observer() &#123;&#125;  </div><div class="line">      ~Observer() &#123;&#125;  </div><div class="line">      virtual void Update() &#123;&#125;   </div><div class="line">&#125;; </div><div class="line">#endif</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;设计模式之观察者模式，基本概念我就不说了，可以参考百度百科&lt;br&gt;&lt;a href=&quot;http://baike.baidu.com/view/1854779.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;观察者模式&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这个模式应
    
    </summary>
    
      <category term="软件" scheme="http://ljgabc.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="设计模式" scheme="http://ljgabc.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>EC库组织形式草稿</title>
    <link href="http://ljgabc.com/2013/04/12/2013-04-12-EC%E5%BA%93%E7%BB%84%E7%BB%87%E5%BD%A2%E5%BC%8F%E8%8D%89%E7%A8%BF/"/>
    <id>http://ljgabc.com/2013/04/12/2013-04-12-EC库组织形式草稿/</id>
    <published>2013-04-12T11:41:15.000Z</published>
    <updated>2016-11-20T14:29:41.197Z</updated>
    
    <content type="html"><![CDATA[<p>为减少重复性错误，建议每个部门、小组都建立一个EC（错误检查）案例库。案例库的组织形式备忘：</p>
<ol>
<li>最终形式是一个网页形式,用户可以按照多种方式索引,查看感兴趣的领域已经入库的EC案例;</li>
<li><p>每一条 EC 案例包括但不限于以下信息:</p>
<ul>
<li>编号;</li>
<li>所属项目;</li>
<li>联系人;</li>
<li>标签(单片机、电源等);</li>
<li>产生错误原因(人为原因、芯片 BUG 等);</li>
<li>如何发现的错误(哪个阶段发现的错误,设计 review、仿真、验证、测试、最终用户等);</li>
<li>解决办法(当时如何修改的);</li>
<li>原理图或代码截图等,有图有真相;</li>
<li>结论或经验;</li>
<li><p>其他……;</p>
<p><strong>每条案例可以有多个TAG,便于用户检索,比如按项目检索或按涉及领域检索等;</strong></p>
</li>
</ul>
</li>
<li>案例的录入由专人进行,应在解决问题后将EC案例录入数据库;</li>
<li>项目开发过程中有一个专门的步骤,由设计人员和验证人员一起对相似的 EC 进行核查;</li>
<li>对继承的项目,则原先的EC全部都要核查,相同领域的EC根据需要也可以进行核查；</li>
<li>核查结果以Excel表格的形式给出,对每一条EC,设计人员验证人员需要给出以下信息:<ul>
<li>若该条 EC 不适用于本项目,给出理由;</li>
<li>适用于本项目,给出确保不会再次发生的措施;</li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为减少重复性错误，建议每个部门、小组都建立一个EC（错误检查）案例库。案例库的组织形式备忘：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;最终形式是一个网页形式,用户可以按照多种方式索引,查看感兴趣的领域已经入库的EC案例;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每一条 EC 案例包括但不限于以下信息:&lt;
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
      <category term="EC" scheme="http://ljgabc.com/tags/EC/"/>
    
  </entry>
  
  <entry>
    <title>2013-03-23-用Intent切换Activity</title>
    <link href="http://ljgabc.com/2013/03/23/2013-03-23-%E7%94%A8Intent%E5%88%87%E6%8D%A2Activity/"/>
    <id>http://ljgabc.com/2013/03/23/2013-03-23-用Intent切换Activity/</id>
    <published>2013-03-23T01:38:48.000Z</published>
    <updated>2016-11-20T14:29:41.197Z</updated>
    
    <content type="html"><![CDATA[<p>An intent is an abstract description of an operation to be performed. It can be used with startActivity to launch an Activity, broadcastIntent to send it to any interested BroadcastReceiver components, and startService(Intent) or bindService(Intent, ServiceConnection, int) to communicate with a background Service.<br>Intent是对一个要执行的操作的抽象描述。通过<code>Intent</code>，你可以使用<code>startActivity()</code>来启动一个<code>Activity</code>；使用<code>sendBroadcast()、sendOrderedBroadcast()、sendStickyBoradcast（）</code>等方法将其发送给任何感兴趣的<code>BroadcastReceiver</code>组件；或者使用<code>startService(Intent)</code>和<code>bindService(Intent, ServiceConnection, int)</code>来和一个后台服务通信。</p>
<p>An Intent provides a facility for performing late runtime binding between the code in different applications. Its most significant use is in the launching of activities, where it can be thought of as the glue between activities. It is basically a passive data structure holding an abstract description of an action to be performed.</p>
<p><code>Intent</code>提供了在不同<code>Applications</code>间实施延时绑定的方法。它主要用来切换不同的<code>Activity</code>，可以看作是<code>Activities</code>间的通信媒介。<br>常见的用法有:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">startActivity()           //启动另外一个Activity</div><div class="line">startActivityForResult()    //启动一个Activity并监听其返回值</div><div class="line"></div><div class="line">startService()            //启动一个服务</div><div class="line">bindService()             //绑定一个后台服务</div><div class="line"></div><div class="line">sendBroadcast()           //发送一个广播</div><div class="line">sendOrderedBroadcast()    //发送顺序广播</div><div class="line">sendStickyBoradcast()      //发送滞留广播，消息不会丢失</div></pre></td></tr></table></figure></p>
<p>一个<code>Android</code>程序可能有多个<code>Activity</code>，或者可以说有多个界面。最常见的就是很多程序在启动时都会有个全屏的启动画面，延时几秒后进入主界面，其实现方法（之一）就是创建两个<code>Activity</code>，启动时进入启动画面的<code>Activity</code>，几秒种后自动跳转到主界面的<code>Activity</code>。</p>
<p>AndroidManifest.xml:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    package=&quot;com.ljgabc.switchactivity&quot;</div><div class="line">    android:versionCode=&quot;1&quot;</div><div class="line">    android:versionName=&quot;1.0&quot; &gt;</div><div class="line"></div><div class="line">    &lt;uses-sdk</div><div class="line">        android:minSdkVersion=&quot;8&quot;</div><div class="line">        android:targetSdkVersion=&quot;18&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;application</div><div class="line">        android:allowBackup=&quot;true&quot;</div><div class="line">        android:icon=&quot;@drawable/ic_launcher&quot;</div><div class="line">        android:label=&quot;@string/app_name&quot;</div><div class="line">        android:theme=&quot;@style/AppTheme&quot; &gt;</div><div class="line"></div><div class="line">        &lt;!-- 每个Activity都要在这里注册，不然程序运行时会由于找不到Activity而报错 --&gt;</div><div class="line">        &lt;activity</div><div class="line">            android:name=&quot;com.ljgabc.switchactivity.SplashActivity&quot;</div><div class="line">            android:label=&quot;@string/app_name&quot; &gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;!-- 这里标识程序启动时进入的那个Activity，有且只有一个 --&gt;</div><div class="line">                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;</div><div class="line"></div><div class="line">                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line"></div><div class="line">        &lt;!-- 启动界面完成后跳转到此Activity --&gt;</div><div class="line">        &lt;activity android:name=&quot;com.ljgabc.switchactivity.MainActivity&quot;&gt;&lt;/activity&gt;</div><div class="line">    &lt;/application&gt;</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure></p>
<p>SplashActivity.java:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">package com.ljgabc.switchactivity;</div><div class="line"></div><div class="line">import android.os.Bundle;</div><div class="line">import android.os.Handler;</div><div class="line">import android.app.Activity;</div><div class="line">import android.content.Intent;</div><div class="line">import android.view.Window;</div><div class="line">import android.view.WindowManager;</div><div class="line"></div><div class="line">/*</div><div class="line"> * 启动界面的Activity，显示LOGO两秒后跳转到MainActivity，并销毁自己</div><div class="line"> */</div><div class="line">public class SplashActivity extends Activity &#123;</div><div class="line"></div><div class="line">    final private int SPLASH_TIME = 2000;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        </div><div class="line">        /*</div><div class="line">         * 设置全屏</div><div class="line">         */</div><div class="line">        getWindow().setFlags(WindowManager.LayoutParams. FLAG_FULLSCREEN ,      </div><div class="line">                WindowManager.LayoutParams. FLAG_FULLSCREEN);</div><div class="line">        </div><div class="line">        /*</div><div class="line">         * 设置隐藏标题栏</div><div class="line">         */</div><div class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">        </div><div class="line">        /*</div><div class="line">         * 2秒后跳转到主界面</div><div class="line">         */</div><div class="line">        new Handler().postDelayed(new Runnable() &#123;</div><div class="line">            public void run() &#123;</div><div class="line">                launchMainActivity();</div><div class="line">            &#125;</div><div class="line">        &#125;, SPLASH_TIME);</div><div class="line">        </div><div class="line">        setContentView(R.layout.activity_splash);</div><div class="line">    &#125;   </div><div class="line">    </div><div class="line">    /*</div><div class="line">     * 利用Intent切换到主Activity</div><div class="line">     */</div><div class="line">    private void launchMainActivity() &#123;</div><div class="line">        /*</div><div class="line">         * 创建一个intent，从当前Activity指向要跳转的Activity</div><div class="line">         */</div><div class="line">        Intent intent = new Intent(this, MainActivity.class);</div><div class="line">        </div><div class="line">        /*</div><div class="line">         * 启动目标Activity</div><div class="line">         */</div><div class="line">        startActivity(intent);</div><div class="line">        </div><div class="line">        /*</div><div class="line">         * 启动画面只需要程序开始时显示一次，显示完后即可退出</div><div class="line">         */</div><div class="line">        finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MainActivity.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.ljgabc.switchactivity;</div><div class="line"></div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.Window;</div><div class="line">import android.app.Activity;</div><div class="line"></div><div class="line">public class MainActivity extends Activity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        </div><div class="line">        /*</div><div class="line">         * 设置隐藏标题栏</div><div class="line">         */</div><div class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE);</div><div class="line">        </div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>效果：</p>
<p>{<1>}<img src="http://ljgabc.tk/img/switchactivity.gif" alt="demo"></1></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;An intent is an abstract description of an operation to be performed. It can be used with startActivity to launch an Activity, broadcastI
    
    </summary>
    
      <category term="Android" scheme="http://ljgabc.com/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>一些法律常识</title>
    <link href="http://ljgabc.com/2013/03/19/2013-03-19-%E4%B8%80%E4%BA%9B%E6%B3%95%E5%BE%8B%E5%B8%B8%E8%AF%86-%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0/"/>
    <id>http://ljgabc.com/2013/03/19/2013-03-19-一些法律常识-持续更新/</id>
    <published>2013-03-19T07:35:48.000Z</published>
    <updated>2016-11-20T14:29:41.197Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>法律没有禁止的就是允许的行为</li>
<li>在证明一个人有罪之前，这个人就是无辜的</li>
<li>说某个人有罪是刑法上的说法，说某个人对某件事情承担法律责任则往往是指民事责任</li>
<li>宪法是用来约束政府的，即约束政府不能践踏个人的基本权利，没有公民要遵守宪法一说</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;法律没有禁止的就是允许的行为&lt;/li&gt;
&lt;li&gt;在证明一个人有罪之前，这个人就是无辜的&lt;/li&gt;
&lt;li&gt;说某个人有罪是刑法上的说法，说某个人对某件事情承担法律责任则往往是指民事责任&lt;/li&gt;
&lt;li&gt;宪法是用来约束政府的，即约束政府不能践踏个人的基本权利，没有
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
  <entry>
    <title>BusyBox的串口调试助手</title>
    <link href="http://ljgabc.com/2013/03/11/2013-03-11-BusyBox%E7%9A%84%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95%E5%8A%A9%E6%89%8B/"/>
    <id>http://ljgabc.com/2013/03/11/2013-03-11-BusyBox的串口调试助手/</id>
    <published>2013-03-11T03:32:48.000Z</published>
    <updated>2016-11-20T14:29:41.196Z</updated>
    
    <content type="html"><![CDATA[<p><strong>microcom</strong> : busybox下的串口工具</p>
<p>可以在Android下使用，调试GPS等很有用。</p>
<p>使用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">busybox microcom [-d DELAY] [-t TIMEOUT] [-s SPEED] [-X] TTY  </div><div class="line">    -d Wait up to DELAY ms for TTY output before sending every next byte to it</div><div class="line">    -t Exit if both stdin and TTY are silent for TIMEOUT ms</div><div class="line">    -s Set serial line to SPEED</div><div class="line">    -X Disable special meaning of NUL and Ctrl-X from stdin</div></pre></td></tr></table></figure></p>
<p>如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">busybox microcom -s 115200 /dev/ttymxc0</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;microcom&lt;/strong&gt; : busybox下的串口工具&lt;/p&gt;
&lt;p&gt;可以在Android下使用，调试GPS等很有用。&lt;/p&gt;
&lt;p&gt;使用方法：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="BusyBox" scheme="http://ljgabc.com/tags/BusyBox/"/>
    
  </entry>
  
  <entry>
    <title>Xterm配置文件</title>
    <link href="http://ljgabc.com/2012/10/07/2012-10-07-Xterm%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://ljgabc.com/2012/10/07/2012-10-07-Xterm配置文件/</id>
    <published>2012-10-07T13:20:35.000Z</published>
    <updated>2016-11-20T14:29:41.196Z</updated>
    
    <content type="html"><![CDATA[<p>Xterm配置文件，轻量级terminal，不依赖libvte，貌似是最快的terminal之一了（当然还有uxvt）。</p>
<p>~/.Xdefaults<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">XTerm*termName: xterm-256color</div><div class="line">XTerm*visualBell: false</div><div class="line">XTerm*marginBell: false</div><div class="line">XTerm*alwaysHighlight: false</div><div class="line"></div><div class="line">Xft.dpi:96</div><div class="line"></div><div class="line">XTerm*locale: true</div><div class="line">xterm.utf8: true</div><div class="line">XTerm*utf8Title: true</div><div class="line"></div><div class="line">xterm*xftAntialias: true</div><div class="line"></div><div class="line">XTerm*fontMenu*fontdefault*Label: Default</div><div class="line">XTerm*faceName: Bitstream Vera Sans Mono:antialias=True:pixelsize=15</div><div class="line"></div><div class="line">XTerm*faceSize: 12</div><div class="line">XTerm*faceSize1: 12</div><div class="line">XTerm*faceSize2: 12</div><div class="line">XTerm*faceSize3: 12</div><div class="line">XTerm*faceSize4: 12</div><div class="line">XTerm*faceSize5: 12</div><div class="line">XTerm*faceSize6: 12</div><div class="line">XTerm.cjkWidth:true</div><div class="line"></div><div class="line">XTerm*background: #dedede</div><div class="line">XTerm*foreground: #682dcd</div><div class="line"></div><div class="line">XTerm*scrollBar: falseXTerm*rightScrollBar: false</div><div class="line">XTerm*jumpScroll: true</div><div class="line">XTerm*scrollKey: false</div><div class="line">XTerm*scrollTtyOutput: false</div><div class="line">XTerm*SaveLines: 1000</div><div class="line"></div><div class="line">!中文支持</div><div class="line">xterm*faceNameDoublesize: wenquanyi bitmap song:pixelsize=16:antialias=True</div><div class="line">XTerm*XimFont: -wenquanyi-wenquanyi bitmap song-medium-r-normal--16-160-75-75-p-80-iso10646-1</div><div class="line"></div><div class="line">XTerm*loginShell: true</div><div class="line"></div><div class="line">xterm.geometry: 80x36</div><div class="line">xterm.borderLess: true</div><div class="line">xterm.cursorBlink: false</div><div class="line">xterm*colorUL: yellow</div><div class="line">xterm*colorBD: white</div><div class="line"></div><div class="line">xterm*color0: #2e3436</div><div class="line">xterm*color1: #cc0000</div><div class="line">xterm*color2: #4e9a06</div><div class="line">xterm*color3: #c4a000</div><div class="line">xterm*color4: #3465a4</div><div class="line">xterm*color5: #75507b</div><div class="line">xterm*color6: #0b939b</div><div class="line">xterm*color7: #d3d7cf</div><div class="line">xterm*color8: #555753</div><div class="line">xterm*color9: #ef2929</div><div class="line">xterm*color10: #00cd00</div><div class="line">xterm*color11: #fce94f</div><div class="line">xterm*color12: #729fcf</div><div class="line">xterm*color13: #ad7fa8</div><div class="line">xterm*color14: #00c5cd</div><div class="line">xterm*color15: #eeeeec</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Xterm配置文件，轻量级terminal，不依赖libvte，貌似是最快的terminal之一了（当然还有uxvt）。&lt;/p&gt;
&lt;p&gt;~/.Xdefaults&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="xterm" scheme="http://ljgabc.com/tags/xterm/"/>
    
  </entry>
  
  <entry>
    <title>VIM配置文件</title>
    <link href="http://ljgabc.com/2012/08/30/2012-08-30-VIM%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://ljgabc.com/2012/08/30/2012-08-30-VIM配置文件/</id>
    <published>2012-08-30T13:36:38.000Z</published>
    <updated>2016-11-20T14:29:41.196Z</updated>
    
    <content type="html"><![CDATA[<p>自己的VIM配置文件，备忘。</p>
<p>~/.vimrc</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">&quot;VIM配置文件</div><div class="line">&quot;author: ljgabc</div><div class="line">&quot; email: ljgabc@gmail.com</div><div class="line">&quot;</div><div class="line">&quot; useage:</div><div class="line">&quot;  1 git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</div><div class="line">&quot;  2 cp vimrc ~/.vimrc</div><div class="line">&quot;  3 open vim, :BundleInstall&lt;CR&gt;</div><div class="line"></div><div class="line">&quot;不兼容vi</div><div class="line">set nocompatible</div><div class="line"></div><div class="line">&quot;显示行号</div><div class="line">set number</div><div class="line"></div><div class="line">&quot;语法高亮</div><div class="line">syntax on</div><div class="line"></div><div class="line">&quot;高亮当前行</div><div class="line">&quot;set cursorline</div><div class="line"></div><div class="line">&quot;配色方案</div><div class="line">colorscheme darkblue</div><div class="line"></div><div class="line">&quot;回车键行为</div><div class="line">set backspace=2</div><div class="line"></div><div class="line">&quot;tab键插入空格代替&lt;tab&gt;</div><div class="line">set expandtab</div><div class="line"></div><div class="line">&quot;不显示状态栏</div><div class="line">set laststatus=0</div><div class="line"></div><div class="line">&quot;显示ruler</div><div class="line">set ruler</div><div class="line"></div><div class="line">set rulerformat=%=%&#123;strftime(&apos;%H:%M&apos;)&#125;</div><div class="line">&quot;设置tab键宽度</div><div class="line">set tabstop=4</div><div class="line"></div><div class="line">&quot;缩进空格个数</div><div class="line">set shiftwidth=4</div><div class="line">set softtabstop=4</div><div class="line"></div><div class="line">&quot;自动缩进</div><div class="line">set autoindent</div><div class="line"></div><div class="line">&quot;smart缩进</div><div class="line">set smartindent</div><div class="line"></div><div class="line">&quot;显示匹配括号</div><div class="line">set showmatch</div><div class="line"></div><div class="line">&quot;高亮搜索字符</div><div class="line">set hlsearch</div><div class="line"></div><div class="line">&quot;搜索过程中同时高亮</div><div class="line">set incsearch</div><div class="line"></div><div class="line">&quot;设置文件编码格式</div><div class="line">set encoding=utf-8</div><div class="line">set fileencoding=utf-8</div><div class="line">set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1</div><div class="line"></div><div class="line">&quot;设置字体</div><div class="line">set guifont=Monospace\ 11</div><div class="line"></div><div class="line">&quot;自动切换目录</div><div class="line">set autochdir</div><div class="line"></div><div class="line">&quot;设置代码折叠方式,使用标记</div><div class="line">set foldmethod=marker</div><div class="line"></div><div class="line">&quot; 正常模式下，空格打开和关闭折叠</div><div class="line">nnoremap &lt;silent&gt; &lt;space&gt; za</div><div class="line"></div><div class="line"></div><div class="line">&quot;Ctrl+s保存文件</div><div class="line">nnoremap &lt;silent&gt; &lt;C-s&gt; &lt;ESC&gt;:wa&lt;CR&gt;</div><div class="line">vnoremap &lt;silent&gt; &lt;C-s&gt; &lt;ESC&gt;:wa&lt;CR&gt;</div><div class="line">inoremap &lt;silent&gt; &lt;C-s&gt; &lt;ESC&gt;:wa&lt;CR&gt;</div><div class="line"></div><div class="line">&quot;Ctrl+n打开新标签页</div><div class="line">nnoremap &lt;silent&gt; &lt;C-n&gt; &lt;ESC&gt;:tabnew&lt;CR&gt;:e </div><div class="line">vnoremap &lt;silent&gt; &lt;C-n&gt; &lt;ESC&gt;:tabnew&lt;CR&gt;:e </div><div class="line">inoremap &lt;silent&gt; &lt;C-n&gt; &lt;ESC&gt;:tabnew&lt;CR&gt;:e </div><div class="line"></div><div class="line">&quot;F3向左切换标签页</div><div class="line">nnoremap &lt;silent&gt; &lt;F3&gt; &lt;ESC&gt;:tabprev&lt;CR&gt;</div><div class="line">vnoremap &lt;silent&gt; &lt;F3&gt; &lt;ESC&gt;:tabprev&lt;CR&gt; </div><div class="line">inoremap &lt;silent&gt; &lt;F3&gt; &lt;ESC&gt;:tabprev&lt;CR&gt; </div><div class="line"></div><div class="line">&quot;F4向右切换标签页</div><div class="line">nnoremap &lt;silent&gt; &lt;F4&gt; &lt;ESC&gt;:tabnext&lt;CR&gt;</div><div class="line">vnoremap &lt;silent&gt; &lt;F4&gt; &lt;ESC&gt;:tabnext&lt;CR&gt; </div><div class="line">inoremap &lt;silent&gt; &lt;F4&gt; &lt;ESC&gt;:tabnext&lt;CR&gt; </div><div class="line"></div><div class="line">&quot;F5打开NERDTree</div><div class="line">nnoremap &lt;silent&gt; &lt;F5&gt; &lt;ESC&gt;:NERDTreeToggle&lt;CR&gt;</div><div class="line">vnoremap &lt;silent&gt; &lt;F5&gt; &lt;ESC&gt;:NERDTreeToggle&lt;CR&gt; </div><div class="line">inoremap &lt;silent&gt; &lt;F5&gt; &lt;ESC&gt;:NERDTreeToggle&lt;CR&gt; </div><div class="line"></div><div class="line">&quot;bundle配置</div><div class="line">filetype off</div><div class="line">set rtp+=~/.vim/bundle/vundle/</div><div class="line">call vundle#rc()</div><div class="line">Bundle &apos;gmarik/vundle&apos;</div><div class="line">Bundle &apos;scrooloose/nerdtree&apos;</div><div class="line">filetype plugin indent on</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己的VIM配置文件，备忘。&lt;/p&gt;
&lt;p&gt;~/.vimrc&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class
    
    </summary>
    
      <category term="Linux" scheme="http://ljgabc.com/categories/Linux/"/>
    
    
      <category term="VIM" scheme="http://ljgabc.com/tags/VIM/"/>
    
  </entry>
  
  <entry>
    <title>A Tour of Verification</title>
    <link href="http://ljgabc.com/2012/03/22/2012-03-22-A-Tour-of-Verification/"/>
    <id>http://ljgabc.com/2012/03/22/2012-03-22-A-Tour-of-Verification/</id>
    <published>2012-03-22T12:44:41.000Z</published>
    <updated>2016-11-20T14:29:41.196Z</updated>
    
    <content type="html"><![CDATA[<p>#1 验证流程</p>
<ul>
<li>需求</li>
<li>测试点</li>
<li>环境</li>
<li>用例</li>
<li>覆盖率</li>
</ul>
<p>#2 需求</p>
<ul>
<li>设计人员 -&gt; 可实现性</li>
<li>验证人员 -&gt; 可验证性</li>
</ul>
<p>#3 测试点分类</p>
<ul>
<li>接口</li>
<li>功能</li>
<li>结构体</li>
<li>稳定性</li>
<li>可靠性</li>
</ul>
<p>#4 测试点方法</p>
<ul>
<li>等价类</li>
<li>边界值</li>
<li>错误推测</li>
<li>因果图</li>
<li>场景</li>
</ul>
<p>#5 方式方法</p>
<ul>
<li>Formal</li>
<li>Random</li>
<li>Assertion</li>
</ul>
<p>#6 验证语言与方法</p>
<ul>
<li>验证语言<ul>
<li>SystemVerilog / SystemC</li>
</ul>
</li>
<li>验证方法<ul>
<li>OVM(Mentor、Candence)</li>
<li>VMM(ARM、Synopsys)</li>
<li>UVM(OVM + VMM)</li>
</ul>
</li>
</ul>
<p>#7 环境组成</p>
<ul>
<li>DUT / DUV</li>
<li>BFM (Driver / Monitor)</li>
<li>Generator</li>
<li>Reference Model</li>
<li>Checker (ScoreBoard)</li>
<li>Channel ( FIFO )</li>
<li>ENV / SubENV</li>
<li>TestCase</li>
</ul>
<p>#8 覆盖率</p>
<ul>
<li>Function Coverage</li>
<li>Code Coverage<ul>
<li>line</li>
<li>cond</li>
<li>fsm</li>
<li>tgl</li>
<li>branch</li>
<li>assert</li>
<li>path</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#1 验证流程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需求&lt;/li&gt;
&lt;li&gt;测试点&lt;/li&gt;
&lt;li&gt;环境&lt;/li&gt;
&lt;li&gt;用例&lt;/li&gt;
&lt;li&gt;覆盖率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;#2 需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计人员 -&amp;gt; 可实现性&lt;/li&gt;
&lt;li&gt;验证人员 
    
    </summary>
    
      <category term="ASIC" scheme="http://ljgabc.com/categories/ASIC/"/>
    
    
      <category term="Verification" scheme="http://ljgabc.com/tags/Verification/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ljgabc.com/2011/10/01/2011-10-01-Hello-World/"/>
    <id>http://ljgabc.com/2011/10/01/2011-10-01-Hello-World/</id>
    <published>2011-10-01T13:36:49.000Z</published>
    <updated>2016-11-20T14:29:41.196Z</updated>
    
    <content type="html"><![CDATA[<p>程序猿的第一篇文章大抵都是Hello World吧</p>
<p>试一下语法高亮<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print &quot;Hello World!&quot;</div></pre></td></tr></table></figure></p>
<p>行内<code>print &quot;Hello World.&quot;</code>高亮</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;程序猿的第一篇文章大抵都是Hello World吧&lt;/p&gt;
&lt;p&gt;试一下语法高亮&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;
    
    </summary>
    
      <category term="杂" scheme="http://ljgabc.com/categories/%E6%9D%82/"/>
    
    
  </entry>
  
</feed>
